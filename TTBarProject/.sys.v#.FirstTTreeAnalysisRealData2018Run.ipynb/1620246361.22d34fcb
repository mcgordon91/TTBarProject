{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.20/02\n"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "import glob\n",
    "ROOT.gROOT.ProcessLine(\".L FTFunctions.cpp\")\n",
    "ROOT.gInterpreter.Declare(\"\"\"\n",
    "    const UInt_t barWidth = 60;\n",
    "    ULong64_t processed = 0, totalEvents = 0;\n",
    "    std::string progressBar;\n",
    "    std::mutex barMutex; \n",
    "    auto registerEvents = [](ULong64_t nIncrement) {totalEvents += nIncrement;};\n",
    "    ROOT::RDF::RResultPtr<ULong64_t> AddProgressBar(ROOT::RDF::RNode df, int everyN=10000, int totalN=100000) {\n",
    "        registerEvents(totalN);\n",
    "        auto c = df.Count();\n",
    "        c.OnPartialResultSlot(everyN, [everyN] (unsigned int slot, ULong64_t &cnt){\n",
    "            std::lock_guard<std::mutex> l(barMutex);\n",
    "            processed += everyN; //everyN captured by value for this lambda\n",
    "            progressBar = \"[\";\n",
    "            for(UInt_t i = 0; i < static_cast<UInt_t>(static_cast<Float_t>(processed)/totalEvents*barWidth); ++i){\n",
    "                progressBar.push_back('|');\n",
    "            }\n",
    "            // escape the '\\' when defined in python string\n",
    "            std::cout << \"\\\\r\" << std::left << std::setw(barWidth) << progressBar << \"] \" << processed << \"/\" << totalEvents << std::flush;\n",
    "        });\n",
    "        return c;\n",
    "    }\n",
    "\"\"\")\n",
    "# Enables multithreading\n",
    "useRange = False\n",
    "if not useRange:\n",
    "    nThreads = 8\n",
    "    ROOT.ROOT.EnableImplicitMT(nThreads)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "listOfFiles = glob.glob(\"/eos/user/m/migordon/Skims/NANOv8/UL18/SingleMuon/*/*_Skim.root\")\n",
    "vecList = ROOT.std.vector(str)()\n",
    "\n",
    "for element in listOfFiles:\n",
    "    vecList.push_back(element)\n",
    "\n",
    "print(vecList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test = glob.glob(\"/eos/user/m/migordon/Skims/NANOv8/UL18/SingleMuon/*/*_Skim.root\")\n",
    "print(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#rdf\n",
    "rdf = ROOT.ROOT.RDataFrame(\"Events\", vecList)\n",
    "mureport = rdf.Report()\n",
    "mrdf = ROOT.ROOT.RDataFrame(\"Runs\", vecList)\n",
    "\n",
    "if useRange:\n",
    "    rdf = rdf.Range(1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "branches = rdf.GetColumnNames()\n",
    "\n",
    "for branch in branches:\n",
    "    if \"Jet_\" in str(branch):\n",
    "        print(branch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(mrdf.GetColumnNames())\n",
    "rstat = mrdf.Stats(\"run\")\n",
    "#rstat = rstat.GetValue()\n",
    "print(type(rstat))\n",
    "print(rstat.GetMin(), rstat.GetMax())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rdfTriggersAndMasks = rdf.Filter(\"HLT_IsoMu27 == true\",\"HLTTriggerSingleMuonTrigger\")\\\n",
    "    .Define(\"mu_mask\", \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_tightId == true && Muon_pfIsoId >= 4\")\\\n",
    "    .Define(\"mu_veto\", \"Muon_pt > 10 && abs(Muon_eta) < 2.4 && Muon_looseId == true && Muon_pfIsoId >= 4 && mu_mask == false\")\n",
    "    #.Define(\"jet_mask_old\", \"Jet_pt > 30 && abs(Jet_eta) < 2.5 && Jet_jetId > 2\")\n",
    "rdfOnePlusMuons = rdfTriggersAndMasks.Filter(\"Sum(mu_mask) == 1\", \"Exactly One Good Muon\")\\\n",
    "    .Define(\"SMuon_pt\", \"Muon_pt[mu_mask]\")\\\n",
    "    .Define(\"SMuon_eta\", \"Muon_eta[mu_mask]\")\\\n",
    "    .Define(\"SMuon_phi\", \"Muon_phi[mu_mask]\")\\\n",
    "    .Define(\"SMuon_mass\", \"Muon_mass[mu_mask]\")\\\n",
    "    .Define(\"SMuon_pfRelIso03_all\", \"Muon_pfRelIso03_all[mu_mask]\")\\\n",
    "    .Define(\"SMuon_pfRelIso03_chg\", \"Muon_pfRelIso03_chg[mu_mask]\")\\\n",
    "    .Define(\"SMuon_pfRelIso04_all\", \"Muon_pfRelIso04_all[mu_mask]\")\\\n",
    "    .Define(\"VetoMuon_pt\", \"Muon_pt[mu_veto]\")\\\n",
    "    .Define(\"VetoMuon_eta\", \"Muon_eta[mu_veto]\")\\\n",
    "    .Define(\"VetoMuon_phi\", \"Muon_phi[mu_veto]\")\\\n",
    "    .Define(\"VetoMuon_mass\", \"Muon_mass[mu_veto]\")\\\n",
    "    .Define(\"VetoMuon_pfRelIso03_all\", \"Muon_pfRelIso03_all[mu_veto]\")\\\n",
    "    .Define(\"VetoMuon_pfRelIso03_chg\", \"Muon_pfRelIso03_chg[mu_veto]\")\\\n",
    "    .Define(\"VetoMuon_pfRelIso04_all\", \"Muon_pfRelIso04_all[mu_veto]\")\n",
    "rdfJetVariables = rdfOnePlusMuons\\\n",
    "    .Define(\"jet_mask\", \"ROOT::VecOps::RVec<Int_t> jmask = (Jet_pt >= 30 && abs(Jet_eta) <= 2.5 && Jet_jetId > 2); \"\\\n",
    "                      \"for(int i=0; i < SMuon_pt.size(); ++i){\"\\\n",
    "                          \"ROOT::VecOps::RVec<Float_t> dr;\"\\\n",
    "                          \"for(int j=0; j < jmask.size(); ++j){\"\\\n",
    "                              \"dr.push_back(ROOT::VecOps::DeltaR(Jet_eta.at(j), SMuon_eta.at(i), Jet_phi.at(j), SMuon_phi.at(i)));}\"\\\n",
    "                              \"jmask = jmask && dr >= 0.4;\"\\\n",
    "                              \"dr.clear();}\"\\\n",
    "                      \"return jmask;\")\\\n",
    "    .Define(\"MediumBJetMask\", \"Jet_btagDeepFlavB > 0.3033 && jet_mask\" )\\\n",
    "    .Define(\"MTofMETandMu\", \"FTA::transverseMassMET(SMuon_pt, SMuon_phi, SMuon_mass, MET_pt, MET_phi)\")\\\n",
    "    .Define(\"Num_Jets\", \"Jet_pt[jet_mask].size()\")\\\n",
    "    .Define(\"SJet1_pt\", \"Jet_pt[jet_mask].size() > 0 ? Jet_pt[jet_mask].at(0) : -500\")\\\n",
    "    .Define(\"SJet2_pt\", \"Jet_pt[jet_mask].size() > 1 ? Jet_pt[jet_mask].at(1) : -500\")\\\n",
    "    .Define(\"SJet1_eta\", \"Jet_eta[jet_mask].size() > 0 ? Jet_eta[jet_mask].at(0) : 500\")\\\n",
    "    .Define(\"SJet2_eta\", \"Jet_eta[jet_mask].size() > 1 ? Jet_eta[jet_mask].at(1) : 500\")\\\n",
    "    .Define(\"SJet1_phi\", \"Jet_phi[jet_mask].size() > 0 ? Jet_phi[jet_mask].at(0) : 500\")\\\n",
    "    .Define(\"SJet2_phi\", \"Jet_phi[jet_mask].size() > 1 ? Jet_phi[jet_mask].at(1) : 500\")\\\n",
    "    .Define(\"SJet_btagDeepFlavB\", \"Jet_btagDeepFlavB[jet_mask]\")\\\n",
    "    .Define(\"Num_BTaggedJets\", \"Sum(MediumBJetMask)\")\\\n",
    "    .Define(\"Ht\", \"Sum(Jet_pt[jet_mask])\")\n",
    "rdfTwoPlusJets = rdfJetVariables.Filter(\"Num_Jets >= 2\", \"At Least Two Jets\")\\\n",
    "    .Define(\"DeepJetB\", \"Jet_pt[jet_mask].size() > 0 ? Jet_btagDeepFlavB[jet_mask].at(0) : 0\")\\\n",
    "    .Define(\"Num_Muons\", \"Muon_pt[mu_mask].size()\")\\\n",
    "    .Define(\"Num_Muons_Alternative\", \"Sum(mu_mask)\")\n",
    "rdfNoMuTrigger = rdf.Filter(\"HLT_IsoMu27 == false\",\"Fail HLTTriggerSingleMuonTrigger\")\\\n",
    "    .Define(\"mu_mask\", \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_looseId == true && Muon_pfIsoId >= 4\")\\\n",
    "    .Define(\"jet_mask_old\", \"Jet_pt > 30 && abs(Jet_eta) < 2.5 && Jet_jetId > 2\")\\\n",
    "    .Filter(\"Sum(mu_mask) > 0\", \"At Least One Good Muon\")\\\n",
    "    .Define(\"SMuon_pt\", \"Muon_pt[mu_mask]\")\\\n",
    "    .Define(\"SMuon_eta\", \"Muon_eta[mu_mask]\")\\\n",
    "    .Define(\"SMuon_phi\", \"Muon_phi[mu_mask]\")\\\n",
    "    .Define(\"SMuon_mass\", \"Muon_mass[mu_mask]\")\n",
    "rdfmuOneBTaggedJet = rdfTwoPlusJets.Filter(\"Num_BTaggedJets >= 1\", \"At Least One B-Tagged Jet\")\n",
    "rdfmu = rdfmuOneBTaggedJet.Filter(\"Sum(mu_veto) == 0\", \"No Vetoed Muons\")\n",
    "rdfmuVeto = rdfmuOneBTaggedJet.Filter(\"Sum(mu_veto) == 1\", \"Exactly One Vetoed Muon\")\\\n",
    "    .Define(\"VetoMTofMETandMu\", \"FTA::transverseMassMET(VetoMuon_pt, VetoMuon_phi, VetoMuon_mass, MET_pt, MET_phi)\")\n",
    "    #All SMuon added sometime in August, 2020; criteria taken from...\n",
    "    #All SJets added 9-9-20; idea was to plot transverse momentum, pseudorapidity, and jet angle for situations with at least 1 and at least 2 jets because...; criteria taken from...\n",
    "    #Num_Jets filter added 10-8-20 to ensure we look at situations with at least 2 jets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Eventually, we shall add the 2017 Data into here as well, so a flag will need to be added (since the 2017 data had METFix stuff) (4-22-21)\n",
    "hist = {}\n",
    "report = rdf.Report()\n",
    "\n",
    "hist[\"mu_pt\"] = rdfmu.Histo1D((\"mu_pt\",\"Muon Transverse Momentum; Pt (GeV);Events\",100,20,220),\"SMuon_pt\")\n",
    "hist[\"mu_eta\"] = rdfmu.Histo1D((\"mu_eta\", \"Muon Pseudorapidity; Eta; Events\",100,-3,3),\"SMuon_eta\")\n",
    "hist[\"mu_phi\"] = rdfmu.Histo1D((\"mu_phi\", \"Muon Angle; Phi (Radians); Events\",100,-3.5,3.5),\"SMuon_phi\")\n",
    "# Jet1 and jet2 values corresponding to situations with at least 1 and at least 2 jets plotted because...; all added 9-9-20\n",
    "hist[\"jet1_pt\"] = rdfmu.Histo1D((\"jet1_pt\", \"Jet Transverse Momentum for Leading Jet; Pt (GeV); Events\", 100, 20, 200), \"SJet1_pt\")\n",
    "hist[\"jet2_pt\"] = rdfmu.Histo1D((\"jet2_pt\", \"Jet Transverse Momentum for Subleading Jet; Pt (GeV); Events\", 100, 20, 200), \"SJet2_pt\")\n",
    "hist[\"jet1_eta\"] = rdfmu.Histo1D((\"jet1_eta\", \"Jet Pseudorapidity for Leading Jet; Eta; Events\", 100, -3, 3), \"SJet1_eta\")\n",
    "hist[\"jet2_eta\"] = rdfmu.Histo1D((\"jet2_eta\", \"Jet Pseudorapidity for Subleading Jet; Eta; Events\", 100, -3, 3), \"SJet2_eta\")\n",
    "hist[\"jet1_phi\"] = rdfmu.Histo1D((\"jet1_phi\", \"Jet Angle for Leading Jet; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet1_phi\")\n",
    "hist[\"jet2_phi\"] = rdfmu.Histo1D((\"jet2_phi\", \"Jet Angle for Subleading Jet; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet2_phi\")\n",
    "hist[\"jet_deep\"] = rdfmu.Histo1D((\"jet_deep\", \"Deep Jet B Discriminator; Discriminant Value; Events\", 100, 0, 1), \"DeepJetB\")\n",
    "hist[\"number_of_jets\"] = rdfmu.Histo1D((\"number_of_jets\", \"Number of Jets; Number Of Jets; Events\", 20, 0, 20), \"Num_Jets\") \n",
    "hist[\"number_of_muons\"] = rdfmu.Histo1D((\"number_of_muons\", \"Number of Muons; Number of Muons; Events\", 5, 0, 5), \"Num_Muons\")\n",
    "hist[\"transverse_mass\"] = rdfmu.Histo1D((\"transverse_mass\", \"Transverse Mass; Transverse Mass (GeV); Events\", 150, 0, 150), \"MTofMETandMu\")\n",
    "hist[\"missing_transverse_momentum\"] = rdfmu.Histo1D((\"missing_transverse_momentum\", \"Missing Transverse Momentum; Missing Transverse Momentum(GeV); Events\", 150, 0, 300), \"MET_pt\")\n",
    "hist[\"ht\"] = rdfmu.Histo1D((\"ht\", \"Ht; Ht; Events\", 300, 0, 1500), \"Ht\")\n",
    "hist[\"muon_pfRelIso03_all\"] = rdfmu.Histo1D((\"muon_pfRelIso03_all\", \"Muon Pf Rel Iso 03 (All); Muon Pf Rel Iso 03 (All); Events\", 60, 0, .3), \"SMuon_pfRelIso03_all\")\n",
    "hist[\"muon_pfRelIso03_chg\"] = rdfmu.Histo1D((\"muon_pfRelIso03_chg\", \"Muon Pf Rel Iso 03 (Chg); Muon Pf Rel Iso 03 (Chg); Events\", 60, 0, .3), \"SMuon_pfRelIso03_chg\")\n",
    "hist[\"muon_pfRelIso04_all\"] = rdfmu.Histo1D((\"muon_pfRelIso04_all\", \"Muon Pf Rel Iso 04 (All); Muon Pf Rel Iso 04 (All); Events\", 60, 0, .3), \"SMuon_pfRelIso04_all\")\n",
    "\n",
    "hist[\"veto_mu_pt\"] = rdfmuVeto.Histo1D((\"veto_mu_pt\", \"Muon Transverse Momentum for Vetoed Muons; Pt (Gev); Events\",100,20,220),\"VetoMuon_pt\")\n",
    "hist[\"veto_mu_eta\"] = rdfmuVeto.Histo1D((\"veto_mu_eta\", \"Muon Pseudorapidity for Vetoed Muons; Eta; Events\",100,-3,3),\"VetoMuon_eta\")\n",
    "hist[\"veto_mu_phi\"] = rdfmuVeto.Histo1D((\"veto_mu_phi\", \"Muon Angle for Vetoed Muons; Phi (Radians); Events\",100,-3.5,3.5),\"VetoMuon_phi\")\n",
    "hist[\"veto_mu_mass\"] = rdfmuVeto.Histo1D((\"veto_mu_mass\", \"Transverse Mass for Vetoed Muons; Transverse Mass (GeV); Events\",150,0,150),\"VetoMuon_mass\")\n",
    "hist[\"veto_mu_pfRelIso03_all\"] = rdfmuVeto.Histo1D((\"veto_mu_pfRelIso03_all\", \"Muon Pf Rel Iso 03 (All) for Vetoed Muons; Muon Pf Rel Iso 03 (All); Events\", 60, 0, .3), \"VetoMuon_pfRelIso03_all\")\n",
    "# Missing transverse momentum added 10-8-20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "failTrigger = {}\n",
    "failTrigger[\"mu_pt\"] = rdfNoMuTrigger.Histo1D((\"failTrigger_mu_pt\",\"Failed Trigger Muon Pt;Pt (GeV);Events\",100,20,220),\"SMuon_pt\")\n",
    "failTrigger[\"mu_eta\"] = rdfNoMuTrigger.Histo1D((\"failTrigger_mu_eta\", \"Failed Trigger Muon Pseudorapidity; Eta; Events\",100,-3,3),\"SMuon_eta\")\n",
    "failTrigger[\"mu_phi\"] = rdfNoMuTrigger.Histo1D((\"failTrigger_mu_phi\", \"Failed Trigger Muon Angle; Phi (Radians); Events\",100,-3.5,3.5),\"SMuon_phi\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ROOT.RDF.SaveGraph(rdf, \"graph.dot\")\n",
    "import graphviz\n",
    "g = graphviz.Digraph('G', filename='graph.dot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "booktrigger = rdf.Count()\n",
    "_ = booktrigger.GetValue()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cutflow = report.GetValue()\n",
    "cutflow.Print()\n",
    "\n",
    "era = \"2018\"\n",
    "process = \"Data\"\n",
    "channel = \"Mu\"\n",
    "syst = \"nominal\"\n",
    "\n",
    "outFile = ROOT.TFile.Open(\"{}_{}_{}.root\".format(era, channel, process), \"RECREATE\")\n",
    "for name, hist_value in hist.items():\n",
    "\n",
    "    hist_value.SetName(\"{}___{}___{}___{}___{}\".format(era, channel, process, hist_value.GetName(), syst))\n",
    "\n",
    "    hist_value.Write()\n",
    "\n",
    "#Close the file\n",
    "\n",
    "outFile.Close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
