{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.20/02\n"
     ]
    }
   ],
   "source": [
    "import ROOT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#listOfFiles = []\n",
    "#redirector = \"root://cms-xrd-global.cern.ch/\"\n",
    "#with open(\"TTToSemiLeptonic.txt\", \"r\") as inputFile:\n",
    "#    for line in inputFile:\n",
    "#        cleanLine = line.rstrip()\n",
    "#        listOfFiles.append(redirector + cleanLine)\n",
    "#listOfFiles = listOfFiles[0:2]\n",
    "listOfFiles = [\"../TopMassFiles/TTToSemiLeptonic-2017-1.root\",\"../TopMassFiles/TTToSemiLeptonic-2017-2.root\",\"../TopMassFiles/TTToSemiLeptonic-2017-3.root\",\"../TopMassFiles/TTToSemiLeptonic-2017-4.root\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "chain = ROOT.TChain(\"Events\")\n",
    "meta = ROOT.TChain(\"Runs\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<ROOT.TChain object (\"Runs\") at 0x709d280>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "for file in listOfFiles:\n",
    "    chain.Add(file)\n",
    "    meta.Add(file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "rdf = ROOT.ROOT.RDataFrame(chain)\n",
    "mrdf = ROOT.ROOT.RDataFrame(meta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<ROOT.ROOT::RDataFrame object at 0x714a7b0>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "nevents = mrdf.Sum(\"genEventCount\")\n",
    "sumweight = mrdf.Sum(\"genEventSumw\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1812760.0\n",
      "545211186.9143426\n"
     ]
    }
   ],
   "source": [
    "print(nevents.GetValue())\n",
    "print(sumweight.GetValue())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "364.310900 * 41.530000 * 1000 * genWeight / 545211186.914343\n"
     ]
    }
   ],
   "source": [
    "#Semileptonic ttbar xsection: 364.3109\n",
    "#Single mu trigger for 2017 (B,C,D,E,F): \"HLT_IsoMu27\"\n",
    "#\"HLT_Ele35_WPTight_Gsf\"\n",
    "lumiDict = {\"2017\": 41.53, \"2018\": 59.97}\n",
    "wgtFormula = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=364.3109, lumi=lumiDict[\"2017\"], sW=float(sumweight.GetValue()))\n",
    "print(wgtFormula)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "rdfmu = rdf.Filter(\"HLT_IsoMu27 == true\",\"HLTTriggerSingleMuonTrigger\").Define(\"LumiXS\",wgtFormula)\\\n",
    "    .Define(\"mu_mask\", \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_looseId == true && Muon_pfIsoId >= 4\")\\\n",
    "    .Define(\"jet_mask\", \"Jet_pt > 30 && abs(Jet_eta) < 2.5 && Jet_jetId > 2\")\\\n",
    "    .Filter(\"Sum(mu_mask) > 0\", \"At Least One Good Muon\")\\\n",
    "    .Define(\"SMuon_pt\", \"Muon_pt[mu_mask]\")\\\n",
    "    .Define(\"SMuon_eta\", \"Muon_eta[mu_mask]\")\\\n",
    "    .Define(\"SJet1_pt\", \"Jet_pt[jet_mask].size() > 0 ? Jet_pt[jet_mask].at(0) : 0\")\\\n",
    "    .Define(\"SJet2_pt\", \"Jet_pt[jet_mask].size() > 1 ? Jet_pt[jet_mask].at(1) : 0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "hist = {}\n",
    "hist[\"mu_pt\"] = rdfmu.Histo1D((\"mu_pt\",\"\",100,20,220),\"SMuon_pt\",\"LumiXS\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "c = ROOT.TCanvas()\n",
    "hist[\"mu_pt\"].Draw(\"HIST S\")\n",
    "c.Draw() #Show number of jets and pt of first and second jet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
