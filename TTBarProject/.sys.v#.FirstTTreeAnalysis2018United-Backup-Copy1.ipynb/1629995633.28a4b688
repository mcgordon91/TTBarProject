{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "systematic-malaysia",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.24/00\n"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "import glob\n",
    "ROOT.gROOT.ProcessLine(\".L FTFunctions.cpp\")\n",
    "ROOT.gInterpreter.Declare(\"\"\"\n",
    "    const UInt_t barWidth = 60;\n",
    "    ULong64_t processed = 0, totalEvents = 0;\n",
    "    std::string progressBar;\n",
    "    std::mutex barMutex; \n",
    "    auto registerEvents = [](ULong64_t nIncrement) {totalEvents += nIncrement;};\n",
    "    ROOT::RDF::RResultPtr<ULong64_t> AddProgressBar(ROOT::RDF::RNode df, int everyN=10000, int totalN=100000) {\n",
    "        registerEvents(totalN);\n",
    "        auto c = df.Count();\n",
    "        c.OnPartialResultSlot(everyN, [everyN] (unsigned int slot, ULong64_t &cnt){\n",
    "            std::lock_guard<std::mutex> l(barMutex);\n",
    "            processed += everyN; //everyN captured by value for this lambda\n",
    "            progressBar = \"[\";\n",
    "            for(UInt_t i = 0; i < static_cast<UInt_t>(static_cast<Float_t>(processed)/totalEvents*barWidth); ++i){\n",
    "                progressBar.push_back('|');\n",
    "            }\n",
    "            // escape the '\\' when defined in python string\n",
    "            std::cout << \"\\\\r\" << std::left << std::setw(barWidth) << progressBar << \"] \" << processed << \"/\" << totalEvents << std::flush;\n",
    "        });\n",
    "        return c;\n",
    "    }\n",
    "\"\"\")\n",
    "# Enables multithreading\n",
    "useRange = True\n",
    "if not useRange:\n",
    "    nThreads = 8\n",
    "    ROOT.ROOT.EnableImplicitMT(nThreads)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "basic-fancy",
   "metadata": {},
   "outputs": [],
   "source": [
    "listOfFilesData = glob.glob(\"/eos/user/m/migordon/Skims/NANOv8/UL18/SingleMuon/*/*_Skim.root\")\n",
    "listOfFilesMonteCarloTTToSemiLeptonic = glob.glob(\"/eos/user/m/migordon/Skims/NANOv8/UL18/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/*_Skim.root\")\n",
    "listOfFilesMonteCarloTTTo2L2Nu = glob.glob(\"/eos/user/m/migordon/Skims/NANOv8/UL18/TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/*_Skim.root\")\n",
    "\n",
    "listOfFilesMonteCarloTTToSemiLeptonic = listOfFilesMonteCarloTTToSemiLeptonic[0:1]\n",
    "listOfFilesMonteCarloTTTo2L2Nu = listOfFilesMonteCarloTTTo2L2Nu[0:1]\n",
    "\n",
    "dictOfListOfFiles = {\"Data\" : listOfFilesData, \"MonteCarloTTToSemiLeptonic\" : listOfFilesMonteCarloTTToSemiLeptonic, \"MonteCarloTTTo2L2Nu\" : listOfFilesMonteCarloTTTo2L2Nu} "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "hispanic-membrane",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TClass::Init>: no dictionary for class edm::Hash<1> is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ProcessHistory is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ProcessConfiguration is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ParameterSetBlob is available\n",
      "Warning in <TClass::Init>: no dictionary for class __pair_base<edm::Hash<1>,edm::ParameterSetBlob> is available\n",
      "Warning in <TClass::Init>: no dictionary for class pair<edm::Hash<1>,edm::ParameterSetBlob> is available\n"
     ]
    }
   ],
   "source": [
    "chain = {}\n",
    "meta = {}\n",
    "rdf = {}\n",
    "mrdf = {}\n",
    "nevents = {}\n",
    "sumweight = {}\n",
    "neventsVal = {}\n",
    "rdfTriggersAndMasks = {}\n",
    "rdfOnePlusMuons = {}\n",
    "rdfJetVariables = {}\n",
    "rdfTwoPlusJets = {}\n",
    "rdfNoMuTrigger = {}\n",
    "rdfmuOneBTaggedJet = {}\n",
    "rdfmu = {}\n",
    "rdfmuVeto = {}\n",
    "hist = {}\n",
    "report = {}\n",
    "failTrigger = {}\n",
    "\n",
    "for sample, fileList in dictOfListOfFiles.items():\n",
    "    \n",
    "    if sample == 'Data':\n",
    "        vecList = ROOT.std.vector(str)()\n",
    "\n",
    "        for element in dictOfListOfFiles['Data']:\n",
    "            vecList.push_back(element)\n",
    "\n",
    "        #print(vecList)\n",
    "        \n",
    "        rdf['Data'] = ROOT.ROOT.RDataFrame(\"Events\", vecList)\n",
    "        #mureport['Data'] = rdf['Data'].Report()\n",
    "        mrdf['Data'] = ROOT.ROOT.RDataFrame(\"Runs\", vecList)\n",
    "\n",
    "        if useRange:\n",
    "            rdf['Data'] = rdf['Data'].Range(1000)\n",
    "        \n",
    "    else:   \n",
    "        chain[sample] = ROOT.TChain(\"Events\")\n",
    "        meta[sample] = ROOT.TChain(\"Runs\")\n",
    "    \n",
    "        for file in fileList:\n",
    "            #print(file, end=\" \")\n",
    "        \n",
    "            chain[sample].Add(file)\n",
    "            meta[sample].Add(file)\n",
    "\n",
    "        rdf[sample] = ROOT.ROOT.RDataFrame(chain[sample])\n",
    "        mrdf[sample] = ROOT.ROOT.RDataFrame(meta[sample])\n",
    "\n",
    "        if useRange:\n",
    "            rdf[sample] = rdf[sample].Range(1000)\n",
    "        \n",
    "        nevents[sample] = mrdf[sample].Sum(\"genEventCount\")\n",
    "        sumweight[sample] = mrdf[sample].Sum(\"genEventSumw\")\n",
    "    \n",
    "        #print(nevents[sample].GetValue())\n",
    "        #print(sumweight[sample].GetValue())\n",
    "        neventsVal[sample] = nevents[sample].GetValue()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "southwest-beauty",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Semileptonic ttbar xsection: 364.3109\n",
    "#Single mu trigger for 2017 (B,C,D,E,F): \"HLT_IsoMu27\"\n",
    "#\"HLT_Ele35_WPTight_Gsf\"\n",
    "#lumiDict = {\"2017\": 41.53, \"2018\": 59.97}\n",
    "wgtFormula = {}\n",
    "\n",
    "# wgtFormula used to weight each event\n",
    "# XS = Literature Cross section of the process of interest (in picobarnes; the 1000 converts to femotobarnes), lumi = presumed luminosity of the data one is normalizing against; XS * lumi = # of expected events;\n",
    "# genWeight = quantity stored in every event which comes from the Monte Carlo generator telling you what the value of the generated event is (usually close to 1); it can be + or -; it also contains matching\n",
    "#     effeciency; tells you the Monte Carlo defined value of the event\n",
    "# sW = sum of weights; normalizes the genWeight\n",
    "lumiDict = {\"2018\": 59.97} #  brilcalc lumi --normtag /cvmfs/cms-bril.cern.ch/cms-lumi-pog/Normtags/normtag_PHYSICS.json -u /fb --begin 302031 --end 302663 --hltpath \"HLT_IsoMu27*\"\n",
    "wgtFormula['Data'] = \"1\"\n",
    "wgtFormula['MonteCarloTTToSemiLeptonic'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=364.31, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloTTToSemiLeptonic'].GetValue()))\n",
    "wgtFormula['MonteCarloTTTo2L2Nu'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=87.33, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloTTTo2L2Nu'].GetValue()))\n",
    "#wgtFormula['WJetsToLNu'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=61526.7, lumi=lumiDict[\"2018\"], sW=float(sumweight['WJetsToLNu'].GetValue()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "brown-pharmaceutical",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Object selection (masks) and cuts (filters)\n",
    "# LumiXS is lumi * xs\n",
    "#.Define(\"Junk\", 'if(rdfentry_ % 200000 == 0){ std::cout << \"Processed \" << rdfentry_ << \" entries on slot \" << rdfslot_ << std::endl;} return rdfentry_;')\n",
    "for sample in dictOfListOfFiles:\n",
    "    rdfTriggersAndMasks[sample] = rdf[sample].Filter(\"HLT_IsoMu27 == true\",\"HLTTriggerSingleMuonTrigger\").Define(\"LumiXS\",wgtFormula[sample])\\\n",
    "        .Define(\"mu_mask\", \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_tightId == true && Muon_pfIsoId >= 4\")\\\n",
    "        .Define(\"mu_veto\", \"Muon_pt > 10 && abs(Muon_eta) < 2.4 && Muon_looseId == true && Muon_pfIsoId >= 4 && mu_mask == false\")\n",
    "        #.Define(\"jet_mask_old\", \"Jet_pt > 30 && abs(Jet_eta) < 2.5 && Jet_jetId > 2\")\n",
    "    rdfOnePlusMuons[sample] = rdfTriggersAndMasks[sample].Filter(\"Sum(mu_mask) == 1\", \"Exactly One Good Muon\")\\\n",
    "        .Define(\"SMuon_pt\", \"Muon_pt[mu_mask]\")\\\n",
    "        .Define(\"SMuon_eta\", \"Muon_eta[mu_mask]\")\\\n",
    "        .Define(\"SMuon_phi\", \"Muon_phi[mu_mask]\")\\\n",
    "        .Define(\"SMuon_mass\", \"Muon_mass[mu_mask]\")\\\n",
    "        .Define(\"SMuon_pfRelIso03_all\", \"Muon_pfRelIso03_all[mu_mask]\")\\\n",
    "        .Define(\"SMuon_pfRelIso03_chg\", \"Muon_pfRelIso03_chg[mu_mask]\")\\\n",
    "        .Define(\"SMuon_pfRelIso04_all\", \"Muon_pfRelIso04_all[mu_mask]\")\\\n",
    "        .Define(\"VetoMuon_pt\", \"Muon_pt[mu_veto]\")\\\n",
    "        .Define(\"VetoMuon_eta\", \"Muon_eta[mu_veto]\")\\\n",
    "        .Define(\"VetoMuon_phi\", \"Muon_phi[mu_veto]\")\\\n",
    "        .Define(\"VetoMuon_mass\", \"Muon_mass[mu_veto]\")\\\n",
    "        .Define(\"VetoMuon_pfRelIso03_all\", \"Muon_pfRelIso03_all[mu_veto]\")\\\n",
    "        .Define(\"VetoMuon_pfRelIso03_chg\", \"Muon_pfRelIso03_chg[mu_veto]\")\\\n",
    "        .Define(\"VetoMuon_pfRelIso04_all\", \"Muon_pfRelIso04_all[mu_veto]\")\n",
    "    rdfJetVariables[sample] = rdfOnePlusMuons[sample]\\\n",
    "        .Define(\"jet_mask\", \"ROOT::VecOps::RVec<Int_t> jmask = (Jet_pt >= 30 && abs(Jet_eta) <= 2.5 && Jet_jetId >= 2); \"\\\n",
    "                          \"for(int i=0; i < SMuon_pt.size(); ++i){\"\\\n",
    "                              \"ROOT::VecOps::RVec<Float_t> dr;\"\\\n",
    "                              \"for(int j=0; j < jmask.size(); ++j){\"\\\n",
    "                                  \"dr.push_back(ROOT::VecOps::DeltaR(Jet_eta.at(j), SMuon_eta.at(i), Jet_phi.at(j), SMuon_phi.at(i)));}\"\\\n",
    "                                  \"jmask = jmask && dr >= 0.4;\"\\\n",
    "                                  \"dr.clear();}\"\\\n",
    "                          \"return jmask;\")\\\n",
    "        .Define(\"MediumBJetMask\", \"Jet_btagDeepFlavB > 0.3033 && jet_mask\" )\\\n",
    "        .Define(\"MTofMETandMu\", \"FTA::transverseMassMET(SMuon_pt, SMuon_phi, SMuon_mass, MET_pt, MET_phi)\")\\\n",
    "        .Define(\"Num_Jets\", \"Jet_pt[jet_mask].size()\")\\\n",
    "        .Define(\"SJet1_pt\", \"Jet_pt[jet_mask].size() > 0 ? Jet_pt[jet_mask].at(0) : -500\")\\\n",
    "        .Define(\"SJet2_pt\", \"Jet_pt[jet_mask].size() > 1 ? Jet_pt[jet_mask].at(1) : -500\")\\\n",
    "        .Define(\"SJet1_eta\", \"Jet_eta[jet_mask].size() > 0 ? Jet_eta[jet_mask].at(0) : 500\")\\\n",
    "        .Define(\"SJet2_eta\", \"Jet_eta[jet_mask].size() > 1 ? Jet_eta[jet_mask].at(1) : 500\")\\\n",
    "        .Define(\"SJet1_phi\", \"Jet_phi[jet_mask].size() > 0 ? Jet_phi[jet_mask].at(0) : 500\")\\\n",
    "        .Define(\"SJet2_phi\", \"Jet_phi[jet_mask].size() > 1 ? Jet_phi[jet_mask].at(1) : 500\")\\\n",
    "        .Define(\"SJet_btagDeepFlavB\", \"Jet_btagDeepFlavB[jet_mask]\")\\\n",
    "        .Define(\"Num_BTaggedJets\", \"Sum(MediumBJetMask)\")\\\n",
    "        .Define(\"Ht\", \"Sum(Jet_pt[jet_mask])\")\n",
    "    rdfTwoPlusJets[sample] = rdfJetVariables[sample].Filter(\"Num_Jets >= 4\", \"At Least Four Jets\")\\\n",
    "        .Define(\"DeepJetB\", \"Jet_pt[jet_mask].size() > 0 ? Jet_btagDeepFlavB[jet_mask].at(0) : 0\")\\\n",
    "        .Define(\"Num_Muons\", \"Muon_pt[mu_mask].size()\")\n",
    "    rdfmuOneBTaggedJet[sample] = rdfTwoPlusJets[sample].Filter(\"Num_BTaggedJets >= 1\", \"At Least One B-Tagged Jet\")\n",
    "    rdfmu[sample] = rdfmuOneBTaggedJet[sample].Filter(\"Sum(mu_veto) == 0\", \"No Vetoed Muons\")\n",
    "    \n",
    "    \n",
    "    rdfNoMuTrigger[sample] = rdf[sample].Filter(\"HLT_IsoMu27 == false\",\"Fail HLTTriggerSingleMuonTrigger\").Define(\"LumiXS\",wgtFormula[sample])\\\n",
    "        .Define(\"mu_mask\", \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_looseId == true && Muon_pfIsoId >= 4\")\\\n",
    "        .Define(\"jet_mask_old\", \"Jet_pt > 30 && abs(Jet_eta) < 2.5 && Jet_jetId > 2\")\\\n",
    "        .Filter(\"Sum(mu_mask) > 0\", \"At Least One Good Muon\")\\\n",
    "        .Define(\"SMuon_pt\", \"Muon_pt[mu_mask]\")\\\n",
    "        .Define(\"SMuon_eta\", \"Muon_eta[mu_mask]\")\\\n",
    "        .Define(\"SMuon_phi\", \"Muon_phi[mu_mask]\")\\\n",
    "        .Define(\"SMuon_mass\", \"Muon_mass[mu_mask]\")\n",
    "    rdfmuVeto[sample] = rdfmuOneBTaggedJet[sample].Filter(\"Sum(mu_veto) == 1\", \"Exactly One Vetoed Muon\")\\\n",
    "        .Define(\"VetoMTofMETandMu\", \"FTA::transverseMassMET(VetoMuon_pt, VetoMuon_phi, VetoMuon_mass, MET_pt, MET_phi)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fixed-essex",
   "metadata": {},
   "outputs": [],
   "source": [
    "for sample in dictOfListOfFiles:\n",
    "    \n",
    "    if sample not in hist.keys():\n",
    "        hist[sample] = {}\n",
    "        report[sample] = rdf[sample].Report()\n",
    "        \n",
    "    if sample == 'Data':\n",
    "        \n",
    "        hist['Data'][\"mu_pt\"] = rdfmu['Data'].Histo1D((\"mu_pt\",\"Muon Transverse Momentum; Pt (GeV);Events\",100,20,220),\"SMuon_pt\")\n",
    "        hist['Data'][\"mu_eta\"] = rdfmu['Data'].Histo1D((\"mu_eta\", \"Muon Pseudorapidity; Eta; Events\",100,-3,3),\"SMuon_eta\")\n",
    "        hist['Data'][\"mu_phi\"] = rdfmu['Data'].Histo1D((\"mu_phi\", \"Muon Angle; Phi (Radians); Events\",100,-3.5,3.5),\"SMuon_phi\")\n",
    "        hist['Data'][\"jet1_pt\"] = rdfmu['Data'].Histo1D((\"jet1_pt\", \"Jet Transverse Momentum for Leading Jet; Pt (GeV); Events\", 100, 20, 200), \"SJet1_pt\")\n",
    "        hist['Data'][\"jet2_pt\"] = rdfmu['Data'].Histo1D((\"jet2_pt\", \"Jet Transverse Momentum for Subleading Jet; Pt (GeV); Events\", 100, 20, 200), \"SJet2_pt\")\n",
    "        hist['Data'][\"jet1_eta\"] = rdfmu['Data'].Histo1D((\"jet1_eta\", \"Jet Pseudorapidity for Leading Jet; Eta; Events\", 100, -3, 3), \"SJet1_eta\")\n",
    "        hist['Data'][\"jet2_eta\"] = rdfmu['Data'].Histo1D((\"jet2_eta\", \"Jet Pseudorapidity for Subleading Jet; Eta; Events\", 100, -3, 3), \"SJet2_eta\")\n",
    "        hist['Data'][\"jet1_phi\"] = rdfmu['Data'].Histo1D((\"jet1_phi\", \"Jet Angle for Leading Jet; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet1_phi\")\n",
    "        hist['Data'][\"jet2_phi\"] = rdfmu['Data'].Histo1D((\"jet2_phi\", \"Jet Angle for Subleading Jet; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet2_phi\")\n",
    "        hist['Data'][\"jet_deep\"] = rdfmu['Data'].Histo1D((\"jet_deep\", \"Deep Jet B Discriminator; Discriminant Value; Events\", 100, 0, 1), \"DeepJetB\")\n",
    "        hist['Data'][\"number_of_jets\"] = rdfmu['Data'].Histo1D((\"number_of_jets\", \"Number of Jets; Number Of Jets; Events\", 20, 0, 20), \"Num_Jets\") \n",
    "        hist['Data'][\"number_of_muons\"] = rdfmu['Data'].Histo1D((\"number_of_muons\", \"Number of Muons; Number of Muons; Events\", 5, 0, 5), \"Num_Muons\")\n",
    "        hist['Data'][\"transverse_mass\"] = rdfmu['Data'].Histo1D((\"transverse_mass\", \"Transverse Mass; Transverse Mass (GeV); Events\", 150, 0, 150), \"MTofMETandMu\")\n",
    "        hist['Data'][\"missing_transverse_momentum\"] = rdfmu['Data'].Histo1D((\"missing_transverse_momentum\", \"Missing Transverse Momentum; Missing Transverse Momentum(GeV); Events\", 150, 0, 300), \"MET_pt\")\n",
    "        hist['Data'][\"ht\"] = rdfmu['Data'].Histo1D((\"ht\", \"Ht; Ht; Events\", 300, 0, 1500), \"Ht\")\n",
    "        hist['Data'][\"muon_pfRelIso03_all\"] = rdfmu['Data'].Histo1D((\"muon_pfRelIso03_all\", \"Muon Pf Rel Iso 03 (All); Muon Pf Rel Iso 03 (All); Events\", 60, 0, .3), \"SMuon_pfRelIso03_all\")\n",
    "        hist['Data'][\"muon_pfRelIso03_chg\"] = rdfmu['Data'].Histo1D((\"muon_pfRelIso03_chg\", \"Muon Pf Rel Iso 03 (Chg); Muon Pf Rel Iso 03 (Chg); Events\", 60, 0, .3), \"SMuon_pfRelIso03_chg\")\n",
    "        hist['Data'][\"muon_pfRelIso04_all\"] = rdfmu['Data'].Histo1D((\"muon_pfRelIso04_all\", \"Muon Pf Rel Iso 04 (All); Muon Pf Rel Iso 04 (All); Events\", 60, 0, .3), \"SMuon_pfRelIso04_all\")\n",
    "        \n",
    "    else:\n",
    "        \n",
    "        hist[sample][\"mu_pt\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"mu_pt\",\"Monte Carlo \" + sample + \";Pt (GeV);Events\",100,20,220),\"SMuon_pt\",\"LumiXS\")\n",
    "        hist[sample][\"mu_eta\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"mu_eta\", \"Monte Carlo \" + sample + \"; Eta; Events\",100,-3,3),\"SMuon_eta\",\"LumiXS\")\n",
    "        hist[sample][\"mu_phi\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"mu_phi\", \"Monte Carlo \" + sample + \"; Phi (Radians); Events\",100,-3.5,3.5),\"SMuon_phi\",\"LumiXS\")\n",
    "        hist[sample][\"jet1_pt\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet1_pt\", \"Monte Carlo \" + sample + \"; Pt (GeV); Events\", 100, 20, 200), \"SJet1_pt\", \"LumiXS\")\n",
    "        hist[sample][\"jet2_pt\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet2_pt\", \"Monte Carlo \" + sample + \"; Pt (GeV); Events\", 100, 20, 200), \"SJet2_pt\", \"LumiXS\")\n",
    "        hist[sample][\"jet1_eta\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet1_eta\", \"Monte Carlo \" + sample + \"; Eta; Events\", 100, -3, 3), \"SJet1_eta\", \"LumiXS\")\n",
    "        hist[sample][\"jet2_eta\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet2_eta\", \"Monte Carlo \" + sample +\"; Eta; Events\", 100, -3, 3), \"SJet2_eta\", \"LumiXS\")\n",
    "        hist[sample][\"jet1_phi\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet1_phi\", \"Monte Carlo \" + sample + \"; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet1_phi\", \"LumiXS\")\n",
    "        hist[sample][\"jet2_phi\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet2_phi\", \"Monte Carlo \" + sample +\"; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet2_phi\", \"LumiXS\")\n",
    "        hist[sample][\"jet_deep\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet_deep\", \"Monte Carlo \" + sample +\"; Discriminant Value; Events\", 100, 0, 1), \"DeepJetB\", \"LumiXS\")\n",
    "        hist[sample][\"number_of_jets\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"number_of_jets\", \"Monte Carlo \" + sample +\"; Number Of Jets; Events\", 20, 0, 20), \"Num_Jets\", \"LumiXS\") \n",
    "        hist[sample][\"number_of_muons\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"number_of_muons\", \"Monte Carlo \" + sample +\"; Number of Muons; Events\", 5, 0, 5), \"Num_Muons\", \"LumiXS\")\n",
    "        hist[sample][\"transverse_mass\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"transverse_mass\", \"Monte Carlo \" + sample +\"; Transverse Mass (GeV); Events\", 150, 0, 150), \"MTofMETandMu\", \"LumiXS\")\n",
    "        hist[sample][\"missing_transverse_momentum\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"missing_transverse_momentum\", \"Monte Carlo\" + sample + \"; Missing Transverse Momentum(GeV); Events\", 150, 0, 300), \"MET_pt\", \"LumiXS\")\n",
    "        hist[sample][\"ht\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"ht\", \"Monte Carlo \" + sample + \"; Ht; Events\", 300, 0, 1500), \"Ht\", \"LumiXS\")\n",
    "        hist[sample][\"muon_pfRelIso03_all\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"muon_pfRelIso03_all\", \"Monte Carlo \" + sample + \"; Muon Pf Rel Iso 03 (All); Events\", 60, 0, .3), \"SMuon_pfRelIso03_all\", \"LumiXS\")\n",
    "        hist[sample][\"muon_pfRelIso03_chg\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"muon_pfRelIso03_chg\", \"Monte Carlo \" + sample + \"; Muon Pf Rel Iso 03 (Chg); Events\", 60, 0, .3), \"SMuon_pfRelIso03_chg\", \"LumiXS\")\n",
    "        hist[sample][\"muon_pfRelIso04_all\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"muon_pfRelIso04_all\", \"Monte Carlo \" + sample + \"; Muon Pf Rel Iso 04 (All); Events\", 60, 0, .3), \"SMuon_pfRelIso04_all\", \"LumiXS\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "hundred-dutch",
   "metadata": {},
   "outputs": [],
   "source": [
    "for sample in dictOfListOfFiles:\n",
    "\n",
    "    ROOT.RDF.SaveGraph(rdf[sample], str(sample) + \".dot\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "furnished-extreme",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xf209eb0>\n",
      "Name: 2018___Mu___Data___mu_pt___nominal Title: Muon Transverse Momentum NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x106827c0>\n",
      "Name: 2018___Mu___Data___mu_eta___nominal Title: Muon Pseudorapidity NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xdb66420>\n",
      "Name: 2018___Mu___Data___mu_phi___nominal Title: Muon Angle NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x10784850>\n",
      "Name: 2018___Mu___Data___jet1_pt___nominal Title: Jet Transverse Momentum for Leading Jet NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x106d5000>\n",
      "Name: 2018___Mu___Data___jet2_pt___nominal Title: Jet Transverse Momentum for Subleading Jet NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x10661d90>\n",
      "Name: 2018___Mu___Data___jet1_eta___nominal Title: Jet Pseudorapidity for Leading Jet NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xd283500>\n",
      "Name: 2018___Mu___Data___jet2_eta___nominal Title: Jet Pseudorapidity for Subleading Jet NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x107852f0>\n",
      "Name: 2018___Mu___Data___jet1_phi___nominal Title: Jet Angle for Leading Jet NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xc334100>\n",
      "Name: 2018___Mu___Data___jet2_phi___nominal Title: Jet Angle for Subleading Jet NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xf060250>\n",
      "Name: 2018___Mu___Data___jet_deep___nominal Title: Deep Jet B Discriminator NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xf05fb20>\n",
      "Name: 2018___Mu___Data___number_of_jets___nominal Title: Number of Jets NbinsX: 20\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xf03b4e0>\n",
      "Name: 2018___Mu___Data___number_of_muons___nominal Title: Number of Muons NbinsX: 5\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xf05fb50>\n",
      "Name: 2018___Mu___Data___transverse_mass___nominal Title: Transverse Mass NbinsX: 150\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x10717d10>\n",
      "Name: 2018___Mu___Data___missing_transverse_momentum___nominal Title: Missing Transverse Momentum NbinsX: 150\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xf03be70>\n",
      "Name: 2018___Mu___Data___ht___nominal Title: Ht NbinsX: 300\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x107338d0>\n",
      "Name: 2018___Mu___Data___muon_pfRelIso03_all___nominal Title: Muon Pf Rel Iso 03 (All) NbinsX: 60\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x10726140>\n",
      "Name: 2018___Mu___Data___muon_pfRelIso03_chg___nominal Title: Muon Pf Rel Iso 03 (Chg) NbinsX: 60\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x107182a0>\n",
      "Name: 2018___Mu___Data___muon_pfRelIso04_all___nominal Title: Muon Pf Rel Iso 04 (All) NbinsX: 60\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xf05f300>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___mu_pt___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x1064b770>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___mu_eta___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x105dff80>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___mu_phi___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x1086ac20>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___jet1_pt___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x107c6880>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___jet2_pt___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x106b90e0>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___jet1_eta___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xd287390>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___jet2_eta___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x106b4080>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___jet1_phi___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x106533e0>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___jet2_phi___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x108979c0>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___jet_deep___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x1073fd80>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 20\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x106f4120>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___number_of_muons___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 5\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xf04bfa0>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___transverse_mass___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 150\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x10653ea0>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___missing_transverse_momentum___nominal Title: Monte CarloMonteCarloTTToSemiLeptonic NbinsX: 150\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x1072d0d0>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___ht___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 300\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x1063ce80>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___muon_pfRelIso03_all___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 60\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x107252a0>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___muon_pfRelIso03_chg___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 60\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x1073d590>\n",
      "Name: 2018___Mu___MonteCarloTTToSemiLeptonic___muon_pfRelIso04_all___nominal Title: Monte Carlo MonteCarloTTToSemiLeptonic NbinsX: 60\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x105d6310>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___mu_pt___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x107939d0>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___mu_eta___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xb1ec1e0>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___mu_phi___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x10695220>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___jet1_pt___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x1080dbb0>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___jet2_pt___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x105d82a0>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___jet1_eta___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x107e1890>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___jet2_eta___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x1086f3c0>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___jet1_phi___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x106e1760>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___jet2_phi___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x1066c070>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___jet_deep___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xd9374c0>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 20\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x10793cf0>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___number_of_muons___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 5\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x10731fd0>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___transverse_mass___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 150\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x10647e00>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___missing_transverse_momentum___nominal Title: Monte CarloMonteCarloTTTo2L2Nu NbinsX: 150\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x10744a60>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___ht___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x105d55a0>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___muon_pfRelIso03_all___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 60\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x108650d0>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___muon_pfRelIso03_chg___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 60\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x1063cd50>\n",
      "Name: 2018___Mu___MonteCarloTTTo2L2Nu___muon_pfRelIso04_all___nominal Title: Monte Carlo MonteCarloTTTo2L2Nu NbinsX: 60\n"
     ]
    }
   ],
   "source": [
    "for sample in dictOfListOfFiles:\n",
    "    cutflow = report[sample].GetValue()\n",
    "    cutflow.Print()\n",
    "    \n",
    "    era = \"2018\"\n",
    "    process = sample\n",
    "    channel = \"Mu\"\n",
    "    syst = \"nominal\"\n",
    "\n",
    "    outFile = ROOT.TFile.Open(\"{}_{}_{}.root\".format(era, channel, process), \"RECREATE\")\n",
    "    for name, hist_pointer in hist[sample].items():\n",
    "        print(hist_pointer)\n",
    "        hist_value = hist_pointer.GetValue()\n",
    "\n",
    "        hist_value.SetName(\"{}___{}___{}___{}___{}\".format(era, channel, process, name, syst))\n",
    "        print(hist_value)\n",
    "        hist_value.Write()\n",
    "\n",
    "    outFile.Close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "hazardous-slovenia",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
