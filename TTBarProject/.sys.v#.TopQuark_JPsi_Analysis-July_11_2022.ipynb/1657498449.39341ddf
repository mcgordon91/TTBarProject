{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "hawaiian-importance",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.24/06\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <RTaskArenaWrapper>: CPU Bandwith Control Active. Proceeding with 4 threads accordingly\n"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "import glob\n",
    "import numpy as np\n",
    "import os\n",
    "ROOT.gROOT.ProcessLine(\".L FTFunctions.cpp\")\n",
    "ROOT.gInterpreter.Declare(\"\"\"\n",
    "    const UInt_t barWidth = 60;\n",
    "    ULong64_t processed = 0, totalEvents = 0;\n",
    "    std::string progressBar;\n",
    "    std::mutex barMutex; \n",
    "    auto registerEvents = [](ULong64_t nIncrement) {totalEvents += nIncrement;};\n",
    "    ROOT::RDF::RResultPtr<ULong64_t> AddProgressBar(ROOT::RDF::RNode df, int everyN=10000, int totalN=100000) {\n",
    "        registerEvents(totalN);\n",
    "        auto c = df.Count();\n",
    "        c.OnPartialResultSlot(everyN, [everyN] (unsigned int slot, ULong64_t &cnt){\n",
    "            std::lock_guard<std::mutex> l(barMutex);\n",
    "            processed += everyN; //everyN captured by value for this lambda\n",
    "            progressBar = \"[\";\n",
    "            for(UInt_t i = 0; i < static_cast<UInt_t>(static_cast<Float_t>(processed)/totalEvents*barWidth); ++i){\n",
    "                progressBar.push_back('|');\n",
    "            }\n",
    "            // escape the '\\' when defined in python string\n",
    "            std::cout << \"\\\\r\" << std::left << std::setw(barWidth) << progressBar << \"] \" << processed << \"/\" << totalEvents << std::flush;\n",
    "        });\n",
    "        return c;\n",
    "    }\n",
    "\"\"\")\n",
    "# Enables multithreading\n",
    "useRange = False\n",
    "if not useRange:\n",
    "    nThreads = 8\n",
    "    ROOT.ROOT.EnableImplicitMT(nThreads)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "nominated-resource",
   "metadata": {},
   "outputs": [],
   "source": [
    "listOfFilesData = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/SingleMuon/*/*.root\")\n",
    "listOfFilesMonteCarloTTToSemiLeptonic = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/*/*.root\")\n",
    "listOfFilesMonteCarloTTTo2L2Nu = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/*/*.root\")\n",
    "listOfFilesMonteCarloWJetsToLNu = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/WJetsToLNu_TuneCP5_13TeV-madgraphMLM-pythia8/*/*.root\")\n",
    "listOfFilesMonteCarloST_tW_top = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/ST_tW_top_5f_inclusiveDecays_TuneCP5_13TeV-powheg-pythia8/*/*.root\")\n",
    "listOfFilesMonteCarloST_tchannel_top = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/ST_t-channel_top_4f_InclusiveDecays_TuneCP5_13TeV-powheg-madspin-pythia8/*/*.root\")\n",
    "\n",
    "listOfFilesMonteCarloTTToSemiLeptonic = listOfFilesMonteCarloTTToSemiLeptonic[0:1]\n",
    "listOfFilesMonteCarloTTTo2L2Nu = listOfFilesMonteCarloTTTo2L2Nu[0:1]\n",
    "listOfFilesMonteCarloWJetsToLNu = listOfFilesMonteCarloWJetsToLNu[0:1]\n",
    "listOfFilesMonteCarloST_tW_top = listOfFilesMonteCarloST_tW_top[0:1]\n",
    "listOfFilesMonteCarloST_tchannel_top = listOfFilesMonteCarloST_tchannel_top[0:1]\n",
    "\n",
    "dictOfListOfFiles = {\"Data\" : listOfFilesData, \"MonteCarloTTToSemiLeptonic\" : listOfFilesMonteCarloTTToSemiLeptonic, \"MonteCarloTTTo2L2Nu\" : listOfFilesMonteCarloTTTo2L2Nu, \"MonteCarloWJetsToLNu\" : listOfFilesMonteCarloWJetsToLNu, \"MonteCarloST_tW_top\" : listOfFilesMonteCarloST_tW_top, \"MonteCarloST_tchannel_top\" : listOfFilesMonteCarloST_tchannel_top} "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "international-panic",
   "metadata": {},
   "outputs": [],
   "source": [
    "chain = {}\n",
    "meta = {}\n",
    "rdf = {}\n",
    "mrdf = {}\n",
    "nevents = {}\n",
    "sumweight = {}\n",
    "neventsVal = {}\n",
    "\n",
    "mureport = {}\n",
    "\n",
    "rdfPassedIsolatedLeptonTrigger = {}\n",
    "rdfIsolatedLeptonNoHighWeights = {}\n",
    "rdfIsolatedMuonNoHighWeights = {}\n",
    "rdfIsolatedElectronNoHighWeights = {}\n",
    "rdfIsolatedMuonAfterMETCut = {}\n",
    "rdfIsolatedElectronAfterMETCut = {}\n",
    "\n",
    "rdfJetAndIsolatedLeptonFiltered = {}\n",
    "\n",
    "rdfJPsiMuons = {}\n",
    "\n",
    "\n",
    "hist = {}\n",
    "report = {}\n",
    "\n",
    "\n",
    "nparray = {}\n",
    "nparraynode = {}\n",
    "\n",
    "# Muon_pfIsoId is PFIso ID from miniAOD selector (1=PFIsoVeryLoose, 2=PFIsoLoose, 3=PFIsoMedium, 4=PFIsoTight, 5=PFIsoVeryTight, 6=PFIsoVeryVeryTight)\n",
    "LeadingIsolatedMuonMask = \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_mediumId == true && Muon_pfIsoId >= 4\"\n",
    "LeadingIsolatedElectronMask = \"Electron_pt > 30 && abs(Electron_eta) < 2.4 && Electron_cutBased == 4\"\n",
    "JetMask = \"ROOT::VecOps::RVec<Int_t> jmask = (Jet_pt >= 30 && abs(Jet_eta) <= 2.5 && Jet_jetId >= 2); \"\\\n",
    "                          \"for(int i=0; i < LeadingIsolatedMuon_pt.size(); ++i){\"\\\n",
    "                              \"ROOT::VecOps::RVec<Float_t> dr;\"\\\n",
    "                              \"for(int j=0; j < jmask.size(); ++j){\"\\\n",
    "                                  \"dr.push_back(ROOT::VecOps::DeltaR(Jet_eta.at(j), LeadingIsolatedMuon_eta.at(i), Jet_phi.at(j), LeadingIsolatedMuon_phi.at(i)));}\"\\\n",
    "                                  \"jmask = jmask && dr >= 0.4;\"\\\n",
    "                                  \"dr.clear();}\"\\\n",
    "                          \"return jmask;\"\n",
    "JPsiCandidateMask = \"Muon_pt > 3 && abs(Muon_eta) <= 2.4 && Muon_mediumId == true && !(Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_mediumId == true && Muon_pfIsoId >= 4)\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f2470268",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RCutFlowReport> object at 0xe7ddba0>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TClass::Init>: no dictionary for class edm::Hash<1> is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ProcessHistory is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ProcessConfiguration is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ParameterSetBlob is available\n",
      "Warning in <TClass::Init>: no dictionary for class __pair_base<edm::Hash<1>,edm::ParameterSetBlob> is available\n",
      "Warning in <TClass::Init>: no dictionary for class pair<edm::Hash<1>,edm::ParameterSetBlob> is available\n"
     ]
    }
   ],
   "source": [
    "for sample, fileList in dictOfListOfFiles.items():\n",
    "    \n",
    "    if sample == 'Data':\n",
    "        vecList = ROOT.std.vector(str)()\n",
    "\n",
    "        for element in dictOfListOfFiles['Data']:\n",
    "            vecList.push_back(element)\n",
    "\n",
    "        rdf['Data'] = ROOT.ROOT.RDataFrame(\"Events\", vecList)    \n",
    "        mureport['Data'] = rdf['Data'].Report()\n",
    "        \n",
    "        print(rdf['Data'].Report())\n",
    "        mrdf['Data'] = ROOT.ROOT.RDataFrame(\"Runs\", vecList)\n",
    "        \n",
    "        if useRange:\n",
    "            rdf['Data'] = rdf['Data'].Range(5000)\n",
    "            nrange = 5000\n",
    "            printcode = ' if(rdfentry_ % 5000 == 0) { std::cout << \"Processed entry \" << rdfentry_ << \"/' + str(nrange) + '\" << std::endl; } return rdfentry_;'\n",
    "            print(\"Data run\")\n",
    "            rdf['Data'] = rdf['Data'].Define(\"my_rdfentry\", printcode)\n",
    "            \n",
    "\n",
    "        \n",
    "    else:\n",
    "        chain[sample] = ROOT.TChain(\"Events\")\n",
    "        meta[sample] = ROOT.TChain(\"Runs\")\n",
    "\n",
    "        for file in fileList:\n",
    "            \n",
    "            chain[sample].Add(file)\n",
    "            meta[sample].Add(file)\n",
    "\n",
    "        rdf[sample] = ROOT.ROOT.RDataFrame(chain[sample])\n",
    "        mureport[sample] = rdf[sample].Report()\n",
    "        mrdf[sample] = ROOT.ROOT.RDataFrame(meta[sample])\n",
    "        \n",
    "        if useRange:\n",
    "            rdf[sample] = rdf[sample].Range(5000)\n",
    "            \n",
    "            printcode = ' if(rdfentry_ % 5000 == 0) { std::cout << \"Processed entry \" << rdfentry_ << \" \" << rdfslot_ << std::endl; } return rdfentry_;'\n",
    "            print(\"MC run\")\n",
    "            rdf[sample] = rdf[sample].Define(\"my_rdfentry\", printcode)\n",
    "        \n",
    "        nevents[sample] = mrdf[sample].Sum(\"genEventCount\")\n",
    "        sumweight[sample] = mrdf[sample].Sum(\"genEventSumw\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "paperback-video",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Semileptonic ttbar xsection: 364.3109\n",
    "#Single mu trigger for 2017 (B,C,D,E,F): \"HLT_IsoMu27\"\n",
    "#\"HLT_Ele35_WPTight_Gsf\"\n",
    "#lumiDict = {\"2017\": 41.53, \"2018\": 59.97}\n",
    "wgtFormula = {}\n",
    "\n",
    "# wgtFormula used to weight each event\n",
    "# XS = Literature Cross section of the process of interest (in picobarnes; the 1000 converts to femotobarnes), lumi = presumed luminosity of the data one is normalizing against; XS * lumi = # of expected events;\n",
    "# genWeight = quantity stored in every event which comes from the Monte Carlo generator telling you what the value of the generated event is (usually close to 1); it can be + or -; it also contains matching\n",
    "#     effeciency; tells you the Monte Carlo defined value of the event\n",
    "# sW = sum of weights; normalizes the genWeight\n",
    "lumiDict = {\"2018\": 59.97} #  brilcalc lumi --normtag /cvmfs/cms-bril.cern.ch/cms-lumi-pog/Normtags/normtag_PHYSICS.json -u /fb --begin 302031 --end 302663 --hltpath \"HLT_IsoMu27*\"\n",
    "wgtFormula['Data'] = \"1\"\n",
    "wgtFormula['MonteCarloTTToSemiLeptonic'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=364.31, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloTTToSemiLeptonic'].GetValue()))\n",
    "wgtFormula['MonteCarloTTTo2L2Nu'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=87.33, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloTTTo2L2Nu'].GetValue()))\n",
    "wgtFormula['MonteCarloWJetsToLNu'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=61526.7, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloWJetsToLNu'].GetValue()))\n",
    "wgtFormula['MonteCarloST_tW_top'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=71.7, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloST_tW_top'].GetValue()))\n",
    "wgtFormula['MonteCarloST_tchannel_top'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=130, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloST_tchannel_top'].GetValue()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "better-deputy",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cpp_code = \"\"\"\n",
    "typedef ROOT::VecOps::RVec<Float_t>                        RVec_f;\n",
    "typedef ROOT::VecOps::RVec<Int_t>                          RVec_i;\n",
    "typedef ROOT::VecOps::RVec<Long_t>                         RVec_l;\n",
    "\n",
    "typedef ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double>>> RVec_FourVector;\n",
    "\n",
    "/*typedef ROOT::VecOps::RVec<ROOT::Math::PtEtaPhiMVector>    RVec_FourVector;*/\n",
    "\n",
    "class MuonAndJPsiStatisticsAndKinematics\n",
    "{\n",
    "    private:\n",
    "        RVec_f JPsi_Muon_pt;\n",
    "        RVec_f JPsi_Muon_eta;\n",
    "        RVec_f JPsi_Muon_phi;\n",
    "        RVec_f JPsi_Muon_mass;\n",
    "        RVec_i JPsi_Muon_charge;\n",
    "        RVec_f Isolated_Muon_pt;\n",
    "        RVec_f Isolated_Muon_eta;\n",
    "        RVec_f Isolated_Muon_phi;\n",
    "        RVec_f Isolated_Muon_mass;\n",
    "        RVec_i Isolated_Muon_charge;\n",
    "\n",
    "\n",
    "    public:\n",
    "        MuonAndJPsiStatisticsAndKinematics(RVec_f JPsi_Muon_pt, RVec_f JPsi_Muon_eta, RVec_f JPsi_Muon_phi, RVec_f JPsi_Muon_mass, RVec_i JPsi_Muon_charge);\n",
    "        MuonAndJPsiStatisticsAndKinematics(RVec_f JPsi_Muon_pt, RVec_f JPsi_Muon_eta, RVec_f JPsi_Muon_phi, RVec_f JPsi_Muon_mass, RVec_i JPsi_Muon_charge, RVec_f Isolated_Muon_pt, RVec_f Isolated_Muon_eta, RVec_f Isolated_Muon_phi, RVec_f Isolated_Muon_mass, RVec_i Isolated_Muon_charge);\n",
    "        RVec_FourVector JPsiFourVectorCalculator();\n",
    "        RVec_f ReturnJPsiPt();\n",
    "        RVec_f ReturnJPsiEta();\n",
    "        RVec_f ReturnJPsiPhi();\n",
    "        RVec_f JPsiMuonInvariantMassCalculator();\n",
    "        RVec_f IsolatedAndJPsiMuonInvariantMassCalculator();\n",
    "        RVec_f DeltaEtaBetweenIsolatedAndJPsiMuonCalculator();\n",
    "        RVec_f DeltaPhiBetweenIsolatedAndJPsiMuonCalculator();\n",
    "        RVec_f DeltaRBetweenIsolatedAndJPsiMuonCalculator();\n",
    "        RVec_f JPsiPtCalculator();\n",
    "        RVec_f JPsiEtaCalculator();\n",
    "        RVec_f JPsiPhiCalculator();\n",
    "        RVec_f JPsiMassCalculator();\n",
    "        RVec_f JPsiChargeCalculator();\n",
    "        RVec_f DeltaEtaBetweenJPsiMuonsCalculator();\n",
    "        RVec_f DeltaPhiBetweenJPsiMuonsCalculator();\n",
    "        RVec_f DeltaRBetweenJPsiMuonsCalculator();\n",
    "        RVec_f DeltaEtaBetweenIsolatedMuonAndJPsiCalculator();\n",
    "        RVec_f DeltaPhiBetweenIsolatedMuonAndJPsiCalculator();\n",
    "        RVec_f DeltaRBetweenIsolatedMuonAndJPsiCalculator();\n",
    "};\n",
    "\n",
    "MuonAndJPsiStatisticsAndKinematics::MuonAndJPsiStatisticsAndKinematics(RVec_f JPsi_Muon_pt, RVec_f JPsi_Muon_eta, RVec_f JPsi_Muon_phi, RVec_f JPsi_Muon_mass, RVec_i JPsi_Muon_charge)\n",
    "{\n",
    "    this->JPsi_Muon_pt = JPsi_Muon_pt;\n",
    "    this->JPsi_Muon_eta = JPsi_Muon_eta;\n",
    "    this->JPsi_Muon_phi = JPsi_Muon_phi;\n",
    "    this->JPsi_Muon_mass = JPsi_Muon_mass;\n",
    "    this->JPsi_Muon_charge = JPsi_Muon_charge;\n",
    "    this->Isolated_Muon_pt = {};\n",
    "    this->Isolated_Muon_eta = {};\n",
    "    this->Isolated_Muon_phi = {};\n",
    "    this->Isolated_Muon_mass = {};\n",
    "    this->Isolated_Muon_charge = {};\n",
    "}\n",
    "\n",
    "MuonAndJPsiStatisticsAndKinematics::MuonAndJPsiStatisticsAndKinematics(RVec_f JPsi_Muon_pt, RVec_f JPsi_Muon_eta, RVec_f JPsi_Muon_phi, RVec_f JPsi_Muon_mass, RVec_i JPsi_Muon_charge, RVec_f Isolated_Muon_pt, RVec_f Isolated_Muon_eta, RVec_f Isolated_Muon_phi, RVec_f Isolated_Muon_mass, RVec_i Isolated_Muon_charge)\n",
    "{\n",
    "    this->JPsi_Muon_pt = JPsi_Muon_pt;\n",
    "    this->JPsi_Muon_eta = JPsi_Muon_eta;\n",
    "    this->JPsi_Muon_phi = JPsi_Muon_phi;\n",
    "    this->JPsi_Muon_mass = JPsi_Muon_mass;\n",
    "    this->JPsi_Muon_charge = JPsi_Muon_charge;\n",
    "    this->Isolated_Muon_pt = Isolated_Muon_pt;\n",
    "    this->Isolated_Muon_eta = Isolated_Muon_eta;\n",
    "    this->Isolated_Muon_phi = Isolated_Muon_phi;\n",
    "    this->Isolated_Muon_mass = Isolated_Muon_mass;\n",
    "    this->Isolated_Muon_charge = Isolated_Muon_charge;\n",
    "}\n",
    "\n",
    "RVec_FourVector MuonAndJPsiStatisticsAndKinematics::JPsiFourVectorCalculator()\n",
    "{\n",
    "\n",
    "    RVec_FourVector fvt = {};\n",
    "    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "    for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "    {    \n",
    "\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        /* If charges are opposite, calculate the invariant mass of them */\n",
    "        for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {\n",
    "                auto FourVector1 = ROOT::Math::PtEtaPhiMVector (this->JPsi_Muon_pt[i], this->JPsi_Muon_eta[i], this->JPsi_Muon_phi[i], this->JPsi_Muon_mass[i]);\n",
    "                \n",
    "                auto FourVector2 = ROOT::Math::PtEtaPhiMVector (this->JPsi_Muon_pt[j], this->JPsi_Muon_eta[j], this->JPsi_Muon_phi[j], this->JPsi_Muon_mass[j]);\n",
    "                \n",
    "                fvt.push_back(FourVector1 + FourVector2);\n",
    "                    \n",
    "                FourVector1 = {};\n",
    "                FourVector2 = {};\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "    \n",
    "    return fvt;   \n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnJPsiPt()\n",
    "{\n",
    "    RVec_f JPsiPt = {};\n",
    "    \n",
    "    RVec_FourVector FourVectorTotal = JPsiFourVectorCalculator();\n",
    "    \n",
    "    for(int i = 0; i < FourVectorTotal.size(); i++)\n",
    "    {\n",
    "        JPsiPt.push_back(FourVectorTotal.at(i).Pt());\n",
    "    }\n",
    "    \n",
    "    return JPsiPt;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnJPsiEta()\n",
    "{\n",
    "    RVec_f JPsiEta = {};\n",
    "    \n",
    "    RVec_FourVector FourVectorTotal = JPsiFourVectorCalculator();\n",
    "    \n",
    "    for(int i = 0; i < FourVectorTotal.size(); i++)\n",
    "    {\n",
    "        JPsiEta.push_back(FourVectorTotal.at(i).Eta());\n",
    "    }\n",
    "    \n",
    "    return JPsiEta;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnJPsiPhi()\n",
    "{\n",
    "    RVec_f JPsiPhi = {};\n",
    "    \n",
    "    RVec_FourVector FourVectorTotal = JPsiFourVectorCalculator();\n",
    "    \n",
    "    for(int i = 0; i < FourVectorTotal.size(); i++)\n",
    "    {\n",
    "        JPsiPhi.push_back(FourVectorTotal.at(i).Phi());\n",
    "    }\n",
    "    \n",
    "    return JPsiPhi;\n",
    "}\n",
    "\n",
    "/* This function matches each muon with oppositely charged muons. */\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::JPsiMuonInvariantMassCalculator()\n",
    "{ \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f InvariantMasses {};\n",
    "    \n",
    "    float im = 0;\n",
    " \n",
    "    /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "    for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "    {    \n",
    "\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        /* If charges are opposite, calculate the invariant mass of them */\n",
    "        for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {\n",
    "                pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "                phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "                mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "                    \n",
    "                pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "                phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "                mass.push_back(this->JPsi_Muon_mass[j]);\n",
    "                    \n",
    "                im = ROOT::VecOps::InvariantMass(pt, eta, phi, mass);\n",
    "                \n",
    "                InvariantMasses.push_back(im);\n",
    "                    \n",
    "                pt.clear();\n",
    "                eta.clear();\n",
    "                phi.clear();\n",
    "                mass.clear();\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return InvariantMasses;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::IsolatedAndJPsiMuonInvariantMassCalculator()\n",
    "{ \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f InvariantMasses {};\n",
    "    \n",
    "    float im = 0;\n",
    " \n",
    "    for(int k = 0; k < this->Isolated_Muon_pt.size(); k++)\n",
    "    {\n",
    "    \n",
    "        /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "        for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "        {    \n",
    "\n",
    "            FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "\n",
    "            /* If charges are opposite, calculate the invariant mass of them */\n",
    "            for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "            {\n",
    "                SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "\n",
    "                if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "                {\n",
    "                    pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                    eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "                    phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "                    mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "\n",
    "                    pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                    eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "                    phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "                    mass.push_back(this->JPsi_Muon_mass[j]);\n",
    "                    \n",
    "                    pt.push_back(this->Isolated_Muon_pt[k]);\n",
    "                    eta.push_back(this->Isolated_Muon_eta[k]);\n",
    "                    phi.push_back(this->Isolated_Muon_phi[k]);\n",
    "                    mass.push_back(this->Isolated_Muon_mass[k]);\n",
    "\n",
    "                    im = ROOT::VecOps::InvariantMass(pt, eta, phi, mass);\n",
    "\n",
    "                    InvariantMasses.push_back(im);\n",
    "\n",
    "                    pt.clear();\n",
    "                    eta.clear();\n",
    "                    phi.clear();\n",
    "                    mass.clear();\n",
    "                }\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return InvariantMasses;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaEtaBetweenIsolatedAndJPsiMuonCalculator()\n",
    "{ \n",
    "    float DeltaEtaIndividual = 0;\n",
    "    \n",
    "    RVec_f DeltaEtaRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->Isolated_Muon_eta.size(); i++)\n",
    "    {\n",
    "    \n",
    "        for(int j = 0; j < this->JPsi_Muon_eta.size(); j++)\n",
    "        {    \n",
    "                    DeltaEtaIndividual = this->Isolated_Muon_eta[i] - this->JPsi_Muon_eta[j];\n",
    "\n",
    "                    DeltaEtaRVec.push_back(DeltaEtaIndividual);\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaEtaRVec;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaPhiBetweenIsolatedAndJPsiMuonCalculator()\n",
    "{ \n",
    "    RVec_f PhiAll {};\n",
    "    RVec_f PhiJPsi {};\n",
    "    \n",
    "    RVec_f DeltaPhiIndividual {};\n",
    "    \n",
    "    RVec_f DeltaPhiRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->Isolated_Muon_phi.size(); i++)\n",
    "    {\n",
    "    \n",
    "        for(int j = 0; j < this->JPsi_Muon_phi.size(); j++)\n",
    "        {    \n",
    "\n",
    "                    PhiAll.push_back(this->Isolated_Muon_phi[i]);\n",
    "\n",
    "                    PhiJPsi.push_back(this->JPsi_Muon_phi[j]);\n",
    "\n",
    "                    DeltaPhiIndividual = ROOT::VecOps::DeltaPhi(PhiAll, PhiJPsi);\n",
    "\n",
    "                    for(int k = 0; k < DeltaPhiIndividual.size(); k++)\n",
    "                    {\n",
    "                        DeltaPhiRVec.push_back(DeltaPhiIndividual[k]);\n",
    "                    }\n",
    "\n",
    "                    PhiAll.clear();\n",
    "                    PhiJPsi.clear();\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaPhiRVec;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaRBetweenIsolatedAndJPsiMuonCalculator()\n",
    "{ \n",
    "    RVec_f EtaAll {};\n",
    "    RVec_f PhiAll {};\n",
    "    RVec_f EtaJPsi {};\n",
    "    RVec_f PhiJPsi {};\n",
    "    \n",
    "    RVec_f DeltaRIndividual {};\n",
    "    \n",
    "    RVec_f DeltaRRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->Isolated_Muon_phi.size(); i++)\n",
    "    {\n",
    "    \n",
    "        for(int j = 0; j < this->JPsi_Muon_phi.size(); j++)\n",
    "        {    \n",
    "                    EtaAll.push_back(this->Isolated_Muon_eta[i]);\n",
    "                    PhiAll.push_back(this->Isolated_Muon_phi[i]);\n",
    "                    \n",
    "                    EtaJPsi.push_back(this->JPsi_Muon_eta[j]);\n",
    "                    PhiJPsi.push_back(this->JPsi_Muon_phi[j]);\n",
    "\n",
    "                    DeltaRIndividual = ROOT::VecOps::DeltaR(EtaAll, EtaJPsi, PhiAll, PhiJPsi);\n",
    "\n",
    "                    for(int k = 0; k < DeltaRIndividual.size(); k++)\n",
    "                    {\n",
    "                        DeltaRRVec.push_back(DeltaRIndividual[k]);\n",
    "                    }\n",
    "\n",
    "                    EtaAll.clear();\n",
    "                    PhiAll.clear();\n",
    "                    EtaJPsi.clear();\n",
    "                    PhiJPsi.clear();\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaRRVec;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::JPsiPtCalculator()\n",
    "{\n",
    "    float pt1 = 0;\n",
    "    float pt2 = 0;\n",
    "    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f JPsiPt {};\n",
    " \n",
    "    /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "    for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "    {    \n",
    "\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        /* If charges are opposite, calculate the invariant mass of them */\n",
    "        for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {\n",
    "                pt1 = this->JPsi_Muon_pt[i];\n",
    "                    \n",
    "                pt2 = this->JPsi_Muon_pt[j];\n",
    "                \n",
    "                JPsiPt.push_back(pt1 + pt2);\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return JPsiPt;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::JPsiEtaCalculator()\n",
    "{\n",
    "    float eta1 = 0;\n",
    "    float eta2 = 0;\n",
    "    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f JPsiEta {};\n",
    " \n",
    "    /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "    for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "    {    \n",
    "\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        /* If charges are opposite, calculate the invariant mass of them */\n",
    "        for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {\n",
    "                eta1 = this->JPsi_Muon_eta[i];\n",
    "                    \n",
    "                eta2 = this->JPsi_Muon_eta[j];\n",
    "                \n",
    "                JPsiEta.push_back(eta1 + eta2);\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return JPsiEta;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::JPsiPhiCalculator()\n",
    "{\n",
    "    float phi1 = 0;\n",
    "    float phi2 = 0;\n",
    "    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f JPsiPhi {};\n",
    " \n",
    "    /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "    for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "    {    \n",
    "\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        /* If charges are opposite, calculate the invariant mass of them */\n",
    "        for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {\n",
    "                phi1 = this->JPsi_Muon_phi[i];\n",
    "                    \n",
    "                phi2 = this->JPsi_Muon_phi[j];\n",
    "                \n",
    "                JPsiPhi.push_back(phi1 + phi2);\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return JPsiPhi;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::JPsiMassCalculator()\n",
    "{\n",
    "    float mass1 = 0;\n",
    "    float mass2 = 0;\n",
    "    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f JPsiMass {};\n",
    " \n",
    "    /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "    for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "    {    \n",
    "\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        /* If charges are opposite, calculate the invariant mass of them */\n",
    "        for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {\n",
    "                mass1 = this->JPsi_Muon_mass[i];\n",
    "                    \n",
    "                mass2 = this->JPsi_Muon_mass[j];\n",
    "                \n",
    "                JPsiMass.push_back(mass1 + mass2);\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return JPsiMass;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::JPsiChargeCalculator()\n",
    "{    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f JPsiCharge {};\n",
    " \n",
    "    /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "    for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "    {    \n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        /* If charges are opposite, calculate the invariant mass of them */\n",
    "        for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {                \n",
    "                JPsiCharge.push_back(FirstMuonCharge + SecondMuonCharge);\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return JPsiCharge;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaEtaBetweenJPsiMuonsCalculator()\n",
    "{\n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    float DeltaEtaIndividual = 0;\n",
    "    \n",
    "    RVec_f DeltaEtaRVec {};\n",
    "    \n",
    "    /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "    for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "    {    \n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        /* If charges are opposite, calculate the invariant mass of them */\n",
    "        for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {                \n",
    "                DeltaEtaIndividual = this->JPsi_Muon_eta[i] - this->JPsi_Muon_eta[j];\n",
    "\n",
    "                DeltaEtaRVec.push_back(DeltaEtaIndividual);\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaEtaRVec;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaPhiBetweenJPsiMuonsCalculator()\n",
    "{ \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f PhiJPsi1 {};\n",
    "    RVec_f PhiJPsi2 {};\n",
    "    \n",
    "    RVec_f DeltaPhiIndividual {};\n",
    "    \n",
    "    RVec_f DeltaPhiRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->JPsi_Muon_phi.size(); i++)\n",
    "    {\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        for(int j = i+1; j < this->JPsi_Muon_phi.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {                \n",
    "                PhiJPsi1.push_back(this->JPsi_Muon_phi[i]);\n",
    "\n",
    "                PhiJPsi2.push_back(this->JPsi_Muon_phi[j]);\n",
    "\n",
    "                DeltaPhiIndividual = ROOT::VecOps::DeltaPhi(PhiJPsi1, PhiJPsi2);\n",
    "\n",
    "                for(int k = 0; k < DeltaPhiIndividual.size(); k++)\n",
    "                {\n",
    "                    DeltaPhiRVec.push_back(DeltaPhiIndividual[k]);\n",
    "                }\n",
    "                \n",
    "                PhiJPsi1.clear();\n",
    "                PhiJPsi2.clear();\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaPhiRVec;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaRBetweenJPsiMuonsCalculator()\n",
    "{ \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f EtaJPsi1 {};\n",
    "    RVec_f PhiJPsi1 {};\n",
    "    RVec_f EtaJPsi2 {};\n",
    "    RVec_f PhiJPsi2 {};\n",
    "    \n",
    "    RVec_f DeltaRIndividual {};\n",
    "    \n",
    "    RVec_f DeltaRRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->JPsi_Muon_phi.size(); i++)\n",
    "    {\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "\n",
    "            for(int j = i+1; j < this->JPsi_Muon_phi.size(); j++)\n",
    "            {\n",
    "                SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "\n",
    "                if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "                {                \n",
    "                    EtaJPsi1.push_back(this->JPsi_Muon_eta[i]);\n",
    "                    PhiJPsi1.push_back(this->JPsi_Muon_phi[i]);\n",
    "                    \n",
    "                    EtaJPsi2.push_back(this->JPsi_Muon_eta[j]);\n",
    "                    PhiJPsi2.push_back(this->JPsi_Muon_phi[j]);\n",
    "\n",
    "                    DeltaRIndividual = ROOT::VecOps::DeltaR(EtaJPsi1, EtaJPsi2, PhiJPsi1, PhiJPsi2);\n",
    "\n",
    "                    for(int k = 0; k < DeltaRIndividual.size(); k++)\n",
    "                    {\n",
    "                        DeltaRRVec.push_back(DeltaRIndividual[k]);\n",
    "                    }\n",
    "\n",
    "                    EtaJPsi1.clear();\n",
    "                    PhiJPsi1.clear();\n",
    "                    EtaJPsi2.clear();\n",
    "                    PhiJPsi2.clear();\n",
    "                }\n",
    "            }\n",
    "        }\n",
    "        \n",
    "    return DeltaRRVec;\n",
    "}\n",
    "\n",
    "\"\"\"\n",
    "ROOT.gInterpreter.Declare(cpp_code)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ce5dd994",
   "metadata": {},
   "outputs": [],
   "source": [
    "def IsolatedLeptonSelection():\n",
    "\n",
    "    for sample in dictOfListOfFiles:       \n",
    "\n",
    "        rdfPassedIsolatedLeptonTrigger[sample] = rdf[sample].Filter(\"HLT_IsoMu24 == true ^ HLT_Ele32_WPTight_Gsf == true\", \"HLTLeptonTrigger\")\\\n",
    "            .Define(\"LumiXS\",wgtFormula[sample])\\\n",
    "            .Define(\"leading_isolated_muon_mask\", LeadingIsolatedMuonMask)\\\n",
    "            .Define(\"leading_isolated_electron_mask\", LeadingIsolatedElectronMask)\n",
    "\n",
    "        if sample == 'Data':\n",
    "            rdfIsolatedMuonNoHighWeights[sample] = rdfPassedIsolatedLeptonTrigger[sample].Filter(\"Sum(leading_isolated_muon_mask) == 1 && Sum(leading_isolated_electron_mask) == 0\", \"Exactly one isolated muon and exactly zero isolated electrons\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_pt\", \"Muon_pt[leading_isolated_muon_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_eta\", \"Muon_eta[leading_isolated_muon_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_phi\", \"Muon_phi[leading_isolated_muon_mask].at(0, -5)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_mass\", \"Muon_mass[leading_isolated_muon_mask].at(0, -2.71)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_charge\", \"Muon_charge[leading_isolated_muon_mask].at(0, -5)\")\\\n",
    "                .Define(\"IsolatedMuon_pt\", \"Muon_pt[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_eta\", \"Muon_eta[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_phi\", \"Muon_phi[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_mass\", \"Muon_mass[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_charge\", \"Muon_charge[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_pdgId\", \"Muon_pdgId[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pt\", \"Electron_pt[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_eta\", \"Electron_eta[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_phi\", \"Electron_phi[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_mass\", \"Electron_mass[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_charge\", \"Electron_charge[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pdgId\", \"Electron_pdgId[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedLepton_pt\", \"Concatenate(IsolatedMuon_pt, IsolatedElectron_pt)\")\\\n",
    "                .Define(\"IsolatedLepton_eta\", \"Concatenate(IsolatedMuon_eta, IsolatedElectron_eta)\")\\\n",
    "                .Define(\"IsolatedLepton_phi\", \"Concatenate(IsolatedMuon_phi, IsolatedElectron_phi)\")\\\n",
    "                .Define(\"IsolatedLepton_mass\", \"Concatenate(IsolatedMuon_mass, IsolatedElectron_mass)\")\\\n",
    "                .Define(\"IsolatedLepton_charge\", \"Concatenate(IsolatedMuon_charge, IsolatedElectron_charge)\")\\\n",
    "                .Define(\"IsolatedLepton_pdgid\", \"Concatenate(IsolatedMuon_pdgId, IsolatedElectron_pdgId)\")\\\n",
    "                .Define(\"METBeforeMETCut\", \"MET_pt\")\n",
    "            \n",
    "            rdfIsolatedElectronNoHighWeights[sample] = rdfPassedIsolatedLeptonTrigger[sample].Filter(\"Sum(leading_isolated_electron_mask) == 1 && Sum(leading_isolated_muon_mask) == 0\", \"Exactly one isolated electron and exactly zero isolated muon\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_pt\", \"Electron_pt[leading_isolated_electron_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_eta\", \"Electron_eta[leading_isolated_electron_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_phi\", \"Electron_phi[leading_isolated_electron_mask].at(0, -5)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_mass\", \"Electron_mass[leading_isolated_electron_mask].at(0, -2.71)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_charge\", \"Electron_charge[leading_isolated_electron_mask].at(0, -5)\")\\\n",
    "                .Define(\"IsolatedMuon_pt\", \"Muon_pt[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_eta\", \"Muon_eta[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_phi\", \"Muon_phi[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_mass\", \"Muon_mass[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_charge\", \"Muon_charge[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_pdgId\", \"Muon_pdgId[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pt\", \"Electron_pt[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_eta\", \"Electron_eta[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_phi\", \"Electron_phi[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_mass\", \"Electron_mass[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_charge\", \"Electron_charge[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pdgId\", \"Electron_pdgId[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedLepton_pt\", \"Concatenate(IsolatedMuon_pt, IsolatedElectron_pt)\")\\\n",
    "                .Define(\"IsolatedLepton_eta\", \"Concatenate(IsolatedMuon_eta, IsolatedElectron_eta)\")\\\n",
    "                .Define(\"IsolatedLepton_phi\", \"Concatenate(IsolatedMuon_phi, IsolatedElectron_phi)\")\\\n",
    "                .Define(\"IsolatedLepton_mass\", \"Concatenate(IsolatedMuon_mass, IsolatedElectron_mass)\")\\\n",
    "                .Define(\"IsolatedLepton_charge\", \"Concatenate(IsolatedMuon_charge, IsolatedElectron_charge)\")\\\n",
    "                .Define(\"IsolatedLepton_pdgid\", \"Concatenate(IsolatedMuon_pdgId, IsolatedElectron_pdgId)\")\\\n",
    "                .Define(\"METBeforeMETCut\", \"MET_pt\")\n",
    "\n",
    "\n",
    "        # Change criteria to nothing below or above 4 standard deviations from the mean\n",
    "        else:\n",
    "            rdfIsolatedMuonNoHighWeights[sample] = rdfPassedIsolatedLeptonTrigger[sample].Filter(\"genWeight < 1000 && Sum(leading_isolated_muon_mask) == 1 && Sum(leading_isolated_electron_mask) == 0\", \"Exactly one isolated muon and exactly zero isolated electrons\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_pt\", \"Muon_pt[leading_isolated_muon_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_eta\", \"Muon_eta[leading_isolated_muon_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_phi\", \"Muon_phi[leading_isolated_muon_mask].at(0, -5)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_mass\", \"Muon_mass[leading_isolated_muon_mask].at(0, -2.71)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_charge\", \"Muon_charge[leading_isolated_muon_mask].at(0, -5)\")\\\n",
    "                .Define(\"IsolatedMuon_pt\", \"Muon_pt[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_eta\", \"Muon_eta[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_phi\", \"Muon_phi[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_mass\", \"Muon_mass[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_charge\", \"Muon_charge[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_pdgId\", \"Muon_pdgId[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pt\", \"Electron_pt[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_eta\", \"Electron_eta[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_phi\", \"Electron_phi[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_mass\", \"Electron_mass[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_charge\", \"Electron_charge[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pdgId\", \"Electron_pdgId[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedLepton_pt\", \"Concatenate(IsolatedMuon_pt, IsolatedElectron_pt)\")\\\n",
    "                .Define(\"IsolatedLepton_eta\", \"Concatenate(IsolatedMuon_eta, IsolatedElectron_eta)\")\\\n",
    "                .Define(\"IsolatedLepton_phi\", \"Concatenate(IsolatedMuon_phi, IsolatedElectron_phi)\")\\\n",
    "                .Define(\"IsolatedLepton_mass\", \"Concatenate(IsolatedMuon_mass, IsolatedElectron_mass)\")\\\n",
    "                .Define(\"IsolatedLepton_charge\", \"Concatenate(IsolatedMuon_charge, IsolatedElectron_charge)\")\\\n",
    "                .Define(\"IsolatedLepton_pdgid\", \"Concatenate(IsolatedMuon_pdgId, IsolatedElectron_pdgId)\")\\\n",
    "                .Define(\"METBeforeMETCut\", \"MET_pt\")\n",
    "\n",
    "            rdfIsolatedElectronNoHighWeights[sample] = rdfPassedIsolatedLeptonTrigger[sample].Filter(\"genWeight < 1000 && Sum(leading_isolated_electron_mask) == 1 && Sum(leading_isolated_muon_mask) == 0\", \"Exactly one isolated electron and exactly zero isolated muon\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_pt\", \"Electron_pt[leading_isolated_electron_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_eta\", \"Electron_eta[leading_isolated_electron_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_phi\", \"Electron_phi[leading_isolated_electron_mask].at(0, -5)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_mass\", \"Electron_mass[leading_isolated_electron_mask].at(0, -2.71)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_charge\", \"Electron_charge[leading_isolated_electron_mask].at(0, -5)\")\\\n",
    "                .Define(\"IsolatedMuon_pt\", \"Muon_pt[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_eta\", \"Muon_eta[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_phi\", \"Muon_phi[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_mass\", \"Muon_mass[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_charge\", \"Muon_charge[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_pdgId\", \"Muon_pdgId[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pt\", \"Electron_pt[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_eta\", \"Electron_eta[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_phi\", \"Electron_phi[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_mass\", \"Electron_mass[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_charge\", \"Electron_charge[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pdgId\", \"Electron_pdgId[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedLepton_pt\", \"Concatenate(IsolatedMuon_pt, IsolatedElectron_pt)\")\\\n",
    "                .Define(\"IsolatedLepton_eta\", \"Concatenate(IsolatedMuon_eta, IsolatedElectron_eta)\")\\\n",
    "                .Define(\"IsolatedLepton_phi\", \"Concatenate(IsolatedMuon_phi, IsolatedElectron_phi)\")\\\n",
    "                .Define(\"IsolatedLepton_mass\", \"Concatenate(IsolatedMuon_mass, IsolatedElectron_mass)\")\\\n",
    "                .Define(\"IsolatedLepton_charge\", \"Concatenate(IsolatedMuon_charge, IsolatedElectron_charge)\")\\\n",
    "                .Define(\"IsolatedLepton_pdgid\", \"Concatenate(IsolatedMuon_pdgId, IsolatedElectron_pdgId)\")\\\n",
    "                .Define(\"METBeforeMETCut\", \"MET_pt\")\n",
    "\n",
    "        rdfIsolatedMuonAfterMETCut[sample] = rdfIsolatedMuonNoHighWeights[sample].Filter(\"MET_pt > 30\", \"Muon MET Greater than 30 GeV\")\\\n",
    "            .Define(\"METAfterMETCut\", \"MET_pt\")\\\n",
    "            .Define(\"jet_mask\", \"ROOT::VecOps::RVec<Int_t> jmask = (Jet_pt >= 30 && abs(Jet_eta) <= 2.5 && Jet_jetId >= 2); \"\\\n",
    "                        \"for(int i=0; i < IsolatedLepton_pt.size(); ++i){\"\\\n",
    "                            \"ROOT::VecOps::RVec<Float_t> dr;\"\\\n",
    "                            \"for(int j=0; j < jmask.size(); ++j){\"\\\n",
    "                                \"dr.push_back(ROOT::VecOps::DeltaR(Jet_eta.at(j), IsolatedLepton_eta.at(i), Jet_phi.at(j), IsolatedLepton_phi.at(i)));}\"\\\n",
    "                                \"jmask = jmask && dr >= 0.4;\"\\\n",
    "                                \"dr.clear();}\"\\\n",
    "                        \"return jmask;\")\\\n",
    "            .Define(\"jpsi_mu_candidate_mask\", JPsiCandidateMask)\\\n",
    "            .Define(\"Num_Jets\", \"Jet_pt[jet_mask].size()\")\\\n",
    "            .Define(\"Num_JPsi_Muons\", \"Muon_pt[jpsi_mu_candidate_mask].size()\")\n",
    "            \n",
    "        \n",
    "        rdfIsolatedElectronAfterMETCut[sample] = rdfIsolatedElectronNoHighWeights[sample].Filter(\"MET_pt > 30\", \"Electron MET Greater than 30 GeV\")\\\n",
    "            .Define(\"METAfterMETCut\", \"MET_pt\")\n",
    "        \n",
    "    return rdfIsolatedMuonAfterMETCut, rdfIsolatedElectronAfterMETCut"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "54881930",
   "metadata": {},
   "outputs": [],
   "source": [
    "rdfIsolatedMuonAfterMETCut, rdfIsolatedElectronAfterMETCut = IsolatedLeptonSelection()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0ea54eba",
   "metadata": {},
   "outputs": [],
   "source": [
    "def JetSelection():\n",
    "\n",
    "    for sample in dictOfListOfFiles:\n",
    "        \n",
    "        rdfJetAndIsolatedLeptonFiltered[sample] = rdfIsolatedMuonAfterMETCut[sample].Filter(\"Num_Jets >= 2\", \"At Least Two Jets\")\\\n",
    "            .Define(\"SJet1_pt\", \"Jet_pt[jet_mask].size() > 0 ? Jet_pt[jet_mask].at(0) : -500\")\\\n",
    "            .Define(\"SJet2_pt\", \"Jet_pt[jet_mask].size() > 1 ? Jet_pt[jet_mask].at(1) : -500\")\\\n",
    "            .Define(\"SJet1_eta\", \"Jet_eta[jet_mask].size() > 0 ? Jet_eta[jet_mask].at(0) : 500\")\\\n",
    "            .Define(\"SJet2_eta\", \"Jet_eta[jet_mask].size() > 1 ? Jet_eta[jet_mask].at(1) : 500\")\\\n",
    "            .Define(\"SJet1_phi\", \"Jet_phi[jet_mask].size() > 0 ? Jet_phi[jet_mask].at(0) : 500\")\\\n",
    "            .Define(\"SJet2_phi\", \"Jet_phi[jet_mask].size() > 1 ? Jet_phi[jet_mask].at(1) : 500\")\\\n",
    "            .Define(\"MTofMETandMu\", \"FTA::transverseMassMET(IsolatedMuon_pt, IsolatedMuon_phi, IsolatedMuon_mass, MET_pt, MET_phi)\")\\\n",
    "            .Define(\"Ht\", \"Sum(Jet_pt[jet_mask])\")\n",
    "        \n",
    "    return rdfJetAndIsolatedLeptonFiltered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4c8da657",
   "metadata": {},
   "outputs": [],
   "source": [
    "rdfJetAndIsolatedLeptonFiltered = JetSelection()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30a9ba45",
   "metadata": {},
   "outputs": [],
   "source": [
    "def JPsiSelection():\n",
    "\n",
    "    for sample in dictOfListOfFiles:\n",
    "\n",
    "        rdfJPsiMuons[sample] = rdfJetAndIsolatedLeptonFiltered[sample].Filter(\"Sum(jpsi_mu_candidate_mask) >= 2\", \"At Least Two JPsi Candidates\")\\\n",
    "            .Define(\"JPsiCandidate_pt\", \"Muon_pt[jpsi_mu_candidate_mask]\")\\\n",
    "            .Define(\"JPsiCandidate_eta\", \"Muon_eta[jpsi_mu_candidate_mask]\")\\\n",
    "            .Define(\"JPsiCandidate_phi\", \"Muon_phi[jpsi_mu_candidate_mask]\")\\\n",
    "            .Define(\"JPsiCandidate_mass\", \"Muon_mass[jpsi_mu_candidate_mask]\")\\\n",
    "            .Define(\"JPsiCandidate_charge\", \"Muon_charge[jpsi_mu_candidate_mask]\")\\\n",
    "            .Define(\"InvariantMassJPsiMuons\", \"std::cout << rdfentry_ << std::endl; auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.JPsiMuonInvariantMassCalculator();\")\\\n",
    "            .Define(\"InvariantMassJPsiAndIsolatedMuons\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.IsolatedAndJPsiMuonInvariantMassCalculator();\")\\\n",
    "            .Define(\"DeltaEtaBetweenIsolatedAndJPsiMuon\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaEtaBetweenIsolatedAndJPsiMuonCalculator();\")\\\n",
    "            .Define(\"DeltaPhiBetweenIsolatedAndJPsiMuon\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaPhiBetweenIsolatedAndJPsiMuonCalculator();\")\\\n",
    "            .Define(\"DeltaRBetweenIsolatedAndJPsiMuon\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaRBetweenIsolatedAndJPsiMuonCalculator();\")\\\n",
    "            .Define(\"JPsi_pt\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.ReturnJPsiPt();\")\\\n",
    "            .Define(\"JPsi_eta\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.JPsiEtaCalculator();\")\\\n",
    "            .Define(\"JPsi_phi\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.JPsiPhiCalculator();\")\\\n",
    "#            .Define(\"JPsi_mass\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.JPsiMassCalculator();\")\\\n",
    "#            .Define(\"JPsi_charge\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.JPsiChargeCalculator();\")\n",
    "#             .Define(\"DeltaEtaBetweenJPsiMuons\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.DeltaEtaBetweenJPsiMuonsCalculator();\")\\\n",
    "#             .Define(\"DeltaPhiBetweenJPsiMuons\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.DeltaPhiBetweenJPsiMuonsCalculator();\")\\\n",
    "#             .Define(\"DeltaRBetweenJPsiMuons\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.DeltaRBetweenJPsiMuonsCalculator();\")\n",
    "\n",
    "        \n",
    "    return rdfJPsiMuons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7617b28",
   "metadata": {},
   "outputs": [],
   "source": [
    "# def JPsiSelection():\n",
    "\n",
    "#     for sample in dictOfListOfFiles:\n",
    "\n",
    "#         rdfJPsiMuons[sample] = rdfJetAndIsolatedLeptonFiltered[sample].Filter(\"Sum(jpsi_mu_candidate_mask) >= 2\", \"JPsi Candidate\")\\\n",
    "#             .Define(\"Muon_FourMomentum\", \"auto fourVecs = ROOT::VecOps::Construct<ROOT::Math::PtEtaPhiMVector>(Muon_pt, Muon_eta, Muon_phi, Muon_mass); return fourVecs;\")\\\n",
    "#             .Define(\"JPsiCandidate_packedIndices\", \"ROOT::VecOps::Combinations(Muon_pt[jpsi_mu_candidate_mask], 2)\")\\\n",
    "#             .Define(\"JPsiCandidate_idx0\", \"JPsiCandidate_packedIndices[0]\")\\\n",
    "#             .Define(\"JPsiCandidate_idx1\",  \"JPsiCandidate_packedIndices[1]\")\\\n",
    "#             .Define(\"JPsiCandidate_four_momentum\", \"ROOT::VecOps::Take(Muon_FourMomentum[jpsi_mu_candidate_mask], JPsiCandidate_idx0) + ROOT::VecOps::Take(Muon_FourMomentum[jpsi_mu_candidate_mask], JPsiCandidate_idx1)\")\\\n",
    "#             .Define(\"JPsiCandidate_pt\", \"ROOT::VecOps::RVec<double> temp; for (auto p: JPsiCandidate_four_momentum) {temp.push_back(p.Pt());} return temp;\")\\\n",
    "#             .Define(\"JPsiCandidate_eta\", \"ROOT::VecOps::RVec<double> temp; for (auto p: JPsiCandidate_four_momentum) {temp.push_back(p.Eta());} return temp;\")\\\n",
    "#             .Define(\"JPsiCandidate_phi\", \"ROOT::VecOps::RVec<double> temp; for (auto p: JPsiCandidate_four_momentum) {temp.push_back(p.Phi());} return temp;\")\\\n",
    "#             .Define(\"JPsiCandidate_mass\", \"ROOT::VecOps::RVec<double> temp; for (auto p: JPsiCandidate_four_momentum) {temp.push_back(p.M());} return temp;\")\\\n",
    "#             .Define(\"JPsiCandidate_charge\", \"ROOT::VecOps::Take(Muon_charge[jpsi_mu_candidate_mask], JPsiCandidate_idx0) + ROOT::VecOps::Take(Muon_charge[jpsi_mu_candidate_mask], JPsiCandidate_idx1)\")\\\n",
    "#             .Define(\"InvariantMassJPsiMuons\", \"std::cout << rdfentry_ << std::endl; auto c = MuonStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.JPsiMuonInvariantMassCalculator()\")\\\n",
    "#             .Define(\"DeltaEta\", \"auto c = MuonStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaEtaCalculator()\")\\\n",
    "#             .Define(\"DeltaPhi\", \"auto c = MuonStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaPhiCalculator()\")\\\n",
    "#             .Define(\"DeltaR\", \"auto c = MuonStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaRCalculator()\")\n",
    "\n",
    "#     return rdfJPsiMuons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13bc128a",
   "metadata": {},
   "outputs": [],
   "source": [
    "rdfJPsiMuons = JPsiSelection()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "352c067b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make this block a function with the inputs as the nodes we want to attach histograms to (2-17-22)\n",
    "# rdfWithFourMomentum needs to be changed to whatever our final RDataFrame is (5-23-22)\n",
    "\n",
    "for sample in dictOfListOfFiles:\n",
    "    \n",
    "    if sample not in hist.keys():\n",
    "        hist[sample] = {}\n",
    "        report[sample] = rdf[sample].Report()\n",
    "        #nparraynode[sample] = rdfLeadingMuon[sample]\n",
    "        \n",
    "    if sample == 'Data':\n",
    "        \n",
    "        hist['Data'][\"leading_isolated_muon_pt_initial\"] = rdfIsolatedMuonNoHighWeights['Data'].Histo1D((\"leading_isolated_muon_pt_initial\",\"Leading Isolated Muon Transverse Momentum (One Muon, No Electrons); Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\")\n",
    "        hist['Data'][\"leading_isolated_muon_eta_initial\"] = rdfIsolatedMuonNoHighWeights['Data'].Histo1D((\"leading_isolated_muon_eta_initial\", \"Leading Isolated Muon Pseudorapidity (One Muon, No Electrons); Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\")\n",
    "        hist['Data'][\"leading_isolated_muon_phi_initial\"] = rdfIsolatedMuonNoHighWeights['Data'].Histo1D((\"leading_isolated_muon_phi_initial\", \"Leading Isolated Muon Angle (One Muon, No Electrons); Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\")\n",
    "        hist['Data'][\"leading_isolated_muon_mass_initial\"] = rdfIsolatedMuonNoHighWeights['Data'].Histo1D((\"leading_isolated_muon_mass_initial\", \"Leading Isolated Muon Mass (One Muon, No Electrons); Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\")\n",
    "        hist['Data'][\"leading_isolated_muon_charge_initial\"] = rdfIsolatedMuonNoHighWeights['Data'].Histo1D((\"leading_isolated_muon_charge_initial\", \"Leading Isolated Muon Charge (One Muon, No Electrons); Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\")\n",
    "        hist['Data'][\"leading_isolated_electron_pt_initial\"] = rdfIsolatedElectronNoHighWeights['Data'].Histo1D((\"leading_isolated_electron_pt_initial\",\"Leading Isolated Electron Transverse Momentum (One Electron, No Muons); Pt (GeV);Events\",100,20,220),\"LeadingIsolatedElectron_pt\")\n",
    "        hist['Data'][\"leading_isolated_electron_eta_initial\"] = rdfIsolatedElectronNoHighWeights['Data'].Histo1D((\"leading_isolated_electron_eta_initial\", \"Leading Isolated Electron Pseudorapidity (One Electron, No Muons); Eta; Events\",100,-3,3),\"LeadingIsolatedElectron_eta\")\n",
    "        hist['Data'][\"leading_isolated_electron_phi_initial\"] = rdfIsolatedElectronNoHighWeights['Data'].Histo1D((\"leading_isolated_electron_phi_initial\", \"Leading Isolated Electron Angle (One Electron, No Muons); Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedElectron_phi\")\n",
    "        hist['Data'][\"leading_isolated_electron_mass_initial\"] = rdfIsolatedElectronNoHighWeights['Data'].Histo1D((\"leading_isolated_electron_mass_initial\", \"Leading Isolated Electron Mass (One Electron, No Muons); Mass(Gev); Events\",10,.0001,.001),\"LeadingIsolatedElectron_mass\")\n",
    "        hist['Data'][\"leading_isolated_electron_charge_initial\"] = rdfIsolatedElectronNoHighWeights['Data'].Histo1D((\"leading_isolated_electron_charge_initial\", \"Leading Isolated Electron Charge (One Electron, No Muons); Charge; Events\",5,-2,2),\"LeadingIsolatedElectron_charge\")\n",
    "        \n",
    "        hist['Data'][\"met_before_met_cut\"] = rdfIsolatedMuonNoHighWeights['Data'].Histo1D((\"met_before_met_cut\", \"MET Before MET Cut; Pt (GeV); Events\",100,0,250),\"METBeforeMETCut\")\n",
    "        hist['Data'][\"met_after_met_cut\"] = rdfIsolatedMuonAfterMETCut['Data'].Histo1D((\"met_after_met_cut\", \"MET After MET Cut; Pt (GeV); Events\",100,0,250),\"METAfterMETCut\")\n",
    "        hist['Data'][\"leading_isolated_muon_pt_after_met_cut\"] = rdfIsolatedMuonAfterMETCut['Data'].Histo1D((\"leading_isolated_muon_pt_after_met_cut\",\"Leading Isolated Muon Transverse Momentum After MET Cut; Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\")\n",
    "        hist['Data'][\"leading_isolated_muon_eta_after_met_cut\"] = rdfIsolatedMuonAfterMETCut['Data'].Histo1D((\"leading_isolated_muon_eta_after_met_cut\", \"Leading Isolated Muon Pseudorapidity After MET Cut; Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\")\n",
    "        hist['Data'][\"leading_isolated_muon_phi_after_met_cut\"] = rdfIsolatedMuonAfterMETCut['Data'].Histo1D((\"leading_isolated_muon_phi_after_met_cut\", \"Leading Isolated Muon Angle After MET Cut; Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\")\n",
    "        hist['Data'][\"leading_isolated_muon_mass_after_met_cut\"] = rdfIsolatedMuonAfterMETCut['Data'].Histo1D((\"leading_isolated_muon_mass_after_met_cut\", \"Leading Isolated Muon Mass After MET Cut; Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\")\n",
    "        hist['Data'][\"leading_isolated_muon_charge_after_met_cut\"] = rdfIsolatedMuonAfterMETCut['Data'].Histo1D((\"leading_isolated_muon_charge_after_met_cut\", \"Leading Isolated Muon Charge After MET Cut; Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\")\n",
    "        hist['Data'][\"leading_isolated_electron_pt_after_met_cut\"] = rdfIsolatedElectronAfterMETCut['Data'].Histo1D((\"leading_isolated_electron_pt_after_met_cut\",\"Leading Isolated Electron Transverse Momentum After MET Cut; Pt (GeV);Events\",100,20,220),\"LeadingIsolatedElectron_pt\")\n",
    "        hist['Data'][\"leading_isolated_electron_eta_after_met_cut\"] = rdfIsolatedElectronAfterMETCut['Data'].Histo1D((\"leading_isolated_electron_eta_after_met_cut\", \"Leading Isolated Electron Pseudorapidity After MET Cut; Eta; Events\",100,-3,3),\"LeadingIsolatedElectron_eta\")\n",
    "        hist['Data'][\"leading_isolated_electron_phi_after_met_cut\"] = rdfIsolatedElectronAfterMETCut['Data'].Histo1D((\"leading_isolated_electron_phi_after_met_cut\", \"Leading Isolated Electron Angle After MET Cut; Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedElectron_phi\")\n",
    "        hist['Data'][\"leading_isolated_electron_mass_after_met_cut\"] = rdfIsolatedElectronAfterMETCut['Data'].Histo1D((\"leading_isolated_electron_mass_after_met_cut\", \"Leading Isolated Electron Mass After MET Cut; Mass(Gev); Events\",10,.0001,.001),\"LeadingIsolatedElectron_mass\")\n",
    "        hist['Data'][\"leading_isolated_electron_charge_after_met_cut\"] = rdfIsolatedElectronAfterMETCut['Data'].Histo1D((\"leading_isolated_electron_charge_after_met_cut\", \"Leading Isolated Electron Charge After MET Cut; Charge; Events\",5,-2,2),\"LeadingIsolatedElectron_charge\")\n",
    "        \n",
    "        hist['Data'][\"number_of_jets_initial\"] = rdfIsolatedMuonAfterMETCut['Data'].Histo1D((\"number_of_jets_initial\", \"Number of Jets Before Jet Cut; Number Of Jets; Events\", 20, 0, 20), \"Num_Jets\")\n",
    "        hist['Data'][\"number_of_jets\"] = rdfJetAndIsolatedLeptonFiltered['Data'].Histo1D((\"number_of_jets\", \"Number Of Jets; Number Of Jets; Events\", 20, 0, 20), \"Num_Jets\")\n",
    "        hist['Data'][\"leading_isolated_muon_pt_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered['Data'].Histo1D((\"leading_isolated_muon_pt_after_jet_cut\",\"Leading Isolated Muon Transverse Momentum After Jet Cut; Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\")\n",
    "        hist['Data'][\"leading_isolated_muon_eta_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered['Data'].Histo1D((\"leading_isolated_muon_eta_after_jet_cut\", \"Leading Isolated Muon Pseudorapidity After Jet Cut; Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\")\n",
    "        hist['Data'][\"leading_isolated_muon_phi_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered['Data'].Histo1D((\"leading_isolated_muon_phi_after_jet_cut\", \"Leading Isolated Muon Angle After Jet Cut; Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\")\n",
    "        hist['Data'][\"leading_isolated_muon_mass_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered['Data'].Histo1D((\"leading_isolated_muon_mass_after_jet_cut\", \"Leading Isolated Muon Mass After Jet Cut; Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\")\n",
    "        hist['Data'][\"leading_isolated_muon_charge_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered['Data'].Histo1D((\"leading_isolated_muon_charge_after_jet_cut\", \"Leading Isolated Muon Charge After Jet Cut; Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\")\n",
    "        \n",
    "        hist['Data'][\"number_of_jpsi_muons_initial\"] = rdfJetAndIsolatedLeptonFiltered['Data'].Histo1D((\"number_of_jpsi_muons_initial\", \"Number of JPsi Muons Before JPsi Muon Cut; Number of Muons; Events\",10,0,8), \"Num_JPsi_Muons\")\n",
    "        hist['Data'][\"number_of_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"number_of_jpsi_muons\", \"Number of JPsi Muons; Number of Muons; Events\",10,0,8), \"Num_JPsi_Muons\")\n",
    "\n",
    "        \n",
    "        # Final Results\n",
    "        hist['Data'][\"leading_isolated_muon_pt\"] = rdfJPsiMuons['Data'].Histo1D((\"leading_isolated_muon_pt\",\"Leading Isolated Muon Transverse Momentum; Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\")\n",
    "        hist['Data'][\"leading_isolated_muon_eta\"] = rdfJPsiMuons['Data'].Histo1D((\"leading_isolated_muon_eta\", \"Leading Isolated Muon Pseudorapidity; Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\")\n",
    "        hist['Data'][\"leading_isolated_muon_phi\"] = rdfJPsiMuons['Data'].Histo1D((\"leading_isolated_muon_phi\", \"Leading Isolated Muon Angle; Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\")\n",
    "        hist['Data'][\"leading_isolated_muon_mass\"] = rdfJPsiMuons['Data'].Histo1D((\"leading_isolated_muon_mass\", \"Leading Isolated Muon Mass; Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\")\n",
    "        hist['Data'][\"leading_isolated_muon_charge\"] = rdfJPsiMuons['Data'].Histo1D((\"leading_isolated_muon_charge\", \"Leading Isolated Muon Charge; Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\")\n",
    "        \n",
    "        hist['Data'][\"jet1_pt\"] = rdfJPsiMuons['Data'].Histo1D((\"jet1_pt\", \"Jet Transverse Momentum for Leading Jet; Pt (GeV); Events\", 100, 20, 200), \"SJet1_pt\")         \n",
    "        hist['Data'][\"jet2_pt\"] = rdfJPsiMuons['Data'].Histo1D((\"jet2_pt\", \"Jet Transverse Momentum for Subleading Jet; Pt (GeV); Events\", 100, 20, 200), \"SJet2_pt\")\n",
    "        hist['Data'][\"jet1_eta\"] = rdfJPsiMuons['Data'].Histo1D((\"jet1_eta\", \"Jet Pseudorapidity for Leading Jet; Eta; Events\", 100, -3, 3), \"SJet1_eta\")\n",
    "        hist['Data'][\"jet2_eta\"] = rdfJPsiMuons['Data'].Histo1D((\"jet2_eta\", \"Jet Pseudorapidity for Subleading Jet; Eta; Events\", 100, -3, 3), \"SJet2_eta\")\n",
    "        hist['Data'][\"jet1_phi\"] = rdfJPsiMuons['Data'].Histo1D((\"jet1_phi\", \"Jet Angle for Leading Jet; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet1_phi\")\n",
    "        hist['Data'][\"jet2_phi\"] = rdfJPsiMuons['Data'].Histo1D((\"jet2_phi\", \"Jet Angle for Subleading Jet; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet2_phi\")\n",
    "        hist['Data'][\"transverse_mass\"] = rdfJPsiMuons['Data'].Histo1D((\"transverse_mass\", \"Transverse Mass; Transverse Mass (GeV); Events\", 150, 0, 150), \"MTofMETandMu\")  \n",
    "        hist['Data'][\"ht\"] = rdfJPsiMuons['Data'].Histo1D((\"ht\", \"Ht; Ht; Events\", 300, 0, 1500), \"Ht\")\n",
    "               \n",
    "        hist['Data'][\"jpsi_muons_pt\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muons_pt\", \"Transverse Momentum for JPsi Muons; Pt; Events\", 150, 0, 50), \"JPsiCandidate_pt\")\n",
    "        hist['Data'][\"jpsi_muons_eta\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muons_eta\", \"Pseudorapidity for JPsi Muons; Eta; Events\", 50, -3, 3), \"JPsiCandidate_eta\")\n",
    "        hist['Data'][\"jpsi_muons_phi\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muons_phi\", \"Angle for JPsi Muons; Phi; Events\", 50, -3.5, 3.5), \"JPsiCandidate_phi\")\n",
    "        hist['Data'][\"jpsi_muons_charge\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muons_charge\", \"Charge of JPsi Muons; Charge; Events\", 5, -2, 2), \"JPsiCandidate_charge\")\n",
    "        hist['Data'][\"invariant_mass_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"invariant_mass_jpsi_muons\", \"Invariant Masses for J/Psi Candidate Muons (Oppositely Charged); Invariant Masses; Events\", 100, .5, 12), \"InvariantMassJPsiMuons\")\n",
    "        hist['Data'][\"invariant_masses_zoomed\"] = rdfJPsiMuons['Data'].Histo1D((\"invariant_masses_zoomed\", \"Invariant Masses for J/Psi Candidate Muons (Oppositely Charged); Invariant Masses; Events\", 50, 2.8, 3.4), \"InvariantMassJPsiMuons\")\n",
    "        hist['Data'][\"invariant_mass_jpsi_and_isolated_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"invariant_mass_jpsi_and_isolated_muons\", \"Invariant Masses for J/Psi Candidate And Isolated Muons; Invariant Masses; Events\", 100, 0, 200), \"InvariantMassJPsiAndIsolatedMuons\")\n",
    "        hist['Data'][\"delta_eta_between_isolated_and_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"Delta Eta for Isolated Muon - JPsi Muons\", \"Delta Eta for Isolated Muon - JPsi Muons; Delta Eta; Events\", 50, 0, 6), \"DeltaEtaBetweenIsolatedAndJPsiMuon\")\n",
    "        hist['Data'][\"delta_phi_between_isolated_and_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"Delta Phi for Isolated Muon - JPsi Muons\", \"Delta Phi for Isolated Muon - JPsi Muons; Delta Phi; Events\", 50, -3.5, 3.5), \"DeltaPhiBetweenIsolatedAndJPsiMuon\")\n",
    "        hist['Data'][\"delta_r_between_isolated_and_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"Delta R for Isolated and JPsi Muons\", \"Delta R for Isolated and JPsi Muons; Delta R; Events\", 50, 0, 6), \"DeltaRBetweenIsolatedAndJPsiMuon\")\n",
    "        hist['Data'][\"jpsi_pt\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_pt\", \"Transverse Momentum for JPsi; Pt; Events\", 240, 0, 120), \"JPsi_pt\")\n",
    "        hist['Data'][\"jpsi_eta\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_eta\", \"Pseudorapidity for JPsi; Eta; Events\", 50, -3, 3), \"JPsi_eta\")\n",
    "        hist['Data'][\"jpsi_phi\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_phi\", \"Angle for JPsi; Phi; Events\", 50, -3.5, 3.5), \"JPsi_phi\")\n",
    "#        hist['Data'][\"jpsi_charge\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_charge\", \"Charge of JPsi; Charge; Events\", 5, -2, 2), \"JPsi_charge\")\n",
    "#         hist['Data'][\"delta_eta_between_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"Delta Eta for JPsi Muons\", \"Delta Eta for JPsi Muons; Delta Eta; Events\", 50, 0, 6), \"DeltaEtaBetweenJPsiMuons\")\n",
    "#         hist['Data'][\"delta_phi_between_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"Delta Phi for JPsi Muons\", \"Delta Phi for JPsi Muons; Delta Phi; Events\", 50, -3.5, 3.5), \"DeltaPhiBetweenJPsiMuons\")\n",
    "#         hist['Data'][\"delta_r_between_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"Delta R for JPsi Muons\", \"Delta R for JPsi Muons; Delta R; Events\", 50, 0, 6), \"DeltaRBetweenJPsiMuons\")\n",
    "\n",
    "        \n",
    "\n",
    "    else:\n",
    "        \n",
    "        hist[sample][\"leading_isolated_muon_pt_initial\"] = rdfIsolatedMuonNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_pt_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Transverse Momentum (One Muon, No Electrons); Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_eta_initial\"] = rdfIsolatedMuonNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_eta_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Pseudorapidity (One Muon, No Electrons); Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_phi_initial\"] = rdfIsolatedMuonNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_phi_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Angle (One Muon, No Electrons); Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_mass_initial\"] = rdfIsolatedMuonNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_mass_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Mass (One Muon, No Electrons); Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_charge_initial\"] = rdfIsolatedMuonNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_charge_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Charge (One Muon, No Electrons); Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_pt_initial\"] = rdfIsolatedElectronNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_pt_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Transverse Momentum (One Electron, No Muons); Pt (GeV);Events\",100,20,220),\"LeadingIsolatedElectron_pt\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_eta_initial\"] = rdfIsolatedElectronNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_eta_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Pseudorapidity (One Electron, No Muons); Eta; Events\",100,-3,3),\"LeadingIsolatedElectron_eta\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_phi_initial\"] = rdfIsolatedElectronNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_phi_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Angle (One Electron, No Muons); Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedElectron_phi\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_mass_initial\"] = rdfIsolatedElectronNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_mass_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Mass (One Electron, No Muons); Mass(Gev); Events\",10,.0001,.001),\"LeadingIsolatedElectron_mass\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_charge_initial\"] = rdfIsolatedElectronNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_charge_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Charge (One Electron, No Muons); Charge; Events\",5,-2,2),\"LeadingIsolatedElectron_charge\",\"LumiXS\")\n",
    "        \n",
    "        hist[sample][\"met_before_met_cut\"] = rdfIsolatedMuonNoHighWeights[sample].Histo1D((sample + \"_\" + \"met_before_met_cut\", \"Monte Carlo \" + sample + \"; MET Before MET Cut; Pt (GeV); Events\",100,0,250), \"METBeforeMETCut\", \"LumiXS\")\n",
    "        hist[sample][\"met_after_met_cut\"] = rdfIsolatedMuonAfterMETCut[sample].Histo1D((sample + \"_\" + \"met_after_met_cut\", \"Monte Carlo \" + sample + \"; MET After MET Cut; Pt (GeV); Events\",100,0,250), \"METAfterMETCut\", \"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_pt_after_met_cut\"] = rdfIsolatedMuonAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_pt_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Transverse Momentum After MET Cut; Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_eta_after_met_cut\"] = rdfIsolatedMuonAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_eta_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Pseudorapidity After MET Cut; Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_phi_after_met_cut\"] = rdfIsolatedMuonAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_phi_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Angle After MET Cut; Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_mass_after_met_cut\"] = rdfIsolatedMuonAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_mass_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Mass After MET Cut; Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_charge_after_met_cut\"] = rdfIsolatedMuonAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_charge_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Charge After MET Cut; Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_pt_after_met_cut\"] = rdfIsolatedElectronAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_pt_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Transverse Momentum After MET Cut; Pt (GeV);Events\",100,20,220),\"LeadingIsolatedElectron_pt\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_eta_after_met_cut\"] = rdfIsolatedElectronAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_eta_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Pseudorapidity After MET Cut; Eta; Events\",100,-3,3),\"LeadingIsolatedElectron_eta\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_phi_after_met_cut\"] = rdfIsolatedElectronAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_phi_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Angle After MET Cut; Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedElectron_phi\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_mass_after_met_cut\"] = rdfIsolatedElectronAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_mass_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Mass After MET Cut; Mass(Gev); Events\",10,.0001,.001),\"LeadingIsolatedElectron_mass\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_charge_after_met_cut\"] = rdfIsolatedElectronAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_charge_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Charge After MET Cut; Charge; Events\",5,-2,2),\"LeadingIsolatedElectron_charge\",\"LumiXS\")\n",
    "        \n",
    "        hist[sample][\"number_of_jets_initial\"] = rdfIsolatedMuonAfterMETCut[sample].Histo1D((sample + \"_\" + \"number_of_jets_initial\", \"Monte Carlo \" + sample +\"; Number Of Jets Before Jet Cut; Number Of Jets; Events\", 20, 0, 20), \"Num_Jets\", \"LumiXS\")\n",
    "        hist[sample][\"number_of_jets\"] = rdfJetAndIsolatedLeptonFiltered[sample].Histo1D((sample + \"_\" + \"number_of_jets\", \"Monte Carlo \" + sample +\"; Number Of Jets; Number Of Jets; Events\", 20, 0, 20), \"Num_Jets\", \"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_pt_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_pt_after_jet_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Transverse Momentum After Jet Cut; Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_eta_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_eta_after_jet_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Pseudorapidity After Jet Cut; Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_phi_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_phi_after_jet_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Angle After Jet Cut; Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_mass_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_mass_after_jet_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Mass After Jet Cut; Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_charge_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_charge_after_jet_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Charge After Jet Cut; Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\",\"LumiXS\")\n",
    "        \n",
    "        hist[sample][\"number_of_jpsi_muons_initial\"] = rdfJetAndIsolatedLeptonFiltered[sample].Histo1D((sample + \"_\" + \"number_of_jpsi_muons_initial\", \"Monte Carlo \" + sample +\"; Number Of JPsi Muons Before JPsi Muon Cut; Number Of Muons; Events\", 20, 0, 20), \"Num_JPsi_Muons\", \"LumiXS\")\n",
    "        hist[sample][\"number_of_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"number_of_jpsi_muons\", \"Monte Carlo \" + sample +\"; Number Of JPsi Muons; Number Of Muons; Events\", 20, 0, 20), \"Num_JPsi_Muons\", \"LumiXS\")\n",
    "        \n",
    "        \n",
    "        \n",
    "        # Final Results\n",
    "        hist[sample][\"leading_isolated_muon_pt\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_pt\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Transverse Momentum (One Muon, No Electrons); Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_eta\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_eta\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Pseudorapidity (One Muon, No Electrons); Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_phi\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_phi\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Angle (One Muon, No Electrons); Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_mass\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_mass\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Mass (One Muon, No Electrons); Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_charge\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_charge\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Charge (One Muon, No Electrons); Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\",\"LumiXS\")\n",
    "               \n",
    "        hist[sample][\"jet1_pt\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jet1_pt\", \"Monte Carlo \" + sample + \"; Jet Transverse Momentum for Leading Jet; Pt (GeV); Events\", 100, 20, 200), \"SJet1_pt\", \"LumiXS\")\n",
    "        hist[sample][\"jet2_pt\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jet2_pt\", \"Monte Carlo \" + sample + \"; Jet Transverse Momentum for Subeading Jet; Pt (GeV); Events\", 100, 20, 200), \"SJet2_pt\", \"LumiXS\")\n",
    "        hist[sample][\"jet1_eta\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jet1_eta\", \"Monte Carlo \" + sample + \"; Jet Pseudorapidity for Leading Jet; Eta; Events\", 100, -3, 3), \"SJet1_eta\", \"LumiXS\")\n",
    "        hist[sample][\"jet2_eta\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jet2_eta\", \"Monte Carlo \" + sample +\"; Jet Pseudorapidity for Subeading Jet; Eta; Events\", 100, -3, 3), \"SJet2_eta\", \"LumiXS\")\n",
    "        hist[sample][\"jet1_phi\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jet1_phi\", \"Monte Carlo \" + sample + \"; Jet Angle for Leading Jet; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet1_phi\", \"LumiXS\")\n",
    "        hist[sample][\"jet2_phi\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jet2_phi\", \"Monte Carlo \" + sample +\"; Jet Angle for Subleading Jet; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet2_phi\", \"LumiXS\")\n",
    "        hist[sample][\"transverse_mass\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"transverse_mass\", \"Monte Carlo \" + sample +\"; Transverse Mass; Transverse Mass (GeV); Events\", 150, 0, 150), \"MTofMETandMu\", \"LumiXS\")\n",
    "        hist[sample][\"ht\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"ht\", \"Monte Carlo \" + sample + \"; Ht; Ht; Events\", 300, 0, 1500), \"Ht\", \"LumiXS\")\n",
    "                \n",
    "        hist[sample][\"jpsi_muons_pt\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muons_pt\", \"Monte Carlo \" + sample + \"; Transverse Momentum for JPsi Muons; Pt; Events\", 150, 0, 50), \"JPsiCandidate_pt\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_muons_eta\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muons_eta\", \"Monte Carlo \" + sample + \"; Pseudorapidity for JPsi Muons; Eta; Events\", 50, -3, 3), \"JPsiCandidate_eta\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_muons_phi\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muons_phi\", \"Monte Carlo \" + sample + \"; Angle for JPsi Muons; Phi; Events\", 50, -3.5, 3.5), \"JPsiCandidate_phi\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_muons_charge\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_charge\", \"Monte Carlo\" + sample + \"; Charge of JPsi Muons; Charge; Events\", 5, -2, 2), \"JPsiCandidate_charge\", \"LumiXS\")\n",
    "        hist[sample][\"invariant_mass_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"invariant_mass_jpsi_muons\", \"Monte Carlo \" + sample + \"; Invariant Masses for J/Psi Candidate Muons (Oppositely Charged); Invariant Masses; Events\", 100, .5, 12), \"InvariantMassJPsiMuons\", \"LumiXS\")\n",
    "        hist[sample][\"invariant_masses_zoomed\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"invariant_masses_zoomed\", \"Monte Carlo \" + sample + \"; Invariant Masses for J/Psi Candidate Muons (Oppositely Charged); Invariant Masses; Events\", 50, 2.8, 3.4), \"InvariantMassJPsiMuons\", \"LumiXS\")\n",
    "        hist[sample][\"invariant_mass_jpsi_and_isolated_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"invariant_mass_jpsi_and_isolated_muons\", \"Monte Carlo \" + sample + \"; Invariant Masses for J/Psi Candidate And Isolated Muons; Invariant Masses; Events\", 100, 0, 200), \"InvariantMassJPsiAndIsolatedMuons\", \"LumiXS\")\n",
    "        hist[sample][\"delta_eta_between_isolated_and_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_eta\", \"Monte Carlo \" + sample + \"; Delta Eta for Isolated Muon - JPsi Muons; Delta Eta; Events\", 50, 0, 6), \"DeltaEtaBetweenIsolatedAndJPsiMuon\", \"LumiXS\")\n",
    "        hist[sample][\"delta_phi_between_isolated_and_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_phi\", \"Monte Carlo \" + sample + \"; Delta Phi for Isolated Muon - JPsi Muons; Delta Phi; Events\", 50, -3.5, 3.5), \"DeltaPhiBetweenIsolatedAndJPsiMuon\", \"LumiXS\")\n",
    "        hist[sample][\"delta_r_between_isolated_and_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_r\", \"Monte Carlo \" + sample + \"; Delta R for Isolated and JPsi Muons; Delta R; Events\", 50, 0, 6), \"DeltaRBetweenIsolatedAndJPsiMuon\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_pt\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_pt\", \"Monte Carlo \" + sample + \"; Transverse Momentum for JPsi; Pt; Events\", 240, 0, 120), \"JPsi_pt\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_eta\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_eta\", \"Monte Carlo \" + sample + \"; Pseudorapidity for JPsi; Eta; Events\", 50, -3, 3), \"JPsi_eta\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_phi\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_phi\", \"Monte Carlo \" + sample + \"; Angle for JPsi; Phi; Events\", 50, -3.5, 3.5), \"JPsi_phi\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_charge\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_charge\", \"Monte Carlo\" + sample + \"; Charge of JPsi; Charge; Events\", 5, -2, 2), \"JPsi_charge\", \"LumiXS\")\n",
    "#         hist[sample][\"delta_eta_between_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_eta\", \"Monte Carlo \" + sample + \"; Delta Eta for JPsi Muons; Delta Eta; Events\", 50, 0, 6), \"DeltaEtaBetweenJPsiMuons\", \"LumiXS\")\n",
    "#         hist[sample][\"delta_phi_between_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_phi\", \"Monte Carlo \" + sample + \"; Delta Phi for JPsi Muons; Delta Phi; Events\", 50, -3.5, 3.5), \"DeltaPhiBetweenJPsiMuons\", \"LumiXS\")\n",
    "#         hist[sample][\"delta_r_between_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_r\", \"Monte Carlo \" + sample + \"; Delta R for JPsi Muons; Delta R; Events\", 50, 0, 6), \"DeltaRBetweenJPsiMuons\", \"LumiXS\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "prospective-permission",
   "metadata": {},
   "outputs": [],
   "source": [
    "for sample in dictOfListOfFiles:\n",
    "\n",
    "    ROOT.RDF.SaveGraph(rdf[sample], str(sample) + \".dot\")\n",
    "    os.system(\"dot -Tpdf \" + str(sample) + \".dot > \" + str(sample) + \"_graph.pdf\" )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "small-volleyball",
   "metadata": {},
   "outputs": [],
   "source": [
    "for sample in dictOfListOfFiles:\n",
    "    #nparray[sample] = nparraynode[sample].AsNumpy([\"genWeight\", \"event\", \"run\"])\n",
    "    \n",
    "    cutflow = report[sample].GetValue()\n",
    "    cutflow.Print()\n",
    "    \n",
    "    era = \"2018\"\n",
    "    process = sample\n",
    "    channel = \"Mu\"\n",
    "    syst = \"nominal\"\n",
    "\n",
    "    outFile = ROOT.TFile.Open(\"{}_{}_{}.root\".format(era, channel, process), \"RECREATE\")\n",
    "    for name, hist_pointer in hist[sample].items():\n",
    "        print(hist_pointer)\n",
    "        hist_value = hist_pointer.GetValue()\n",
    "        \n",
    "        hist_value.SetName(\"{}___{}___{}___{}___{}\".format(era, channel, process, name, syst))\n",
    "        print(hist_value)\n",
    "        hist_value.Write()\n",
    "\n",
    "    outFile.Close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58cd86df",
   "metadata": {},
   "outputs": [],
   "source": [
    "for item in mureport:\n",
    "    print(item)\n",
    "    mureport[item].Print()\n",
    "#print(nparray['MonteCarloWJetsToLNu'].keys())\n",
    "\n",
    "#a = np.sort(nparray['MonteCarloWJetsToLNu']['genWeight'])\n",
    "\n",
    "#print(a[:10:-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16ec3f98",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  },
  "sparkconnect": {
   "bundled_options": [],
   "list_of_options": []
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
