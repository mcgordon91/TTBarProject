{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.24/06\n"
     ]
    }
   ],
   "source": [
    "import ROOT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 37440\r\n",
      "-rw-r--r--. 1 migordon 1399   15708 Aug 18  2020 TTto2L2Nu.txt\r\n",
      "-rw-r--r--. 1 migordon 1399   41132 Aug 18  2020 TTToSemiLeptonic.txt\r\n",
      "-rw-r--r--. 1 migordon 1399   14492 Aug 25  2020 Plots.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   37773 Aug 27  2020 August26.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   34610 Sep  2  2020 FTFunctions.cpp\r\n",
      "-rw-r--r--. 1 migordon 1399    5774 Sep 21  2020 RealData\r\n",
      "-rw-r--r--. 1 migordon 1399   45563 Sep 23  2020 September9.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   45708 Sep 24  2020 September23MonteCarlo.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   46111 Sep 24  2020 September23RealData.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   48733 Oct  9  2020 October8MonteCarlo.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399     926 Oct 20  2020 graph.dot.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  145577 Oct 20  2020 October15.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   49188 Nov 11  2020 October8RealData.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  159946 Nov 23  2020 November12.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  159946 Nov 23  2020 November23.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  159946 Nov 24  2020 November24.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  114959 Dec  3  2020 December2.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  145516 Dec 10  2020 December10.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198313 Jan 19  2021 January18LooseID.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198153 Jan 21  2021 January21MediumID.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198536 Jan 21  2021 January21TightID.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198491 Jan 26  2021 January26WithVeto.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  197655 Jan 28  2021 January28WithVeto.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198647 Feb 23  2021 February16AtLeastOneVetoedMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  269832 Feb 23  2021 FirstTTreeAnalysisMonteCarlo-Backup.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  378821 Feb 23  2021 FirstTTreeAnalysisMonteCarlo-Backup-Jaunary-21-2021.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  198548 Feb 24  2021 February23ExactlyOneGoodMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198645 Feb 24  2021 February23AtLeastOneGoodMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  148905 Feb 24  2021 February23NoGoodMuons.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198461 Feb 24  2021 February24VetoedMuons.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  197977 Feb 25  2021 February25AtLeastOneGoodMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198084 Feb 25  2021 February25VetoedMuons.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  237095 Mar  7  2021 March2.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  273136 Mar  8  2021 March8.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  277452 May  2  2021 April27.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  383603 May  3  2021 May3.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  385981 May  5  2021 May4AtLeast4JetsAtLeast1BTagged.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399    7149 May  5  2021 WJetsToLNu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   46268 May  5  2021 2017_Mu_TTToSemiLeptonic.root\r\n",
      "-rw-r--r--. 1 migordon 1399   29677 May  5  2021 2017_Mu_WJetsToLNu.root\r\n",
      "-rw-r--r--. 1 migordon 1399  382235 May  5  2021 FirstTTreeAnalysisMonteCarlo2017Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   21530 May  5  2021 2017_Mu_Data.root\r\n",
      "-rw-r--r--. 1 migordon 1399  264376 May  6  2021 FirstTTreeAnalysisRealData2017Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399    7138 May  6  2021 TTToSemiLeptonic.dot\r\n",
      "-rw-r--r--. 1 migordon 1399    7261 May  6  2021 TTTo2L2Nu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399    7219 May  6  2021 graph.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   44070 May  6  2021 2018_Mu_TTToSemiLeptonic.root\r\n",
      "-rw-r--r--. 1 migordon 1399   44250 May  6  2021 2018_Mu_TTTo2L2Nu.root\r\n",
      "-rw-r--r--. 1 migordon 1399  388482 May  6  2021 May6.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  292166 May 12  2021 FirstTTreeAnalysisMonteCarlo2018Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  322266 May 12  2021 May11.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   34610 May 26  2021 TopMassFunctions.cpp\r\n",
      "-rw-r--r--. 1 migordon 1399   24558 Aug 19  2021 FirstTTreeAnalysis2018United-Backup.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399     427 Aug 24  2021 New_Combination.root\r\n",
      "-rw-r--r--. 1 migordon 1399  152243 Aug 25  2021 August25_50K_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  253643 Aug 25  2021 August25_500K_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  268165 Aug 26  2021 August25_1M_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  288466 Aug 26  2021 August25_3M_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  293684 Aug 26  2021 August25_5M_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   32517 Aug 30  2021 FirstTTreeAnalysis2018United-Backup-Copy1.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  308929 Aug 31  2021 August31.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  287815 Sep  1  2021 September1.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  165129 Sep  2  2021 FirstTTreeAnalysisRealData2018Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  342481 Sep  3  2021 September2.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  354661 Sep 21  2021 September21TightMedium.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  354301 Sep 21  2021 September21TightTight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  354485 Sep 21  2021 September22MediumTight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  568715 Sep 28  2021 MasterPlots-9-27-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  366143 Oct  1  2021 September30.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  608173 Oct  6  2021 MasterPlots-10-5-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  718643 Oct 20  2021 MasterPlots-10-20-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  460135 Oct 21  2021 October21.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  459750 Oct 28  2021 October26.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  469993 Nov 11  2021 November11.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  815942 Dec 20  2021 MasterPlots.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   35815 Jan  7  2022 FirstTTreeAnalysis2018United-AdditionalJPsi.py\r\n",
      "-rw-r--r--. 1 migordon 1399   48706 Jan  7  2022 FirstTTreeAnalysis2018United-AdditionalJPsi.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399 5254040 Jan  9  2022 FirstTTreeAnalysis2018United-AdditionalJPsi-OldCopy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   49408 Jan  9  2022 FirstTTreeAnalysis2018United-AdditionalJPsi-1-9-22-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   52579 Jan 10  2022 FirstTTreeAnalysis2018United-AdditionalJPsi-Late2021Fixes.py\r\n",
      "-rw-r--r--. 1 migordon 1399   22036 May  9 11:57 FirstTTreeAnalysis2018United.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   75336 May 14 12:09 May14_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  134983 May 26 14:41 May26_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  156426 Jun 13 14:42 June13_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   76628 Jun 13 16:00 FirstTTreeAnalysis2018United-AdditionalJPsi-Late2021Fixes.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   41767 Jun 13 17:53 FirstTTreeAnalysis2018United-AdditionalJPsi-10-20-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  317522 Jun 14 16:22 June14_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   39626 Jun 20 15:21 FirstTTreeAnalysis2018United-AdditionalJPsi-10-5-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   27369 Jun 20 16:49 FirstTTreeAnalysis2018United-AdditionalJPsi-10-5-21-Copy.py\r\n",
      "-rw-r--r--. 1 migordon 1399  115107 Jun 21 15:12 FirstTTreeAnalysis2018United-AdditionalJPsi-May_23_2022_Version.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  552871 Jun 21 16:25 MasterPlots-Late2021Fixes.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  461138 Jun 23 17:27 June23_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  267495 Jun 27 14:57 FirstTTreeAnalysisRealData-Backup-January-21-2021.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  472488 Jun 30 17:37 June30_2022_JPsiZoomed.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   32374 Jul  1 16:35 FirstTTreeAnalysis2018United-AdditionalJPsi-9-27-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   66434 Jul  1 23:03 FirstTTreeAnalysis2018United-AdditionalJPsi-June_20_2022_Version-Common-Filters-First.py\r\n",
      "-rw-r--r--. 1 migordon 1399   80894 Jul  3 13:20 FirstTTreeAnalysis2018United-AdditionalJPsi-June_20_2022_Version-Common-Filters-First.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  605767 Jul  3 20:45 July3_2022_MinimumFourJets.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  173470 Jul  4 12:49 MasterPlots-June-20-2022-Version.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  702825 Jul  4 13:22 July4_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  705989 Jul  5 09:55 July5_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   95925 Jul 10 23:20 FirstTTreeAnalysis2018United-AdditionalJPsi-July_10_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  776465 Jul 10 23:49 July10_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   97291 Jul 11 01:36 FirstTTreeAnalysis2018United-AdditionalJPsi-July_3_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   80141 Jul 11 01:38 FirstTTreeAnalysis2018United-AdditionalJPsi-July_3_2022.py\r\n",
      "-rw-r--r--. 1 migordon 1399   98358 Jul 11 02:56 TopQuark_JPsi_Analysis-July_11_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   80916 Jul 11 02:57 TopQuark_JPsi_Analysis-July_11_2022.py\r\n",
      "-rw-r--r--. 1 migordon 1399  769640 Jul 11 03:12 July11_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   95925 Jul 11 09:41 FirstTTreeAnalysis2018United-AdditionalJPsi-July_11_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  802986 Jul 11 10:35 July11_2022_a.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   77722 Jul 11 11:04 TopQuark_JPsi_Analysis-July_11_2022-Copy1.py\r\n",
      "-rw-r--r--. 1 migordon 1399  838420 Jul 11 11:30 July11_2022_b.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  900846 Jul 12 19:46 July12_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399 1057489 Jul 13 15:13 July13_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399 1049253 Jul 13 22:15 July13_2022_Isolated_Tight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  640564 Jul 17 18:18 Combination.root_backup\r\n",
      "-rw-r--r--. 1 migordon 1399  128568 Jul 17 18:26 TopQuark_JPsi_Analysis-July_12_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  109211 Jul 17 18:27 TopQuark_JPsi_Analysis-July_12_2022.py\r\n",
      "drwxr-xr-x. 2 migordon 1399    4096 Jul 17 18:27 __pycache__\r\n",
      "-rw-r--r--. 1 migordon 1399   23587 Jul 17 18:28 Data.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   35769 Jul 17 18:28 Data_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   23854 Jul 17 18:28 MonteCarloTTToSemiLeptonic.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   37334 Jul 17 18:28 MonteCarloTTToSemiLeptonic_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   23854 Jul 17 18:28 MonteCarloTTTo2L2Nu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   37334 Jul 17 18:28 MonteCarloTTTo2L2Nu_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   23854 Jul 17 18:28 MonteCarloWJetsToLNu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   37334 Jul 17 18:28 MonteCarloWJetsToLNu_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   24285 Jul 17 18:28 MonteCarloST_tW_top.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   37334 Jul 17 18:28 MonteCarloST_tW_top_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   24352 Jul 17 18:28 MonteCarloST_tchannel_top.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   37334 Jul 17 18:28 MonteCarloST_tchannel_top_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   78169 Jul 17 18:30 2018_Mu_Data.root\r\n",
      "-rw-r--r--. 1 migordon 1399  138459 Jul 17 18:33 2018_Mu_MonteCarloTTToSemiLeptonic.root\r\n",
      "-rw-r--r--. 1 migordon 1399  135878 Jul 17 18:35 2018_Mu_MonteCarloTTTo2L2Nu.root\r\n",
      "-rw-r--r--. 1 migordon 1399  127914 Jul 17 18:35 2018_Mu_MonteCarloWJetsToLNu.root\r\n",
      "-rw-r--r--. 1 migordon 1399   82056 Jul 17 18:35 2018_Mu_MonteCarloST_tW_top.root\r\n",
      "-rw-r--r--. 1 migordon 1399   95874 Jul 17 18:35 2018_Mu_MonteCarloST_tchannel_top.root\r\n",
      "-rw-r--r--. 1 migordon 1399  641187 Jul 17 18:36 Combination.root\r\n",
      "-rw-r--r--. 1 migordon 1399 2710833 Jul 17 18:38 MasterPlots-July-3-2022-Version.ipynb\r\n"
     ]
    }
   ],
   "source": [
    "!ls -ltr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hadd Target file: Combination.root\n",
      "hadd compression setting for all output: 1\n",
      "hadd Source file 1: 2018_Mu_Data.root\n",
      "hadd Source file 2: 2018_Mu_MonteCarloTTToSemiLeptonic.root\n",
      "hadd Source file 3: 2018_Mu_MonteCarloTTTo2L2Nu.root\n",
      "hadd Source file 4: 2018_Mu_MonteCarloWJetsToLNu.root\n",
      "hadd Source file 5: 2018_Mu_MonteCarloST_tW_top.root\n",
      "hadd Source file 6: 2018_Mu_MonteCarloST_tchannel_top.root\n",
      "hadd Target path: Combination.root:/\n"
     ]
    }
   ],
   "source": [
    "!mv Combination.root Combination.root_backup\n",
    "!hadd -f Combination.root 2018_Mu_Data.root 2018_Mu_MonteCarloTTToSemiLeptonic.root 2018_Mu_MonteCarloTTTo2L2Nu.root 2018_Mu_MonteCarloWJetsToLNu.root 2018_Mu_MonteCarloST_tW_top.root 2018_Mu_MonteCarloST_tchannel_top.root"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2018___Mu___Data___leading_isolated_muon_pt_initial___nominal', '2018___Mu___Data___leading_isolated_muon_eta_initial___nominal', '2018___Mu___Data___leading_isolated_muon_phi_initial___nominal', '2018___Mu___Data___leading_isolated_muon_mass_initial___nominal', '2018___Mu___Data___leading_isolated_muon_charge_initial___nominal', '2018___Mu___Data___leading_isolated_electron_pt_initial___nominal', '2018___Mu___Data___leading_isolated_electron_eta_initial___nominal', '2018___Mu___Data___leading_isolated_electron_phi_initial___nominal', '2018___Mu___Data___leading_isolated_electron_mass_initial___nominal', '2018___Mu___Data___leading_isolated_electron_charge_initial___nominal', '2018___Mu___Data___met_before_met_cut___nominal', '2018___Mu___Data___met_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___Data___number_of_jets_initial___nominal', '2018___Mu___Data___number_of_jets___nominal', '2018___Mu___Data___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___Data___number_of_jpsi_muons_initial___nominal', '2018___Mu___Data___number_of_jpsi_muons___nominal', '2018___Mu___Data___leading_isolated_muon_pt___nominal', '2018___Mu___Data___leading_isolated_muon_eta___nominal', '2018___Mu___Data___leading_isolated_muon_phi___nominal', '2018___Mu___Data___leading_isolated_muon_mass___nominal', '2018___Mu___Data___leading_isolated_muon_charge___nominal', '2018___Mu___Data___jet1_pt___nominal', '2018___Mu___Data___jet2_pt___nominal', '2018___Mu___Data___jet1_eta___nominal', '2018___Mu___Data___jet2_eta___nominal', '2018___Mu___Data___jet1_phi___nominal', '2018___Mu___Data___jet2_phi___nominal', '2018___Mu___Data___transverse_mass___nominal', '2018___Mu___Data___ht___nominal', '2018___Mu___Data___jpsi_muons_pt___nominal', '2018___Mu___Data___jpsi_muons_eta___nominal', '2018___Mu___Data___jpsi_muons_phi___nominal', '2018___Mu___Data___jpsi_muons_charge___nominal', '2018___Mu___Data___invariant_mass_jpsi_muons___nominal', '2018___Mu___Data___invariant_masses_zoomed___nominal', '2018___Mu___Data___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___Data___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___jpsi_pt___nominal', '2018___Mu___Data___jpsi_eta___nominal', '2018___Mu___Data___jpsi_phi___nominal', '2018___Mu___Data___delta_eta_between_jpsi_muons___nominal', '2018___Mu___Data___delta_phi_between_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_jpsi_muons___nominal', '2018___Mu___Data___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___Data___isolated_muon_pf_rel_iso_03_chg___nominal', '2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all___nominal', '2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_chg___nominal', '2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all___nominal', '2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_chg___nominal', '2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___Data___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___Data___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___Data___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___Data___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___Data___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___Data___further_muon_medium_tight_pt___nominal', '2018___Mu___Data___further_muon_medium_tight_pf_rel_iso_03_all___nominal', '2018___Mu___Data___further_muon_medium_tight_pf_iso_id___nominal', '2018___Mu___Data___further_muon_loose_tight_pt___nominal', '2018___Mu___Data___further_muon_loose_tight_pf_rel_iso_03_all___nominal', '2018___Mu___Data___further_muon_loose_tight_pf_iso_id___nominal', '2018___Mu___Data___further_muon_medium_medium_pt___nominal', '2018___Mu___Data___further_muon_medium_medium_pf_rel_iso_03_all___nominal', '2018___Mu___Data___further_muon_medium_medium_pf_iso_id___nominal', '2018___Mu___Data___further_muon_loose_medium_pt___nominal', '2018___Mu___Data___further_muon_loose_medium_pf_rel_iso_03_all___nominal', '2018___Mu___Data___further_muon_loose_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___met_before_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___met_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___transverse_mass___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___ht___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___met_before_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___met_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___transverse_mass___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___ht___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___met_before_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___met_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jets_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jets___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___transverse_mass___nominal', '2018___Mu___MonteCarloWJetsToLNu___ht___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloST_tW_top___met_before_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___met_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jets_initial___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jets___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_phi___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_phi___nominal', '2018___Mu___MonteCarloST_tW_top___transverse_mass___nominal', '2018___Mu___MonteCarloST_tW_top___ht___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_phi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pt___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pt___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pt___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pt___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___met_before_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___met_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jets_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jets___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___transverse_mass___nominal', '2018___Mu___MonteCarloST_tchannel_top___ht___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pf_iso_id___nominal']\n"
     ]
    }
   ],
   "source": [
    "f = ROOT.TFile.Open('Combination.root', 'read')\n",
    "k = [ff.GetName() for ff in f.GetListOfKeys()]\n",
    "print(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "eras = list(set([kk.split(\"___\")[0] for kk in k]))\n",
    "channels = list(set([kk.split(\"___\")[1] for kk in k]))\n",
    "samples = list(set([kk.split(\"___\")[2] for kk in k]))\n",
    "variables = list(set([kk.split(\"___\")[3] for kk in k]))\n",
    "systematics = list(set([kk.split(\"___\")[4] for kk in k]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2018']\n",
      "['Mu']\n",
      "['MonteCarloTTTo2L2Nu', 'MonteCarloWJetsToLNu', 'MonteCarloST_tchannel_top', 'MonteCarloTTToSemiLeptonic', 'Data', 'MonteCarloST_tW_top']\n",
      "['jet1_eta', 'transverse_mass', 'delta_r_between_jpsi_muons', 'isolated_muon_pf_rel_iso_03_chg_medium_id', 'jpsi_muon_positive_peak_only_pf_rel_iso_03_all', 'leading_isolated_muon_pt_after_jet_cut', 'jet1_pt', 'leading_isolated_muon_pt_after_met_cut', 'leading_isolated_muon_phi_initial', 'delta_eta_between_isolated_muon_and_jpsi', 'leading_isolated_muon_pt', 'further_muon_loose_medium_pf_rel_iso_03_all', 'invariant_mass_jpsi_and_isolated_muons', 'jpsi_muons_phi', 'jpsi_muon_positive_pf_rel_iso_03_all_medium_id', 'further_muon_loose_tight_pf_iso_id', 'further_muon_loose_tight_pt', 'ht', 'number_of_jets_initial', 'jpsi_muon_positive_pf_rel_iso_03_chg', 'leading_isolated_muon_eta_after_jet_cut', 'jpsi_muon_negative_pf_rel_iso_03_all', 'jpsi_muon_negative_peak_only_pf_rel_iso_03_all', 'isolated_muon_pf_rel_iso_03_all', 'further_muon_medium_medium_pf_rel_iso_03_all', 'jpsi_muon_negative_pf_rel_iso_03_chg', 'further_muon_medium_tight_pf_rel_iso_03_all', 'leading_isolated_muon_phi', 'jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed', 'isolated_muon_pf_rel_iso_03_all_medium_id', 'leading_isolated_electron_phi_after_met_cut', 'jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed', 'jet2_eta', 'jpsi_muon_negative_peak_only_pf_rel_iso_03_chg', 'jpsi_muon_negative_pf_rel_iso_03_all_medium_id', 'leading_isolated_muon_eta_after_met_cut', 'isolated_muon_pf_rel_iso_03_all_medium_id_zoomed', 'further_muon_medium_tight_pt', 'jpsi_muons_eta', 'leading_isolated_muon_phi_after_met_cut', 'leading_isolated_muon_charge_after_met_cut', 'leading_isolated_muon_mass_after_jet_cut', 'leading_isolated_electron_charge_initial', 'jet1_phi', 'leading_isolated_electron_mass_after_met_cut', 'leading_isolated_muon_mass_initial', 'leading_isolated_electron_charge_after_met_cut', 'leading_isolated_muon_eta', 'jpsi_phi', 'jet2_phi', 'further_muon_loose_medium_pf_iso_id', 'leading_isolated_electron_pt_initial', 'further_muon_medium_medium_pt', 'invariant_mass_jpsi_muons', 'further_muon_loose_tight_pf_rel_iso_03_all', 'jpsi_muon_positive_pf_rel_iso_03_all', 'jpsi_muons_pt', 'leading_isolated_muon_mass_after_met_cut', 'delta_r_between_isolated_muon_and_jpsi', 'further_muon_medium_tight_pf_iso_id', 'leading_isolated_muon_charge', 'jpsi_muon_positive_pf_rel_iso_03_all_zoomed', 'leading_isolated_electron_pt_after_met_cut', 'delta_eta_between_jpsi_muons', 'number_of_jets', 'further_muon_medium_medium_pf_iso_id', 'leading_isolated_muon_pt_initial', 'further_muon_loose_medium_pt', 'jpsi_muons_charge', 'jpsi_muon_negative_pf_rel_iso_03_all_zoomed', 'delta_r_between_isolated_and_jpsi_muons', 'leading_isolated_muon_mass', 'delta_phi_between_isolated_and_jpsi_muons', 'leading_isolated_electron_mass_initial', 'isolated_muon_pf_rel_iso_03_all_zoomed', 'leading_isolated_electron_phi_initial', 'delta_phi_between_jpsi_muons', 'isolated_muon_pf_rel_iso_03_chg', 'jpsi_pt', 'leading_isolated_electron_eta_initial', 'jpsi_eta', 'leading_isolated_muon_eta_initial', 'leading_isolated_electron_eta_after_met_cut', 'leading_isolated_muon_phi_after_jet_cut', 'delta_phi_between_isolated_muon_and_jpsi', 'invariant_masses_zoomed', 'number_of_jpsi_muons', 'met_before_met_cut', 'leading_isolated_muon_charge_after_jet_cut', 'number_of_jpsi_muons_initial', 'jpsi_muon_positive_peak_only_pf_rel_iso_03_chg', 'leading_isolated_muon_charge_initial', 'jet2_pt', 'delta_eta_between_isolated_and_jpsi_muons', 'met_after_met_cut', 'jpsi_muon_negative_pf_rel_iso_03_chg_medium_id', 'jpsi_muon_positive_pf_rel_iso_03_chg_medium_id']\n",
      "['nominal']\n"
     ]
    }
   ],
   "source": [
    "print(eras)\n",
    "print(channels)\n",
    "print(samples)\n",
    "print(variables)\n",
    "print(systematics)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def GetHistos(f, era, channel, variable, systematic = \"nominal\", separator = \"___\"):\n",
    "    \n",
    "    MC = dict()\n",
    "    Data = dict()\n",
    "    \n",
    "    k = [ff.GetName() for ff in f.GetListOfKeys()]\n",
    "    print(k)\n",
    "    k = [kk for kk in k if era == kk.split(separator)[0]]\n",
    "    k = [kk for kk in k if channel == kk.split(separator)[1]]\n",
    "    k = [kk for kk in k if variable == kk.split(separator)[3]]\n",
    "    k = [kk for kk in k if systematic == kk.split(separator)[4]]\n",
    "    \n",
    "    for kk in k:\n",
    "        sample = kk.split(separator)[2]\n",
    "        \n",
    "        if \"data\" in sample.lower():\n",
    "            Data[sample] = f.Get(kk)\n",
    "            print(\"Data\")\n",
    "            \n",
    "        else:\n",
    "            MC[sample] = f.Get(kk)\n",
    "            print(sample)\n",
    "            \n",
    "    return MC, Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2018___Mu___Data___leading_isolated_muon_pt_initial___nominal', '2018___Mu___Data___leading_isolated_muon_eta_initial___nominal', '2018___Mu___Data___leading_isolated_muon_phi_initial___nominal', '2018___Mu___Data___leading_isolated_muon_mass_initial___nominal', '2018___Mu___Data___leading_isolated_muon_charge_initial___nominal', '2018___Mu___Data___leading_isolated_electron_pt_initial___nominal', '2018___Mu___Data___leading_isolated_electron_eta_initial___nominal', '2018___Mu___Data___leading_isolated_electron_phi_initial___nominal', '2018___Mu___Data___leading_isolated_electron_mass_initial___nominal', '2018___Mu___Data___leading_isolated_electron_charge_initial___nominal', '2018___Mu___Data___met_before_met_cut___nominal', '2018___Mu___Data___met_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___Data___number_of_jets_initial___nominal', '2018___Mu___Data___number_of_jets___nominal', '2018___Mu___Data___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___Data___number_of_jpsi_muons_initial___nominal', '2018___Mu___Data___number_of_jpsi_muons___nominal', '2018___Mu___Data___leading_isolated_muon_pt___nominal', '2018___Mu___Data___leading_isolated_muon_eta___nominal', '2018___Mu___Data___leading_isolated_muon_phi___nominal', '2018___Mu___Data___leading_isolated_muon_mass___nominal', '2018___Mu___Data___leading_isolated_muon_charge___nominal', '2018___Mu___Data___jet1_pt___nominal', '2018___Mu___Data___jet2_pt___nominal', '2018___Mu___Data___jet1_eta___nominal', '2018___Mu___Data___jet2_eta___nominal', '2018___Mu___Data___jet1_phi___nominal', '2018___Mu___Data___jet2_phi___nominal', '2018___Mu___Data___transverse_mass___nominal', '2018___Mu___Data___ht___nominal', '2018___Mu___Data___jpsi_muons_pt___nominal', '2018___Mu___Data___jpsi_muons_eta___nominal', '2018___Mu___Data___jpsi_muons_phi___nominal', '2018___Mu___Data___jpsi_muons_charge___nominal', '2018___Mu___Data___invariant_mass_jpsi_muons___nominal', '2018___Mu___Data___invariant_masses_zoomed___nominal', '2018___Mu___Data___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___Data___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___jpsi_pt___nominal', '2018___Mu___Data___jpsi_eta___nominal', '2018___Mu___Data___jpsi_phi___nominal', '2018___Mu___Data___delta_eta_between_jpsi_muons___nominal', '2018___Mu___Data___delta_phi_between_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_jpsi_muons___nominal', '2018___Mu___Data___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___Data___isolated_muon_pf_rel_iso_03_chg___nominal', '2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all___nominal', '2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_chg___nominal', '2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all___nominal', '2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_chg___nominal', '2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___Data___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___Data___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___Data___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___Data___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___Data___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___Data___further_muon_medium_tight_pt___nominal', '2018___Mu___Data___further_muon_medium_tight_pf_rel_iso_03_all___nominal', '2018___Mu___Data___further_muon_medium_tight_pf_iso_id___nominal', '2018___Mu___Data___further_muon_loose_tight_pt___nominal', '2018___Mu___Data___further_muon_loose_tight_pf_rel_iso_03_all___nominal', '2018___Mu___Data___further_muon_loose_tight_pf_iso_id___nominal', '2018___Mu___Data___further_muon_medium_medium_pt___nominal', '2018___Mu___Data___further_muon_medium_medium_pf_rel_iso_03_all___nominal', '2018___Mu___Data___further_muon_medium_medium_pf_iso_id___nominal', '2018___Mu___Data___further_muon_loose_medium_pt___nominal', '2018___Mu___Data___further_muon_loose_medium_pf_rel_iso_03_all___nominal', '2018___Mu___Data___further_muon_loose_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___met_before_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___met_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___transverse_mass___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___ht___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___met_before_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___met_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___transverse_mass___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___ht___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___met_before_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___met_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jets_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jets___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___transverse_mass___nominal', '2018___Mu___MonteCarloWJetsToLNu___ht___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloST_tW_top___met_before_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___met_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jets_initial___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jets___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_phi___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_phi___nominal', '2018___Mu___MonteCarloST_tW_top___transverse_mass___nominal', '2018___Mu___MonteCarloST_tW_top___ht___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_phi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pt___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pt___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pt___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pt___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___met_before_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___met_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jets_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jets___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___transverse_mass___nominal', '2018___Mu___MonteCarloST_tchannel_top___ht___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pf_iso_id___nominal']\n",
      "{} {}\n"
     ]
    }
   ],
   "source": [
    "x, y = GetHistos(f, \"2018\", \"Mu\", \"mu_pt\")\n",
    "print(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#Load histograms from file(s)\n",
    "MonteCarlo = dict()\n",
    "RealData = dict()\n",
    "\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"] = dict()\n",
    "MonteCarlo[\"met_before_met_cut\"] = dict()\n",
    "MonteCarlo[\"met_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"number_of_jets_initial\"] = dict()\n",
    "MonteCarlo[\"number_of_jets\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"] = dict()\n",
    "MonteCarlo[\"number_of_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"] = dict()\n",
    "MonteCarlo[\"jet1_pt\"] = dict()\n",
    "MonteCarlo[\"jet2_pt\"] = dict()\n",
    "MonteCarlo[\"jet1_eta\"] = dict()\n",
    "MonteCarlo[\"jet2_eta\"] = dict()\n",
    "MonteCarlo[\"jet1_phi\"] = dict()\n",
    "MonteCarlo[\"jet2_phi\"] = dict()\n",
    "MonteCarlo[\"transverse_mass\"] = dict()\n",
    "MonteCarlo[\"ht\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_pt\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_eta\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_phi\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_charge\"] = dict()\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"invariant_masses_zoomed\"] = dict()\n",
    "MonteCarlo[\"invariant_mass_jpsi_and_isolated_muons\"] = dict()\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"jpsi_pt\"] = dict()\n",
    "MonteCarlo[\"jpsi_eta\"] = dict()\n",
    "MonteCarlo[\"jpsi_phi\"] = dict()\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"] = dict()\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"] = dict()\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"] = dict()\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"] = dict()\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"] = dict()\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"] = dict()\n",
    "MonteCarlo[\"further_muon_medium_tight_pt\"] = dict()\n",
    "MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"] = dict()\n",
    "MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"] = dict()\n",
    "MonteCarlo[\"further_muon_loose_tight_pt\"] = dict()\n",
    "MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"] = dict()\n",
    "MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"] = dict()\n",
    "MonteCarlo[\"further_muon_medium_medium_pt\"] = dict()\n",
    "MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"] = dict()\n",
    "MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"] = dict()\n",
    "MonteCarlo[\"further_muon_loose_medium_pt\"] = dict()\n",
    "MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"] = dict()\n",
    "MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"] = dict()\n",
    "\n",
    "\n",
    "\n",
    "RealData[\"leading_isolated_muon_pt_initial\"] = dict()\n",
    "RealData[\"leading_isolated_muon_eta_initial\"] = dict()\n",
    "RealData[\"leading_isolated_muon_phi_initial\"] = dict()\n",
    "RealData[\"leading_isolated_muon_mass_initial\"] = dict()\n",
    "RealData[\"leading_isolated_muon_charge_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_pt_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_eta_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_phi_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_mass_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_charge_initial\"] = dict()\n",
    "RealData[\"met_before_met_cut\"] = dict()\n",
    "RealData[\"met_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_pt_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_eta_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_phi_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_mass_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_charge_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_pt_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_eta_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_phi_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_mass_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_charge_after_met_cut\"] = dict()\n",
    "RealData[\"number_of_jets_initial\"] = dict()\n",
    "RealData[\"number_of_jets\"] = dict()\n",
    "RealData[\"leading_isolated_muon_pt_after_jet_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_eta_after_jet_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_phi_after_jet_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_mass_after_jet_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_charge_after_jet_cut\"] = dict()\n",
    "RealData[\"number_of_jpsi_muons_initial\"] = dict()\n",
    "RealData[\"number_of_jpsi_muons\"] = dict()\n",
    "RealData[\"leading_isolated_muon_pt\"] = dict()\n",
    "RealData[\"leading_isolated_muon_eta\"] = dict()\n",
    "RealData[\"leading_isolated_muon_phi\"] = dict()\n",
    "RealData[\"leading_isolated_muon_mass\"] = dict()\n",
    "RealData[\"leading_isolated_muon_charge\"] = dict()\n",
    "RealData[\"jet1_pt\"] = dict()\n",
    "RealData[\"jet2_pt\"] = dict()\n",
    "RealData[\"jet1_eta\"] = dict()\n",
    "RealData[\"jet2_eta\"] = dict()\n",
    "RealData[\"jet1_phi\"] = dict()\n",
    "RealData[\"jet2_phi\"] = dict()\n",
    "RealData[\"transverse_mass\"] = dict()\n",
    "RealData[\"ht\"] = dict()\n",
    "RealData[\"jpsi_muons_pt\"] = dict()\n",
    "RealData[\"jpsi_muons_eta\"] = dict()\n",
    "RealData[\"jpsi_muons_phi\"] = dict()\n",
    "RealData[\"jpsi_muons_charge\"] = dict()\n",
    "RealData[\"invariant_mass_jpsi_muons\"] = dict()\n",
    "RealData[\"invariant_masses_zoomed\"] = dict()\n",
    "RealData[\"invariant_mass_jpsi_and_isolated_muons\"] = dict()\n",
    "RealData[\"delta_eta_between_isolated_and_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_phi_between_isolated_and_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_r_between_isolated_and_jpsi_muons\"] = dict()\n",
    "RealData[\"jpsi_pt\"] = dict()\n",
    "RealData[\"jpsi_eta\"] = dict()\n",
    "RealData[\"jpsi_phi\"] = dict()\n",
    "RealData[\"delta_eta_between_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_phi_between_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_r_between_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_eta_between_isolated_muon_and_jpsi\"] = dict()\n",
    "RealData[\"delta_phi_between_isolated_muon_and_jpsi\"] = dict()\n",
    "RealData[\"delta_r_between_isolated_muon_and_jpsi\"] = dict()\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all\"] = dict()\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_chg\"] = dict()\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all\"] = dict()\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg\"] = dict()\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all\"] = dict()\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg\"] = dict()\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"] = dict()\n",
    "RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"] = dict()\n",
    "RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"] = dict()\n",
    "RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"] = dict()\n",
    "RealData[\"further_muon_medium_tight_pt\"] = dict()\n",
    "RealData[\"further_muon_medium_tight_pf_rel_iso_03_all\"] = dict()\n",
    "RealData[\"further_muon_medium_tight_pf_iso_id\"] = dict()\n",
    "RealData[\"further_muon_loose_tight_pt\"] = dict()\n",
    "RealData[\"further_muon_loose_tight_pf_rel_iso_03_all\"] = dict()\n",
    "RealData[\"further_muon_loose_tight_pf_iso_id\"] = dict()\n",
    "RealData[\"further_muon_medium_medium_pt\"] = dict()\n",
    "RealData[\"further_muon_medium_medium_pf_rel_iso_03_all\"] = dict()\n",
    "RealData[\"further_muon_medium_medium_pf_iso_id\"] = dict()\n",
    "RealData[\"further_muon_loose_medium_pt\"] = dict()\n",
    "RealData[\"further_muon_loose_medium_pf_rel_iso_03_all\"] = dict()\n",
    "RealData[\"further_muon_loose_medium_pf_iso_id\"] = dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_pt_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_eta_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_phi_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_mass_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_mass_initial___nominal\") \n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_charge_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_pt_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_eta_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_phi_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_mass_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_mass_initial___nominal\") \n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_charge_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___met_before_met_cut___nominal\")\n",
    "RealData[\"met_before_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___met_after_met_cut___nominal\")\n",
    "RealData[\"met_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_pt_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_eta_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_phi_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_mass_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_mass_after_met_cut___nominal\") \n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_charge_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_pt_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_eta_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_phi_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_mass_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_mass_after_met_cut___nominal\") \n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_charge_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___number_of_jets_initial___nominal\")\n",
    "RealData[\"number_of_jets_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___number_of_jets___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___number_of_jets___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___number_of_jets___nominal\")\n",
    "RealData[\"number_of_jets\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___number_of_jets___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_pt_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_eta_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_phi_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_mass_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_mass_after_jet_cut___nominal\") \n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_charge_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons_initial___nominal\")\n",
    "RealData[\"number_of_jpsi_muons_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons___nominal\")\n",
    "RealData[\"number_of_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt___nominal\")\n",
    "RealData[\"leading_isolated_muon_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta___nominal\")\n",
    "RealData[\"leading_isolated_muon_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi___nominal\")\n",
    "RealData[\"leading_isolated_muon_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass___nominal\")\n",
    "RealData[\"leading_isolated_muon_mass\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_mass___nominal\") \n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge___nominal\")\n",
    "RealData[\"leading_isolated_muon_charge\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet1_pt___nominal\")\n",
    "RealData[\"jet1_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet2_pt___nominal\")\n",
    "RealData[\"jet2_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet1_eta___nominal\")\n",
    "RealData[\"jet1_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet2_eta___nominal\")\n",
    "RealData[\"jet2_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet1_phi___nominal\")\n",
    "RealData[\"jet1_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet2_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet2_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet2_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet2_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet2_phi___nominal\")\n",
    "RealData[\"jet2_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet2_phi___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___transverse_mass___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___transverse_mass___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___transverse_mass___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___transverse_mass___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___transverse_mass___nominal\")\n",
    "RealData[\"transverse_mass\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___transverse_mass___nominal\")\n",
    "MonteCarlo[\"ht\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___ht___nominal\")\n",
    "MonteCarlo[\"ht\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___ht___nominal\")\n",
    "MonteCarlo[\"ht\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___ht___nominal\")\n",
    "MonteCarlo[\"ht\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___ht___nominal\")\n",
    "MonteCarlo[\"ht\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___ht___nominal\")\n",
    "RealData[\"ht\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___ht___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_pt___nominal\")\n",
    "RealData[\"jpsi_muons_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_eta___nominal\")\n",
    "RealData[\"jpsi_muons_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_phi___nominal\")\n",
    "RealData[\"jpsi_muons_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_charge___nominal\")\n",
    "RealData[\"jpsi_muons_charge\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_muons___nominal\")\n",
    "RealData[\"invariant_mass_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___invariant_masses_zoomed___nominal\")\n",
    "RealData[\"invariant_masses_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_and_isolated_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_and_isolated_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_and_isolated_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_and_isolated_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_and_isolated_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_and_isolated_muons___nominal\")\n",
    "RealData[\"invariant_mass_jpsi_and_isolated_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___invariant_mass_jpsi_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "RealData[\"delta_eta_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "RealData[\"delta_phi_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "RealData[\"delta_r_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_pt___nominal\")\n",
    "RealData[\"jpsi_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_eta___nominal\")\n",
    "RealData[\"jpsi_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_phi___nominal\")\n",
    "RealData[\"jpsi_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_jpsi_muons___nominal\")\n",
    "RealData[\"delta_eta_between_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_jpsi_muons___nominal\")\n",
    "RealData[\"delta_phi_between_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons___nominal\")\n",
    "RealData[\"delta_r_between_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "RealData[\"delta_eta_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "RealData[\"delta_phi_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "RealData[\"delta_r_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pt___nominal\")\n",
    "RealData[\"further_muon_medium_tight_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_tight_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "RealData[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "RealData[\"further_muon_medium_tight_pf_iso_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pt___nominal\")\n",
    "RealData[\"further_muon_loose_tight_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_tight_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "RealData[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "RealData[\"further_muon_loose_tight_pf_iso_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pt___nominal\")\n",
    "RealData[\"further_muon_medium_medium_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_medium_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "RealData[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "RealData[\"further_muon_medium_medium_pf_iso_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pt___nominal\")\n",
    "RealData[\"further_muon_loose_medium_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_medium_pt___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "RealData[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "RealData[\"further_muon_loose_medium_pf_iso_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_medium_pf_iso_id___nominal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "S = dict()\n",
    "S[\"leading_isolated_muon_pt_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_pt_initial\", \"Leading Isolated Muon Transverse Momentum (One Muon, No Electrons); Pt (GeV);Events\")\n",
    "S[\"leading_isolated_muon_eta_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_eta_initial\", \"Leading Isolated Muon Pseudorapidity (One Muon, No Electrons); Eta; Events\")\n",
    "S[\"leading_isolated_muon_phi_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_phi_initial\", \"Leading Isolated Muon Angle (One Muon, No Electrons); Phi (Radians); Events\")\n",
    "S[\"leading_isolated_muon_mass_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_mass_initial\", \"Leading Isolated Muon Mass (One Muon, No Electrons); Mass(Gev); Events\")\n",
    "S[\"leading_isolated_muon_charge_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_charge_initial\", \"Leading Isolated Muon Charge (One Muon, No Electrons); Charge; Events\")\n",
    "S[\"leading_isolated_electron_pt_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_pt_initial\", \"Leading Isolated Electron Transverse Momentum (One Electron, No Muons); Pt (GeV);Events\")\n",
    "S[\"leading_isolated_electron_eta_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_eta_initial\", \"Leading Isolated Electron Pseudorapidity (One Electron, No Muons); Eta; Events\")\n",
    "S[\"leading_isolated_electron_phi_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_phi_initial\", \"Leading Isolated Electron Angle (One Electron, No Muons); Phi (Radians); Events\")\n",
    "S[\"leading_isolated_electron_mass_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_mass_initial\", \"Leading Isolated Electron Mass (One Electron, No Muons); Mass(Gev); Events\")\n",
    "S[\"leading_isolated_electron_charge_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_charge_initial\", \"Leading Isolated Electron Charge (One Electron, No Muons); Charge; Events\")\n",
    "S[\"met_before_met_cut\"] = ROOT.THStack(\"s_met_before_met_cut\", \"MET Before MET Cut; Pt (GeV); Events\")\n",
    "S[\"met_after_met_cut\"] = ROOT.THStack(\"s_met_after_met_cut\", \"MET After MET Cut; Pt (GeV); Events\")\n",
    "S[\"leading_isolated_muon_pt_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_pt_after_met_cut\", \"Leading Isolated Muon Transverse Momentum After MET Cut; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_muon_eta_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_eta_after_met_cut\", \"Leading Isolated Muon Pseudorapidity After MET Cut; Eta; Events\")\n",
    "S[\"leading_isolated_muon_phi_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_phi_after_met_cut\", \"Leading Isolated Muon Angle After MET Cut; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_muon_mass_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_mass_after_met_cut\", \"Leading Isolated Muon Mass After MET Cut; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_muon_charge_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_charge_after_met_cut\", \"Leading Isolated Muon Charge After MET Cut; Charge; Events\")\n",
    "S[\"leading_isolated_electron_pt_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_pt_after_met_cut\", \"Leading Isolated Electron Transverse Momentum After MET Cut; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_electron_eta_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_eta_after_met_cut\", \"Leading Isolated Electron Pseudorapidity After MET Cut; Eta; Events\")\n",
    "S[\"leading_isolated_electron_phi_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_phi_after_met_cut\", \"Leading Isolated Electron Angle After MET Cut; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_electron_mass_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_mass_after_met_cut\", \"Leading Isolated Electron Mass After MET Cut; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_electron_charge_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_charge_after_met_cut\", \"Leading Isolated Electron Charge After MET Cut; Charge; Events\")\n",
    "S[\"number_of_jets_initial\"] = ROOT.THStack(\"s_number_of_jets_initial\", \"Number Of Jets Before Jet Cut; Number Of Jets; Events\")\n",
    "S[\"number_of_jets\"] = ROOT.THStack(\"s_number_of_jets\", \"Number Of Jets; Number Of Jets; Events\")\n",
    "S[\"leading_isolated_muon_pt_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_pt_after_jet_cut\", \"Leading Isolated Muon Transverse Momentum After Jet Cut; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_muon_eta_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_eta_after_jet_cut\", \"Leading Isolated Muon Pseudorapidity After Jet Cut; Eta; Events\")\n",
    "S[\"leading_isolated_muon_phi_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_phi_after_jet_cut\", \"Leading Isolated Muon Angle After Jet Cut; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_muon_mass_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_mass_after_jet_cut\", \"Leading Isolated Muon Mass After Jet Cut; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_muon_charge_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_charge_after_jet_cut\", \"Leading Isolated Muon Charge After Jet Cut; Charge; Events\")\n",
    "S[\"number_of_jpsi_muons_initial\"] = ROOT.THStack(\"s_number_of_jpsi_muons_initial\", \"Number of JPsi Muons Before JPsi Muon Cut; Number Of Muons; Events\")\n",
    "S[\"number_of_jpsi_muons\"] = ROOT.THStack(\"s_number_of_jpsi_muons\", \"Number of JPsi Muons; Number Of Muons; Events\")\n",
    "S[\"leading_isolated_muon_pt\"] = ROOT.THStack(\"s_leading_isolated_muon_pt\", \"Leading Isolated Muon Transverse Momentum; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_muon_eta\"] = ROOT.THStack(\"s_leading_isolated_muon_eta\", \"Leading Isolated Muon Pseudorapidity; Eta; Events\")\n",
    "S[\"leading_isolated_muon_phi\"] = ROOT.THStack(\"s_leading_isolated_muon_phi\", \"Leading Isolated Muon Angle; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_muon_mass\"] = ROOT.THStack(\"s_leading_isolated_muon_mass\", \"Leading Isolated Muon Mass; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_muon_charge\"] = ROOT.THStack(\"s_leading_isolated_muon_charge\", \"Leading Isolated Muon Charge; Charge; Events\")\n",
    "S[\"leading_isolated_electron_pt\"] = ROOT.THStack(\"s_leading_isolated_electron_pt\", \"Leading Isolated Electron Transverse Momentum; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_electron_eta\"] = ROOT.THStack(\"s_leading_isolated_electron_eta\", \"Leading Isolated Electron Pseudorapidity; Eta; Events\")\n",
    "S[\"leading_isolated_electron_phi\"] = ROOT.THStack(\"s_leading_isolated_electron_phi\", \"Leading Isolated Electron Angle; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_electron_mass\"] = ROOT.THStack(\"s_leading_isolated_electron_mass\", \"Leading Isolated Electron Mass; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_electron_charge\"] = ROOT.THStack(\"s_leading_isolated_electron_charge\", \"Leading Isolated Electron Charge; Charge; Events\")\n",
    "S[\"jet1_pt\"] = ROOT.THStack(\"s_jet1_pt\", \"Jet Transverse Momentum for Leading Jet; Pt (GeV); Events\")\n",
    "S[\"jet2_pt\"] = ROOT.THStack(\"s_jet2_pt\", \"Jet Transverse Momentum for Subleading Jet; Pt (GeV); Events\")\n",
    "S[\"jet1_eta\"] = ROOT.THStack(\"s_jet1_eta\", \"Jet Pseudorapidity for Leading Jet; Eta; Events\")\n",
    "S[\"jet2_eta\"] = ROOT.THStack(\"s_jet2_eta\", \"Jet Pseudorapidity for Subleading Jet; Eta; Events\")\n",
    "S[\"jet1_phi\"] = ROOT.THStack(\"s_jet1_phi\", \"Jet Angle for Leading Jet; Phi (Radians); Events\")\n",
    "S[\"jet2_phi\"] = ROOT.THStack(\"s_jet2_phi\", \"Jet Angle for Subleading Jet; Phi (Radians); Events\")\n",
    "S[\"transverse_mass\"] = ROOT.THStack(\"s_transverse_mass\", \"Transverse Mass; Transverse Mass (GeV); Events\")\n",
    "S[\"ht\"] = ROOT.THStack(\"s_ht\", \"Ht; Ht; Events\")\n",
    "S[\"jpsi_muons_pt\"] = ROOT.THStack(\"s_jpsi_muons_pt\", \"Transverse Momentum for JPsi Muons; Pt; Events\")\n",
    "S[\"jpsi_muons_eta\"] = ROOT.THStack(\"s_jpsi_muons_eta\", \"Pseudorapidity for JPsi Muons; Eta; Events\")\n",
    "S[\"jpsi_muons_phi\"] = ROOT.THStack(\"s_jpsi_muons_phi\", \"Angle for JPsi Muons; Phi; Events\")\n",
    "S[\"jpsi_muons_charge\"] = ROOT.THStack(\"s_jpsi_muons_charge\", \"Charge of JPsi Muons; Charge; Events\")\n",
    "S[\"invariant_mass_jpsi_muons\"] = ROOT.THStack(\"s_invariant_mass_jpsi_muons\", \"Invariant Masses for J/Psi Candidate Muons (Oppositely Charged); Invariant Masses; Events\")\n",
    "S[\"invariant_masses_zoomed\"] = ROOT.THStack(\"s_invariant_masses_zoomed\", \"Invariant Masses for J/Psi Candidate Muons (Oppositely Charged); Invariant Masses; Events\")\n",
    "S[\"invariant_mass_jpsi_and_isolated_muons\"] = ROOT.THStack(\"s_invariant_mass_jpsi_and_isolated_muons\", \"Invariant Masses for J/Psi Candidate And Isolated Muons; Invariant Masses; Events\")\n",
    "S[\"delta_eta_between_isolated_and_jpsi_muons\"] = ROOT.THStack(\"s_delta_eta_between_isolated_and_jpsi_muons\", \"Delta Eta for Isolated Muon - JPsi Muons; Delta Eta; Events\")\n",
    "S[\"delta_phi_between_isolated_and_jpsi_muons\"] = ROOT.THStack(\"s_delta_phi_between_isolated_and_jpsi_muons\", \"Delta Phi for Isolated Muon - JPsi Muons; Delta Phi; Events\")\n",
    "S[\"delta_r_between_isolated_and_jpsi_muons\"] = ROOT.THStack(\"s_delta_r_between_isolated_and_jpsi_muons\", \"Delta R for Isolated and JPsi Muons; Delta R; Events\")\n",
    "S[\"jpsi_pt\"] = ROOT.THStack(\"s_jpsi_pt\", \"Transverse Momentum for JPsi; Pt; Events\")\n",
    "S[\"jpsi_eta\"] = ROOT.THStack(\"s_jpsi_eta\", \"Pseudorapidity for JPsi; Eta; Events\")\n",
    "S[\"jpsi_phi\"] = ROOT.THStack(\"s_jpsi_phi\", \"Angle for JPsi; Phi; Events\")\n",
    "S[\"delta_eta_between_jpsi_muons\"] = ROOT.THStack(\"s_delta_eta_between_jpsi_muons\", \"Delta Eta for JPsi Muons; Delta Eta; Events\")\n",
    "S[\"delta_phi_between_jpsi_muons\"] = ROOT.THStack(\"s_delta_phi_between_jpsi_muons\", \"Delta Phi for JPsi Muons; Delta Phi; Events\")\n",
    "S[\"delta_r_between_jpsi_muons\"] = ROOT.THStack(\"s_delta_r_between_jpsi_muons\", \"Delta R for JPsi Muons; Delta R; Events\")\n",
    "S[\"delta_eta_between_isolated_muon_and_jpsi\"] = ROOT.THStack(\"s_delta_eta_between_isolated_muon_and_jpsi\", \"Delta Eta for Isolated Muon And JPsi; Delta Eta; Events\")\n",
    "S[\"delta_phi_between_isolated_muon_and_jpsi\"] = ROOT.THStack(\"s_delta_phi_between_isolated_muon_and_jpsi\", \"Delta Phi for Isolated Muon And JPsi; Delta Phi; Events\")\n",
    "S[\"delta_r_between_isolated_muon_and_jpsi\"] = ROOT.THStack(\"s_delta_r_between_isolated_muon_and_jpsi\", \"Delta R for Isolated Muon And JPsi; Delta R; Events\")\n",
    "S[\"isolated_muon_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_all\", \"Isolated Muon PfRelIso03_All; Isolated Muon PfRelIso03_All; Events\")\n",
    "S[\"isolated_muon_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_chg\", \"Isolated Muon PfRelIso03_Chg; Isolated Muon PfRelIso03_Chg; Events\")\n",
    "S[\"jpsi_muon_positive_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_all\", \"JPsi Muon Positive PfRelIso03_All; JPsi Muon Positive PfRelIso03_All; Events\")\n",
    "S[\"jpsi_muon_positive_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_chg\", \"JPsi Muon Positive PfRelIso03_Chg; JPsi Muon Positive PfRelIso03_Chg; Events\")\n",
    "S[\"jpsi_muon_negative_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_all\", \"JPsi Muon Negative PfRelIso03_All; JPsi Muon Negative PfRelIso03_All; Events\")\n",
    "S[\"jpsi_muon_negative_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_chg\", \"JPsi Muon Negative PfRelIso03_Chg; JPsi Muon Negative PfRelIso03_Chg; Events\")\n",
    "S[\"isolated_muon_pf_rel_iso_03_all_zoomed\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_all_zoomed\", \"Isolated Muon PfRelIso03_All Zoomed; Isolated Muon PfRelIso03_All; Events\")\n",
    "S[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_all_zoomed\", \"JPsi Muon Positive PfRelIso03_All Zoomed; JPsi Muon Positive PfRelIso03_All; Events\")\n",
    "S[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_all_zoomed\", \"JPsi Muon Negative PfRelIso03_All Zoomed; JPsi Muon Negative PfRelIso03_All; Events\")\n",
    "S[\"isolated_muon_pf_rel_iso_03_all_medium_id\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_all_medium_id\", \"Isolated Muon PfRelIso03_All Medium ID; Isolated Muon PfRelIso03_All Medium ID; Events\")\n",
    "S[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\", \"Isolated Muon PfRelIso03_All Medium ID Zoomed; Isolated Muon PfRelIso03_All Medium ID; Events\")\n",
    "S[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_chg_medium_id\", \"Isolated Muon PfRelIso03_Chg Medium ID; Isolated Muon PfRelIso03_Chg Medium ID; Events\")\n",
    "S[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_all_medium_id\", \"JPsi Muon Positive PfRelIso03_All Medium ID; JPsi Muon Positive PfRelIso03_All Medium ID; Events\")\n",
    "S[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\", \"JPsi Muon Positive PfRelIso03_All Zoomed Medium ID; JPsi Muon Positive PfRelIso03_All Medium ID; Events\")\n",
    "S[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\", \"JPsi Muon Positive PfRelIso03_Chg Medium ID; JPsi Muon Positive PfRelIso03_Chg Medium ID; Events\")\n",
    "S[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_all_medium_id\", \"JPsi Muon Negative PfRelIso03_All Medium ID; JPsi Muon Negative PfRelIso03_All Medium ID; Events\")\n",
    "S[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\", \"JPsi Muon Negative PfRelIso03_All Zoomed Medium ID; JPsi Muon Negative PfRelIso03_All Medium ID; Events\")\n",
    "S[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\", \"JPsi Muon Negative PfRelIso03_Chg Medium ID; JPsi Muon Negative PfRelIso03_Chg Medium ID; Events\")\n",
    "S[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_jpsi_muon_positive_peak_only_pf_rel_iso_03_all\", \"JPsi Muon Positive Peak Only PfRelIso03_All; JPsi Muon Positive Peak Only PfRelIso03_All; Events\")\n",
    "S[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\", \"JPsi Muon Positive Peak Only PfRelIso03_Chg; JPsi Muon Positive Peak Only PfRelIso03_Chg; Events\")\n",
    "S[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_jpsi_muon_negative_peak_only_pf_rel_iso_03_all\", \"JPsi Muon Negative Peak Only PfRelIso03_All; JPsi Muon Negative Peak Only PfRelIso03_All; Events\")\n",
    "S[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\", \"JPsi Muon Negative Peak Only PfRelIso03_Chg; JPsi Muon Negative Peak Only PfRelIso03_Chg; Events\")\n",
    "S[\"further_muon_medium_tight_pt\"] = ROOT.THStack(\"s_further_muon_medium_tight_pt\", \"Further Muon Pt - Muon Id Medium, Iso Id Tight; Further Muon Pt - Muon Id Medium, Iso Id Tight; Events\")\n",
    "S[\"further_muon_medium_tight_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_further_muon_medium_tight_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Tight; Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Tight; Events\")\n",
    "S[\"further_muon_medium_tight_pf_iso_id\"] = ROOT.THStack(\"s_further_muon_medium_tight_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Medium, Iso Id Tight; Further Muon Pf Iso Id - Muon Id Medium, Iso Id Tight; Events\")\n",
    "S[\"further_muon_loose_tight_pt\"] = ROOT.THStack(\"s_further_muon_loose_tight_pt\", \"Further Muon Pt - Muon Id Loose Iso Id Tight; Further Muon Pt - Muon Id Loose, Iso Id Tight; Events\")\n",
    "S[\"further_muon_loose_tight_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_further_muon_loose_tight_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Tight; Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Tight; Events\")\n",
    "S[\"further_muon_loose_tight_pf_iso_id\"] = ROOT.THStack(\"s_further_muon_loose_tight_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Loose, Iso Id Tight; Further Muon Pf Iso Id - Muon Id Loose, Iso Id Tight; Events\")\n",
    "S[\"further_muon_medium_medium_pt\"] = ROOT.THStack(\"s_further_muon_medium_medium_pt\", \"Further Muon Pt - Muon Id Medium, Iso Id Medium; Further Muon Pt - Muon Id Medium, Iso Id Medium; Events\")\n",
    "S[\"further_muon_medium_medium_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_further_muon_medium_medium_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Medium; Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Medium; Events\")\n",
    "S[\"further_muon_medium_medium_pf_iso_id\"] = ROOT.THStack(\"s_further_muon_medium_medium_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Medium, Iso Id Medium; Further Muon Pf Iso Id - Muon Id Medium, Iso Id Medium; Events\")\n",
    "S[\"further_muon_loose_medium_pt\"] = ROOT.THStack(\"s_further_muon_loose_medium_pt\", \"Further Muon Pt - Muon Id Loose, Iso Id Medium; Further Muon Pt - Muon Id Loose, Iso Id Medium; Events\")\n",
    "S[\"further_muon_loose_medium_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_further_muon_loose_medium_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Medium; Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Medium; Events\")\n",
    "S[\"further_muon_loose_medium_pf_iso_id\"] = ROOT.THStack(\"s_further_muon_loose_medium_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Loose, Iso Id Medium; Further Muon Pf Iso Id - Muon Id Loose, Iso Id Medium; Events\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "leading_isolated_muon_pt_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt_initial ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_initial ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_initial ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_initial ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_initial ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_pt_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_pt_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_pt_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_pt_initial ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_pt_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_eta_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_eta_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_eta_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_eta_initial ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_eta_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_phi_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_phi_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_phi_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_phi_initial ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_phi_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_mass_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_mass_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_mass_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_mass_initial ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_mass_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_charge_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_charge_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_charge_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_charge_initial ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_charge_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "met_before_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "met_before_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "met_before_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "met_before_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "met_before_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "met_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "met_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "met_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "met_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "met_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_pt_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_pt_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_pt_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_pt_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_pt_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_eta_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_eta_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_eta_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_eta_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_eta_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_phi_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "leading_isolated_electron_phi_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_phi_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_phi_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_phi_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_mass_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_mass_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_mass_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_mass_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_mass_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_charge_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_charge_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_charge_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_charge_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_electron_charge_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jets_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jets_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jets_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jets_initial ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jets_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jets TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jets TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jets WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jets ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jets ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jpsi_muons_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jpsi_muons_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jpsi_muons_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jpsi_muons_initial ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jpsi_muons_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "number_of_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_mass ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "leading_isolated_muon_charge ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_pt ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_pt ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_eta WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_eta ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_eta WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_eta ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_phi WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_phi ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet1_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_phi WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_phi ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jet2_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "transverse_mass TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "transverse_mass TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "transverse_mass WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "transverse_mass ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "transverse_mass ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "ht TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "ht TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "ht WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "ht ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "ht ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_pt ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_eta WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_eta ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_phi WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_phi ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_charge TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_charge TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_charge WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_charge ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muons_charge ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_mass_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_mass_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_mass_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_mass_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_mass_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_masses_zoomed TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_masses_zoomed TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_masses_zoomed WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_masses_zoomed ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_masses_zoomed ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_mass_jpsi_and_isolated_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_mass_jpsi_and_isolated_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_mass_jpsi_and_isolated_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_mass_jpsi_and_isolated_muons ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "invariant_mass_jpsi_and_isolated_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_isolated_and_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_isolated_and_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_isolated_and_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_isolated_and_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_isolated_and_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_isolated_and_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_isolated_and_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_isolated_and_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_isolated_and_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_isolated_and_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_isolated_and_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_isolated_and_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_isolated_and_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_isolated_and_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_isolated_and_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_pt ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_eta WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_eta ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_phi WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_phi ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_isolated_muon_and_jpsi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_isolated_muon_and_jpsi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_isolated_muon_and_jpsi WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_isolated_muon_and_jpsi ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_phi_between_isolated_muon_and_jpsi ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_isolated_muon_and_jpsi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_isolated_muon_and_jpsi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_isolated_muon_and_jpsi WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_isolated_muon_and_jpsi ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "delta_r_between_isolated_muon_and_jpsi ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_chg TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_chg TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_chg WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_chg ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_chg ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_chg TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_chg TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_chg WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_chg ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_chg ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_chg TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_chg TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_chg WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_chg ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_chg ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_zoomed TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_zoomed TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_zoomed WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_zoomed ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_zoomed ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_zoomed TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_zoomed TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_zoomed WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_zoomed ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_zoomed ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_zoomed TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_zoomed TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_zoomed WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_zoomed ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_zoomed ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_medium_id TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_medium_id TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_medium_id WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_medium_id ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_medium_id ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_medium_id_zoomed TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_medium_id_zoomed TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_medium_id_zoomed WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_medium_id_zoomed ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_all_medium_id_zoomed ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_chg_medium_id TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_chg_medium_id TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_chg_medium_id WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_chg_medium_id ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "isolated_muon_pf_rel_iso_03_chg_medium_id ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_medium_id TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_medium_id TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_medium_id WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_medium_id ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_medium_id ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_chg_medium_id TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_chg_medium_id TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_chg_medium_id WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_chg_medium_id ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_pf_rel_iso_03_chg_medium_id ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_medium_id TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_medium_id TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_medium_id WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_medium_id ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_medium_id ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_chg_medium_id TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_chg_medium_id TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_chg_medium_id WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_chg_medium_id ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_pf_rel_iso_03_chg_medium_id ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_peak_only_pf_rel_iso_03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_peak_only_pf_rel_iso_03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_peak_only_pf_rel_iso_03_all WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_peak_only_pf_rel_iso_03_all ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_peak_only_pf_rel_iso_03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_peak_only_pf_rel_iso_03_chg TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_peak_only_pf_rel_iso_03_chg TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_peak_only_pf_rel_iso_03_chg WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_peak_only_pf_rel_iso_03_chg ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_positive_peak_only_pf_rel_iso_03_chg ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_peak_only_pf_rel_iso_03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_peak_only_pf_rel_iso_03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_peak_only_pf_rel_iso_03_all WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_peak_only_pf_rel_iso_03_all ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_peak_only_pf_rel_iso_03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_peak_only_pf_rel_iso_03_chg TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_peak_only_pf_rel_iso_03_chg TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_peak_only_pf_rel_iso_03_chg WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_peak_only_pf_rel_iso_03_chg ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "jpsi_muon_negative_peak_only_pf_rel_iso_03_chg ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pt ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pf_rel_iso_03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pf_rel_iso_03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pf_rel_iso_03_all WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pf_rel_iso_03_all ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pf_rel_iso_03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pf_iso_id TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pf_iso_id TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pf_iso_id WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pf_iso_id ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_tight_pf_iso_id ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pt ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pf_rel_iso_03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pf_rel_iso_03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pf_rel_iso_03_all WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pf_rel_iso_03_all ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pf_rel_iso_03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pf_iso_id TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pf_iso_id TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pf_iso_id WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pf_iso_id ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_tight_pf_iso_id ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pt ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pf_rel_iso_03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pf_rel_iso_03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pf_rel_iso_03_all WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pf_rel_iso_03_all ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pf_rel_iso_03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pf_iso_id TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pf_iso_id TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pf_iso_id WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pf_iso_id ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_medium_medium_pf_iso_id ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pt ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pf_rel_iso_03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pf_rel_iso_03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pf_rel_iso_03_all WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pf_rel_iso_03_all ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pf_rel_iso_03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pf_iso_id TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pf_iso_id TTTo2L2Nu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pf_iso_id WJetsToLNu <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pf_iso_id ST_tW_top <class cppyy.gbl.TH1D at 0x97da8c0>\n",
      "further_muon_loose_medium_pf_iso_id ST_tchannel_top <class cppyy.gbl.TH1D at 0x97da8c0>\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for item in MonteCarlo:\n",
    "\n",
    "    for sample, color in {\"TTToSemiLeptonic\" : ROOT.kRed, \"TTTo2L2Nu\" : ROOT.kGreen, \"WJetsToLNu\" : ROOT.kBlue, \"ST_tW_top\" : ROOT.kMagenta, \"ST_tchannel_top\" : ROOT.kOrange}.items():\n",
    "        print(item, sample, type(MonteCarlo[item][sample]))\n",
    "        MonteCarlo[item][sample].SetFillColor(color)\n",
    "        MonteCarlo[item][sample].SetLineColor(color)\n",
    "        S[item].Add(MonteCarlo[item][sample])\n",
    "\n",
    "canvasas = dict()\n",
    "\n",
    "canvas0 = ROOT.TCanvas(\"c_leading_isolated_muon_pt_initial\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_pt_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_pt_initial\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_pt_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas0.Draw()\n",
    "canvasas['0'] = canvas0\n",
    "\n",
    "canvas1 = ROOT.TCanvas(\"c_leading_isolated_muon_eta_initial\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_eta_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_eta_initial\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_eta_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas1.Draw()\n",
    "canvasas['1'] = canvas1\n",
    "\n",
    "canvas2 = ROOT.TCanvas(\"c_leading_isolated_muon_phi_initial\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_phi_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_phi_initial\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_phi_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas2.Draw()\n",
    "canvasas['2'] = canvas2\n",
    "\n",
    "canvas3 = ROOT.TCanvas(\"c_leading_isolated_muon_mass_initial\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_mass_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_mass_initial\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_mass_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas3.Draw()\n",
    "canvasas['3'] = canvas3\n",
    "\n",
    "canvas4 = ROOT.TCanvas(\"c_leading_isolated_muon_charge_initial\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_charge_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_charge_initial\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_charge_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas4.Draw()\n",
    "canvasas['4'] = canvas4\n",
    "\n",
    "canvas5 = ROOT.TCanvas(\"c_leading_isolated_electron_pt_initial\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_electron_pt_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_electron_pt_initial\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_electron_pt_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas5.Draw()\n",
    "canvasas['5'] = canvas5\n",
    "\n",
    "canvas6 = ROOT.TCanvas(\"c_leading_isolated_electron_eta_initial\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_electron_eta_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_electron_eta_initial\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_electron_eta_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas6.Draw()\n",
    "canvasas['6'] = canvas6\n",
    "\n",
    "canvas7 = ROOT.TCanvas(\"c_leading_isolated_electron_phi_initial\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_electron_phi_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_electron_phi_initial\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_electron_phi_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas7.Draw()\n",
    "canvasas['7'] = canvas7\n",
    "\n",
    "canvas8 = ROOT.TCanvas(\"c_leading_isolated_electron_mass_initial\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_electron_mass_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_electron_mass_initial\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_electron_mass_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas8.Draw()\n",
    "canvasas['8'] = canvas8\n",
    "\n",
    "canvas9 = ROOT.TCanvas(\"c_leading_isolated_electron_charge_initial\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_electron_charge_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_electron_charge_initial\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_electron_charge_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas9.Draw()\n",
    "canvasas['9'] = canvas9\n",
    "\n",
    "canvas10 = ROOT.TCanvas(\"c_met_before_met_cut\", \"\", 800, 800)\n",
    "RealData[\"met_before_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"met_before_met_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"met_before_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas10.Draw()\n",
    "canvasas['10'] = canvas10\n",
    "\n",
    "canvas11 = ROOT.TCanvas(\"c_met_after_met_cut\", \"\", 800, 800)\n",
    "RealData[\"met_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"met_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"met_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas11.Draw()\n",
    "canvasas['11'] = canvas11\n",
    "\n",
    "canvas12 = ROOT.TCanvas(\"c_leading_isolated_muon_pt_after_met_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_pt_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_pt_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_pt_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas12.Draw()\n",
    "canvasas['12'] = canvas12\n",
    "\n",
    "canvas13 = ROOT.TCanvas(\"c_leading_isolated_muon_eta_after_met_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_eta_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_eta_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_eta_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas13.Draw()\n",
    "canvasas['13'] = canvas13\n",
    "\n",
    "canvas14 = ROOT.TCanvas(\"c_leading_isolated_muon_phi_after_met_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_phi_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_phi_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_phi_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas14.Draw()\n",
    "canvasas['14'] = canvas14\n",
    "\n",
    "canvas15 = ROOT.TCanvas(\"c_leading_isolated_muon_mass_after_met_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_mass_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_mass_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_mass_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas15.Draw()\n",
    "canvasas['15'] = canvas15\n",
    "\n",
    "canvas16 = ROOT.TCanvas(\"c_leading_isolated_muon_charge_after_met_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_charge_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_charge_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_charge_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas16.Draw()\n",
    "canvasas['16'] = canvas16\n",
    "\n",
    "canvas17 = ROOT.TCanvas(\"c_leading_isolated_electron_pt_after_met_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_electron_pt_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_electron_pt_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_electron_pt_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas17.Draw()\n",
    "canvasas['17'] = canvas17\n",
    "\n",
    "canvas18 = ROOT.TCanvas(\"c_leading_isolated_electron_eta_after_met_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_electron_eta_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_electron_eta_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_electron_eta_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas18.Draw()\n",
    "canvasas['18'] = canvas18\n",
    "\n",
    "canvas19 = ROOT.TCanvas(\"c_leading_isolated_electron_phi_after_met_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_electron_phi_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_electron_phi_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_electron_phi_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas19.Draw()\n",
    "canvasas['19'] = canvas19\n",
    "\n",
    "canvas20 = ROOT.TCanvas(\"c_leading_isolated_electron_mass_after_met_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_electron_mass_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_electron_mass_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_electron_mass_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas20.Draw()\n",
    "canvasas['20'] = canvas20\n",
    "\n",
    "canvas21 = ROOT.TCanvas(\"c_leading_isolated_electron_charge_after_met_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_electron_charge_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_electron_charge_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_electron_charge_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas21.Draw()\n",
    "canvasas['21'] = canvas21\n",
    "\n",
    "canvas22 = ROOT.TCanvas(\"c_number_of_jets_initial\", \"\", 800, 800)\n",
    "RealData[\"number_of_jets_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"number_of_jets_initial\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"number_of_jets_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas22.Draw()\n",
    "canvasas['22'] = canvas22\n",
    "\n",
    "canvas23 = ROOT.TCanvas(\"c_number_of_jets\", \"\", 800, 800)\n",
    "RealData[\"number_of_jets\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"number_of_jets\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"number_of_jets\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas23.Draw()\n",
    "canvasas['23'] = canvas23\n",
    "\n",
    "canvas24 = ROOT.TCanvas(\"c_leading_isolated_muon_pt_after_jet_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_pt_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_pt_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_pt_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas24.Draw()\n",
    "canvasas['24'] = canvas24\n",
    "\n",
    "canvas25 = ROOT.TCanvas(\"c_leading_isolated_muon_eta_after_jet_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_eta_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_eta_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_eta_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas25.Draw()\n",
    "canvasas['25'] = canvas25\n",
    "\n",
    "canvas26 = ROOT.TCanvas(\"c_leading_isolated_muon_phi_after_jet_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_phi_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_phi_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_phi_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas26.Draw()\n",
    "canvasas['26'] = canvas26\n",
    "\n",
    "canvas27 = ROOT.TCanvas(\"c_leading_isolated_muon_mass_after_jet_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_mass_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_mass_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_mass_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas27.Draw()\n",
    "canvasas['27'] = canvas27\n",
    "\n",
    "canvas28 = ROOT.TCanvas(\"c_leading_isolated_muon_charge_after_jet_cut\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_charge_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_charge_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_charge_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas28.Draw()\n",
    "canvasas['28'] = canvas28\n",
    "\n",
    "canvas29 = ROOT.TCanvas(\"c_number_of_jpsi_muons_initial\", \"\", 800, 800)\n",
    "RealData[\"number_of_jpsi_muons_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"number_of_jpsi_muons_initial\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"number_of_jpsi_muons_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas29.Draw()\n",
    "canvasas['29'] = canvas29\n",
    "\n",
    "canvas30 = ROOT.TCanvas(\"c_number_of_jpsi_muons\", \"\", 800, 800)\n",
    "RealData[\"number_of_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"number_of_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"number_of_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas30.Draw()\n",
    "canvasas['30'] = canvas30\n",
    "\n",
    "canvas31 = ROOT.TCanvas(\"c_leading_isolated_muon_pt\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_pt\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas31.Draw()\n",
    "canvasas['31'] = canvas31\n",
    "\n",
    "canvas32 = ROOT.TCanvas(\"c_leading_isolated_muon_eta\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_eta\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas32.Draw()\n",
    "canvasas['32'] = canvas32\n",
    "\n",
    "canvas33 = ROOT.TCanvas(\"c_leading_isolated_muon_phi\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_phi\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas33.Draw()\n",
    "canvasas['33'] = canvas33\n",
    "\n",
    "canvas34 = ROOT.TCanvas(\"c_leading_isolated_muon_charge\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_charge\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_charge\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_charge\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas34.Draw()\n",
    "canvasas['34'] = canvas34\n",
    "\n",
    "canvas35 = ROOT.TCanvas(\"c_jet1_pt\", \"\", 800, 800)\n",
    "RealData[\"jet1_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jet1_pt\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jet1_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas35.Draw()\n",
    "canvasas['35'] = canvas35\n",
    "\n",
    "canvas36 = ROOT.TCanvas(\"c_jet2_pt\", \"\", 800, 800)\n",
    "RealData[\"jet2_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jet2_pt\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jet2_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas36.Draw()\n",
    "canvasas['36'] = canvas36\n",
    "\n",
    "canvas37 = ROOT.TCanvas(\"c_jet1_eta\", \"\", 800, 800)\n",
    "RealData[\"jet1_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jet1_eta\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jet1_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas37.Draw()\n",
    "canvasas['37'] = canvas37\n",
    "\n",
    "canvas38 = ROOT.TCanvas(\"c_jet2_eta\", \"\", 800, 800)\n",
    "RealData[\"jet2_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jet2_eta\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jet2_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas38.Draw()\n",
    "canvasas['38'] = canvas38\n",
    "\n",
    "canvas39 = ROOT.TCanvas(\"c_jet1_phi\", \"\", 800, 800)\n",
    "RealData[\"jet1_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jet1_phi\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jet1_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas39.Draw()\n",
    "canvasas['39'] = canvas39\n",
    "\n",
    "canvas40 = ROOT.TCanvas(\"c_jet2_phi\", \"\", 800, 800)\n",
    "RealData[\"jet2_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jet2_phi\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jet2_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas40.Draw()\n",
    "canvasas['40'] = canvas40\n",
    "\n",
    "canvas41 = ROOT.TCanvas(\"c_transverse_mass\", \"\", 800, 800)\n",
    "RealData[\"transverse_mass\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"transverse_mass\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"transverse_mass\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas41.Draw()\n",
    "canvasas['41'] = canvas41\n",
    "\n",
    "canvas42 = ROOT.TCanvas(\"c_ht\", \"\", 800, 800)\n",
    "RealData[\"ht\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"ht\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"ht\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas42.Draw()\n",
    "canvasas['42'] = canvas42\n",
    "\n",
    "canvas43 = ROOT.TCanvas(\"c_jpsi_muons_pt\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muons_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muons_pt\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muons_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas43.Draw()\n",
    "canvasas['43'] = canvas43\n",
    "\n",
    "canvas44 = ROOT.TCanvas(\"c_jpsi_muons_eta\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muons_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muons_eta\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muons_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas44.Draw()\n",
    "canvasas['44'] = canvas44\n",
    "\n",
    "canvas45 = ROOT.TCanvas(\"c_jpsi_muons_phi\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muons_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muons_phi\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muons_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas45.Draw()\n",
    "canvasas['45'] = canvas45\n",
    "\n",
    "canvas46 = ROOT.TCanvas(\"c_jpsi_muons_charge\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muons_charge\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muons_charge\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muons_charge\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas46.Draw()\n",
    "canvasas['46'] = canvas46\n",
    "\n",
    "canvas47 = ROOT.TCanvas(\"c_invariant_mass_jpsi_muons\", \"\", 800, 800)\n",
    "RealData[\"invariant_mass_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"invariant_mass_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"invariant_mass_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas47.Draw()\n",
    "canvasas['47'] = canvas47\n",
    "\n",
    "canvas48 = ROOT.TCanvas(\"c_invariant_masses_zoomed\", \"\", 800, 800)\n",
    "RealData[\"invariant_masses_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"invariant_masses_zoomed\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"invariant_masses_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas48.Draw()\n",
    "canvasas['48'] = canvas48\n",
    "\n",
    "canvas49 = ROOT.TCanvas(\"c_invariant_mass_jpsi_and_isolated_muons\", \"\", 800, 800)\n",
    "RealData[\"invariant_mass_jpsi_and_isolated_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"invariant_mass_jpsi_and_isolated_muons\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"invariant_mass_jpsi_and_isolated_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas49.Draw()\n",
    "canvasas['49'] = canvas49\n",
    "\n",
    "canvas50 = ROOT.TCanvas(\"c_delta_eta_between_isolated_and_jpsi_muons\", \"\", 800, 800)\n",
    "RealData[\"delta_eta_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_eta_between_isolated_and_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_eta_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas50.Draw()\n",
    "canvasas['50'] = canvas50\n",
    "\n",
    "canvas51 = ROOT.TCanvas(\"c_delta_phi_between_isolated_and_jpsi_muons\", \"\", 800, 800)\n",
    "RealData[\"delta_phi_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_phi_between_isolated_and_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_phi_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas51.Draw()\n",
    "canvasas['51'] = canvas51\n",
    "\n",
    "canvas52 = ROOT.TCanvas(\"c_delta_r_between_isolated_and_jpsi_muons\", \"\", 800, 800)\n",
    "RealData[\"delta_r_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_r_between_isolated_and_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_r_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas52.Draw()\n",
    "canvasas['52'] = canvas52\n",
    "\n",
    "canvas53 = ROOT.TCanvas(\"c_jpsi_pt\", \"\", 800, 800)\n",
    "RealData[\"jpsi_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_pt\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas53.Draw()\n",
    "canvasas['53'] = canvas53\n",
    "\n",
    "canvas54 = ROOT.TCanvas(\"c_jpsi_eta\", \"\", 800, 800)\n",
    "RealData[\"jpsi_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_eta\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas54.Draw()\n",
    "canvasas['54'] = canvas54\n",
    "\n",
    "canvas55 = ROOT.TCanvas(\"c_jpsi_phi\", \"\", 800, 800)\n",
    "RealData[\"jpsi_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_phi\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas55.Draw()\n",
    "canvasas['55'] = canvas55\n",
    "\n",
    "canvas56 = ROOT.TCanvas(\"c_delta_eta_between_jpsi_muons\", \"\", 800, 800)\n",
    "RealData[\"delta_eta_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_eta_between_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_eta_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas56.Draw()\n",
    "canvasas['56'] = canvas56\n",
    "\n",
    "canvas57 = ROOT.TCanvas(\"c_delta_phi_between_jpsi_muons\", \"\", 800, 800)\n",
    "RealData[\"delta_phi_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_phi_between_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_phi_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas57.Draw()\n",
    "canvasas['57'] = canvas57\n",
    "\n",
    "canvas58 = ROOT.TCanvas(\"c_delta_r_between_jpsi_muons\", \"\", 800, 800)\n",
    "RealData[\"delta_r_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_r_between_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_r_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas58.Draw()\n",
    "canvasas['58'] = canvas58\n",
    "\n",
    "canvas59 = ROOT.TCanvas(\"c_delta_eta_between_isolated_muon_and_jpsi\", \"\", 800, 800)\n",
    "RealData[\"delta_eta_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_eta_between_isolated_muon_and_jpsi\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_eta_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas59.Draw()\n",
    "canvasas['59'] = canvas59\n",
    "\n",
    "canvas60 = ROOT.TCanvas(\"c_delta_phi_between_isolated_muon_and_jpsi\", \"\", 800, 800)\n",
    "RealData[\"delta_phi_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_phi_between_isolated_muon_and_jpsi\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_phi_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas60.Draw()\n",
    "canvasas['60'] = canvas60\n",
    "\n",
    "canvas61 = ROOT.TCanvas(\"c_delta_r_between_isolated_muon_and_jpsi\", \"\", 800, 800)\n",
    "RealData[\"delta_r_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_r_between_isolated_muon_and_jpsi\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_r_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas61.Draw()\n",
    "canvasas['61'] = canvas61\n",
    "\n",
    "canvas62 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"isolated_muon_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas62.Draw()\n",
    "canvasas['62'] = canvas62\n",
    "\n",
    "canvas63 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"isolated_muon_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas63.Draw()\n",
    "canvasas['63'] = canvas63\n",
    "\n",
    "canvas64 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_positive_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas64.Draw()\n",
    "canvasas['64'] = canvas64\n",
    "\n",
    "canvas65 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_positive_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas65.Draw()\n",
    "canvasas['65'] = canvas65\n",
    "\n",
    "canvas66 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_negative_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas66.Draw()\n",
    "canvasas['66'] = canvas66\n",
    "\n",
    "canvas67 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_negative_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas67.Draw()\n",
    "canvasas['67'] = canvas67\n",
    "\n",
    "canvas68 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_all_zoomed\", \"\", 800, 800)\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"isolated_muon_pf_rel_iso_03_all_zoomed\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas68.Draw()\n",
    "canvasas['68'] = canvas68\n",
    "\n",
    "canvas69 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_all_zoomed\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas69.Draw()\n",
    "canvasas['69'] = canvas69\n",
    "\n",
    "canvas70 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_all_zoomed\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas70.Draw()\n",
    "canvasas['70'] = canvas70\n",
    "\n",
    "canvas71 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_all_medium_id\", \"\", 800, 800)\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"isolated_muon_pf_rel_iso_03_all_medium_id\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas71.Draw()\n",
    "canvasas['71'] = canvas71\n",
    "\n",
    "canvas72 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\", \"\", 800, 800)\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas72.Draw()\n",
    "canvasas['72'] = canvas72\n",
    "\n",
    "canvas73 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_chg_medium_id\", \"\", 800, 800)\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas73.Draw()\n",
    "canvasas['73'] = canvas73\n",
    "\n",
    "canvas74 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_all_medium_id\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas74.Draw()\n",
    "canvasas['74'] = canvas74\n",
    "\n",
    "canvas75 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas75.Draw()\n",
    "canvasas['75'] = canvas75\n",
    "\n",
    "canvas76 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas76.Draw()\n",
    "canvasas['76'] = canvas76\n",
    "\n",
    "canvas77 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_all_medium_id\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas77.Draw()\n",
    "canvasas['77'] = canvas77\n",
    "\n",
    "canvas78 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas78.Draw()\n",
    "canvasas['78'] = canvas78\n",
    "\n",
    "canvas79 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas79.Draw()\n",
    "canvasas['79'] = canvas79\n",
    "\n",
    "canvas80 = ROOT.TCanvas(\"c_jpsi_muon_positive_peak_only_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas80.Draw()\n",
    "canvasas['80'] = canvas80\n",
    "\n",
    "canvas81 = ROOT.TCanvas(\"c_jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas81.Draw()\n",
    "canvasas['81'] = canvas81\n",
    "\n",
    "canvas82 = ROOT.TCanvas(\"c_jpsi_muon_negative_peak_only_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas82.Draw()\n",
    "canvasas['82'] = canvas82\n",
    "\n",
    "canvas83 = ROOT.TCanvas(\"c_jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas83.Draw()\n",
    "canvasas['83'] = canvas83\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "canvas84 = ROOT.TCanvas(\"c_further_muon_medium_tight_pt\", \"\", 800, 800)\n",
    "RealData[\"further_muon_medium_tight_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"further_muon_medium_tight_pt\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"further_muon_medium_tight_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas84.Draw()\n",
    "canvasas['84'] = canvas84\n",
    "\n",
    "canvas85 = ROOT.TCanvas(\"c_further_muon_medium_tight_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "RealData[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"further_muon_medium_tight_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas85.Draw()\n",
    "canvasas['85'] = canvas85\n",
    "\n",
    "canvas86 = ROOT.TCanvas(\"c_further_muon_medium_tight_pf_iso_id\", \"\", 800, 800)\n",
    "RealData[\"further_muon_medium_tight_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"further_muon_medium_tight_pf_iso_id\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"further_muon_medium_tight_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas86.Draw()\n",
    "canvasas['86'] = canvas86\n",
    "\n",
    "canvas87 = ROOT.TCanvas(\"c_further_muon_loose_tight_pt\", \"\", 800, 800)\n",
    "RealData[\"further_muon_loose_tight_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"further_muon_loose_tight_pt\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"further_muon_loose_tight_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas87.Draw()\n",
    "canvasas['87'] = canvas87\n",
    "\n",
    "canvas88 = ROOT.TCanvas(\"c_further_muon_loose_tight_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "RealData[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"further_muon_loose_tight_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas88.Draw()\n",
    "canvasas['88'] = canvas88\n",
    "\n",
    "canvas89 = ROOT.TCanvas(\"c_further_muon_loose_tight_pf_iso_id\", \"\", 800, 800)\n",
    "RealData[\"further_muon_loose_tight_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"further_muon_loose_tight_pf_iso_id\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"further_muon_loose_tight_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas89.Draw()\n",
    "canvasas['89'] = canvas89\n",
    "         \n",
    "canvas90 = ROOT.TCanvas(\"c_further_muon_medium_medium_pt\", \"\", 800, 800)\n",
    "RealData[\"further_muon_medium_medium_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"further_muon_medium_medium_pt\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"further_muon_medium_medium_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas90.Draw()\n",
    "canvasas['90'] = canvas90\n",
    "\n",
    "canvas91 = ROOT.TCanvas(\"c_further_muon_medium_medium_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "RealData[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"further_muon_medium_medium_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas91.Draw()\n",
    "canvasas['91'] = canvas91\n",
    "\n",
    "canvas92 = ROOT.TCanvas(\"c_further_muon_medium_medium_pf_iso_id\", \"\", 800, 800)\n",
    "RealData[\"further_muon_medium_medium_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"further_muon_medium_medium_pf_iso_id\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"further_muon_medium_medium_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas92.Draw()\n",
    "canvasas['92'] = canvas92\n",
    "\n",
    "canvas93 = ROOT.TCanvas(\"c_further_muon_loose_medium_pt\", \"\", 800, 800)\n",
    "RealData[\"further_muon_loose_medium_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"further_muon_loose_medium_pt\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"further_muon_loose_medium_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas93.Draw()\n",
    "canvasas['93'] = canvas93\n",
    "\n",
    "canvas94 = ROOT.TCanvas(\"c_further_muon_loose_medium_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "RealData[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"further_muon_loose_medium_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas94.Draw()\n",
    "canvasas['94'] = canvas94\n",
    "\n",
    "canvas95 = ROOT.TCanvas(\"c_further_muon_loose_medium_pf_iso_id\", \"\", 800, 800)\n",
    "RealData[\"further_muon_loose_medium_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"further_muon_loose_medium_pf_iso_id\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"further_muon_loose_medium_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas95.Draw()\n",
    "canvasas['95'] = canvas95"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Opening PDF\n",
      "Closing PDF\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Info in <TCanvas::Print>: pdf file Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf has been created using the current canvas\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf and file closed\n"
     ]
    }
   ],
   "source": [
    "for kn, k in enumerate(canvasas.keys()):\n",
    "    \n",
    "    if kn == 0:\n",
    "        print(\"Opening PDF\")\n",
    "        canvasas[k].SaveAs('Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf(')\n",
    "    \n",
    "    elif kn == len(canvasas) - 1:\n",
    "        print(\"Closing PDF\")\n",
    "        canvasas[k].SaveAs('Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf)')\n",
    "    \n",
    "    else:\n",
    "        canvasas[k].SaveAs('Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "era = \"2017\"\n",
    "channel = \"Mu\"\n",
    "\n",
    "def DrawStack(MonteCarlo, Data, separator = \"___\"):\n",
    "    era, channel, sample, variable, systematic = list(MonteCarlo.values())[0].GetName().split(separator)\n",
    "    name = \"_\".join([\"stack\", era, channel, variable, systematic])\n",
    "    colors = {\"TTToSemiLeptonic\" : ROOT.kRed}\n",
    "    stack = ROOT.THStack(name, \"\")\n",
    "    \n",
    "    canvas = ROOT.TCanvas(name.replace(\"stack\", \"canvas\"), \"\", 800, 800)\n",
    "  \n",
    "    \n",
    "    for sample, hist in MonteCarlo.items():\n",
    "        hist.SetFillColor(colors.get(sample, ROOT.kMagenta))\n",
    "        hist.SetLineColor(colors.get(sample, ROOT.kMagenta))\n",
    "        stack.Add(hist)\n",
    "        \n",
    "    aggregate = None\n",
    "    \n",
    "    for sample, hist in Data.items():\n",
    "        if aggregate == None:\n",
    "            aggregate = hist.Clone(hist.GetName().replace(\"sample\", \"allData\"))\n",
    "            \n",
    "        else:\n",
    "            aggregate += hist\n",
    "    \n",
    "    maxima = []\n",
    "    minima = []\n",
    "    maxima.append(stack.GetMaximum())\n",
    "    maxima.append(aggregate.GetMaximum())\n",
    "    minima.append(stack.GetMinimum())\n",
    "    minima.append(aggregate.GetMinimum())\n",
    "    \n",
    "    stack.SetMinimum(min(minima))\n",
    "    stack.SetMaximum(max(maxima))\n",
    "    \n",
    "    stack.Draw(\"HIST S\")\n",
    "    aggregate.Draw(\"PE1 SAME\")\n",
    "    \n",
    "    canvas.BuildLegend()\n",
    "    \n",
    "    return stack, aggregate, canvas\n",
    "\n",
    "for kn, variable in enumerate(variables):\n",
    "        \n",
    "    MonteCarlo, RealData = GetHistos(f, era, channel, variable)\n",
    "    \n",
    "    stack, aggregate, canvas = DrawStack(MonteCarlo, RealData)\n",
    "       \n",
    "    if kn == 0:\n",
    "        print(\"Opening PDF\")\n",
    "        canvas.SaveAs('December2.pdf(')\n",
    "\n",
    "    elif kn == len(variables) - 1:\n",
    "        print(\"Closing PDF\")\n",
    "        canvas.SaveAs('December2.pdf)')\n",
    "\n",
    "    else:\n",
    "        canvas.SaveAs('December2.pdf')\n",
    "        \n",
    "    canvas.SaveAs(variable + 'December2.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on _Helper in module _sitebuiltins object:\n",
      "\n",
      "class _Helper(builtins.object)\n",
      " |  Define the builtin 'help'.\n",
      " |  \n",
      " |  This is a wrapper around pydoc.help that provides a helpful message\n",
      " |  when 'help' is typed at the Python interactive prompt.\n",
      " |  \n",
      " |  Calling help() at the Python prompt starts an interactive help session.\n",
      " |  Calling help(thing) prints help for the python object 'thing'.\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  __call__(self, *args, **kwds)\n",
      " |      Call self as a function.\n",
      " |  \n",
      " |  __repr__(self)\n",
      " |      Return repr(self).\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors defined here:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(help)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
