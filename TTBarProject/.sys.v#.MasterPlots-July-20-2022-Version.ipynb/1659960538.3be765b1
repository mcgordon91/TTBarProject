{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.26/04\n"
     ]
    }
   ],
   "source": [
    "import ROOT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 41190\r\n",
      "-rw-r--r--. 1 migordon 1399   15708 Aug 18  2020 TTto2L2Nu.txt\r\n",
      "-rw-r--r--. 1 migordon 1399   41132 Aug 18  2020 TTToSemiLeptonic.txt\r\n",
      "-rw-r--r--. 1 migordon 1399   14492 Aug 25  2020 Plots.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   37773 Aug 27  2020 August26.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   34610 Sep  2  2020 FTFunctions.cpp\r\n",
      "-rw-r--r--. 1 migordon 1399    5774 Sep 21  2020 RealData\r\n",
      "-rw-r--r--. 1 migordon 1399   45563 Sep 23  2020 September9.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   45708 Sep 24  2020 September23MonteCarlo.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   46111 Sep 24  2020 September23RealData.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   48733 Oct  9  2020 October8MonteCarlo.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399     926 Oct 20  2020 graph.dot.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  145577 Oct 20  2020 October15.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   49188 Nov 11  2020 October8RealData.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  159946 Nov 23  2020 November12.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  159946 Nov 23  2020 November23.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  159946 Nov 24  2020 November24.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  114959 Dec  3  2020 December2.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  145516 Dec 10  2020 December10.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198313 Jan 19  2021 January18LooseID.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198153 Jan 21  2021 January21MediumID.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198536 Jan 21  2021 January21TightID.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198491 Jan 26  2021 January26WithVeto.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  197655 Jan 28  2021 January28WithVeto.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198647 Feb 23  2021 February16AtLeastOneVetoedMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  269832 Feb 23  2021 FirstTTreeAnalysisMonteCarlo-Backup.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  378821 Feb 23  2021 FirstTTreeAnalysisMonteCarlo-Backup-Jaunary-21-2021.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  198548 Feb 24  2021 February23ExactlyOneGoodMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198645 Feb 24  2021 February23AtLeastOneGoodMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  148905 Feb 24  2021 February23NoGoodMuons.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198461 Feb 24  2021 February24VetoedMuons.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  197977 Feb 25  2021 February25AtLeastOneGoodMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198084 Feb 25  2021 February25VetoedMuons.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  237095 Mar  7  2021 March2.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  273136 Mar  8  2021 March8.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  277452 May  2  2021 April27.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  383603 May  3  2021 May3.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  385981 May  5  2021 May4AtLeast4JetsAtLeast1BTagged.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399    7149 May  5  2021 WJetsToLNu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   46268 May  5  2021 2017_Mu_TTToSemiLeptonic.root\r\n",
      "-rw-r--r--. 1 migordon 1399   29677 May  5  2021 2017_Mu_WJetsToLNu.root\r\n",
      "-rw-r--r--. 1 migordon 1399  382235 May  5  2021 FirstTTreeAnalysisMonteCarlo2017Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   21530 May  5  2021 2017_Mu_Data.root\r\n",
      "-rw-r--r--. 1 migordon 1399  264376 May  6  2021 FirstTTreeAnalysisRealData2017Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399    7138 May  6  2021 TTToSemiLeptonic.dot\r\n",
      "-rw-r--r--. 1 migordon 1399    7261 May  6  2021 TTTo2L2Nu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399    7219 May  6  2021 graph.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   44070 May  6  2021 2018_Mu_TTToSemiLeptonic.root\r\n",
      "-rw-r--r--. 1 migordon 1399   44250 May  6  2021 2018_Mu_TTTo2L2Nu.root\r\n",
      "-rw-r--r--. 1 migordon 1399  388482 May  6  2021 May6.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  292166 May 12  2021 FirstTTreeAnalysisMonteCarlo2018Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  322266 May 12  2021 May11.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   34610 May 26  2021 TopMassFunctions.cpp\r\n",
      "-rw-r--r--. 1 migordon 1399   24558 Aug 19  2021 FirstTTreeAnalysis2018United-Backup.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399     427 Aug 24  2021 New_Combination.root\r\n",
      "-rw-r--r--. 1 migordon 1399  152243 Aug 25  2021 August25_50K_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  253643 Aug 25  2021 August25_500K_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  268165 Aug 26  2021 August25_1M_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  288466 Aug 26  2021 August25_3M_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  293684 Aug 26  2021 August25_5M_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   32517 Aug 30  2021 FirstTTreeAnalysis2018United-Backup-Copy1.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  308929 Aug 31  2021 August31.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  287815 Sep  1  2021 September1.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  165129 Sep  2  2021 FirstTTreeAnalysisRealData2018Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  342481 Sep  3  2021 September2.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  354661 Sep 21  2021 September21TightMedium.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  354301 Sep 21  2021 September21TightTight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  354485 Sep 21  2021 September22MediumTight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  568715 Sep 28  2021 MasterPlots-9-27-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  366143 Oct  1  2021 September30.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  608173 Oct  6  2021 MasterPlots-10-5-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  718643 Oct 20  2021 MasterPlots-10-20-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  460135 Oct 21  2021 October21.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  459750 Oct 28  2021 October26.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  469993 Nov 11  2021 November11.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  815942 Dec 20  2021 MasterPlots.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   35815 Jan  7  2022 FirstTTreeAnalysis2018United-AdditionalJPsi.py\r\n",
      "-rw-r--r--. 1 migordon 1399   48706 Jan  7  2022 FirstTTreeAnalysis2018United-AdditionalJPsi.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399 5254040 Jan  9  2022 FirstTTreeAnalysis2018United-AdditionalJPsi-OldCopy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   49408 Jan  9  2022 FirstTTreeAnalysis2018United-AdditionalJPsi-1-9-22-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   52579 Jan 10  2022 FirstTTreeAnalysis2018United-AdditionalJPsi-Late2021Fixes.py\r\n",
      "-rw-r--r--. 1 migordon 1399   22036 May  9 11:57 FirstTTreeAnalysis2018United.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   75336 May 14 12:09 May14_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  134983 May 26 14:41 May26_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  156426 Jun 13 14:42 June13_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   76628 Jun 13 16:00 FirstTTreeAnalysis2018United-AdditionalJPsi-Late2021Fixes.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   41767 Jun 13 17:53 FirstTTreeAnalysis2018United-AdditionalJPsi-10-20-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  317522 Jun 14 16:22 June14_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   39626 Jun 20 15:21 FirstTTreeAnalysis2018United-AdditionalJPsi-10-5-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   27369 Jun 20 16:49 FirstTTreeAnalysis2018United-AdditionalJPsi-10-5-21-Copy.py\r\n",
      "-rw-r--r--. 1 migordon 1399  115107 Jun 21 15:12 FirstTTreeAnalysis2018United-AdditionalJPsi-May_23_2022_Version.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  552871 Jun 21 16:25 MasterPlots-Late2021Fixes.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  461138 Jun 23 17:27 June23_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  267495 Jun 27 14:57 FirstTTreeAnalysisRealData-Backup-January-21-2021.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  472488 Jun 30 17:37 June30_2022_JPsiZoomed.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   32374 Jul  1 16:35 FirstTTreeAnalysis2018United-AdditionalJPsi-9-27-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   66434 Jul  1 23:03 FirstTTreeAnalysis2018United-AdditionalJPsi-June_20_2022_Version-Common-Filters-First.py\r\n",
      "-rw-r--r--. 1 migordon 1399   80894 Jul  3 13:20 FirstTTreeAnalysis2018United-AdditionalJPsi-June_20_2022_Version-Common-Filters-First.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  605767 Jul  3 20:45 July3_2022_MinimumFourJets.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  173470 Jul  4 12:49 MasterPlots-June-20-2022-Version.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  702825 Jul  4 13:22 July4_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  705989 Jul  5 09:55 July5_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   95925 Jul 10 23:20 FirstTTreeAnalysis2018United-AdditionalJPsi-July_10_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  776465 Jul 10 23:49 July10_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   97291 Jul 11 01:36 FirstTTreeAnalysis2018United-AdditionalJPsi-July_3_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   80141 Jul 11 01:38 FirstTTreeAnalysis2018United-AdditionalJPsi-July_3_2022.py\r\n",
      "-rw-r--r--. 1 migordon 1399   98358 Jul 11 02:56 TopQuark_JPsi_Analysis-July_11_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   80916 Jul 11 02:57 TopQuark_JPsi_Analysis-July_11_2022.py\r\n",
      "-rw-r--r--. 1 migordon 1399  769640 Jul 11 03:12 July11_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   95925 Jul 11 09:41 FirstTTreeAnalysis2018United-AdditionalJPsi-July_11_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  802986 Jul 11 10:35 July11_2022_a.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   77722 Jul 11 11:04 TopQuark_JPsi_Analysis-July_11_2022-Copy1.py\r\n",
      "-rw-r--r--. 1 migordon 1399  838420 Jul 11 11:30 July11_2022_b.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  900846 Jul 12 19:46 July12_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399 1057489 Jul 13 15:13 July13_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399 1049253 Jul 13 22:15 July13_2022_Isolated_Tight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   83308 Jul 17 18:38 Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  613179 Jul 20 08:43 MasterPlots-July-3-2022-Version.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   75405 Jul 20 12:46 Gordon_Michael_July_20_2022_Medium_Tight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   90076 Jul 21 07:24 Gordon_Michael_July_20_2022_Medium_Tight_Revised.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  535140 Jul 21 11:17 Gordon_Michael_July_21_2022_Medium_Tight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  927599 Jul 21 18:29 Gordon_Michael_July_21_2022_Medium_Tight_Revised.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  937378 Jul 21 19:27 Gordon_Michael_July_21_2022_Medium_Tight_Revised_Twice.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399 1008949 Jul 24 10:30 Gordon_Michael_July_24_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  626330 Jul 25 16:24 Gordon_Michael_July_25_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399 1284215 Aug  4 17:01 Gordon_Michael_August_4_2022_Negaverse_Plots.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  161217 Aug  5 13:23 Gordon_Michael_August_4_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  186912 Aug  8 12:07 TopQuark_JPsi_Analysis-July_12_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  157807 Aug  8 12:14 TopQuark_JPsi_Analysis-July_12_2022.py\r\n",
      "drwxr-xr-x. 2 migordon 1399    4096 Aug  8 12:15 __pycache__\r\n",
      "-rw-r--r--. 1 migordon 1399   19456 Aug  8 12:33 Data.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   32465 Aug  8 12:33 Data_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   19724 Aug  8 12:33 MonteCarloTTToSemiLeptonic.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   33693 Aug  8 12:33 MonteCarloTTToSemiLeptonic_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   19724 Aug  8 12:33 MonteCarloTTTo2L2Nu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   33693 Aug  8 12:33 MonteCarloTTTo2L2Nu_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   19724 Aug  8 12:33 MonteCarloWJetsToLNu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   33693 Aug  8 12:33 MonteCarloWJetsToLNu_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   19724 Aug  8 12:33 MonteCarloST_tW_top.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   33693 Aug  8 12:33 MonteCarloST_tW_top_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   20149 Aug  8 12:33 MonteCarloST_tchannel_top.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   33693 Aug  8 12:33 MonteCarloST_tchannel_top_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   74116 Aug  8 12:38 2018_Mu_Data.root\r\n",
      "-rw-r--r--. 1 migordon 1399  135452 Aug  8 12:41 2018_Mu_MonteCarloTTToSemiLeptonic.root\r\n",
      "-rw-r--r--. 1 migordon 1399  134087 Aug  8 12:42 2018_Mu_MonteCarloTTTo2L2Nu.root\r\n",
      "-rw-r--r--. 1 migordon 1399  105240 Aug  8 12:43 2018_Mu_MonteCarloWJetsToLNu.root\r\n",
      "-rw-r--r--. 1 migordon 1399   71619 Aug  8 12:43 2018_Mu_MonteCarloST_tW_top.root\r\n",
      "-rw-r--r--. 1 migordon 1399   83746 Aug  8 12:43 2018_Mu_MonteCarloST_tchannel_top.root\r\n",
      "-rw-r--r--. 1 migordon 1399  586274 Aug  8 12:43 Combination.root_backup\r\n",
      "-rw-r--r--. 1 migordon 1399  586274 Aug  8 12:45 Combination.root\r\n",
      "-rw-r--r--. 1 migordon 1399  308343 Aug  8 12:45 MasterPlots-July-20-2022-Version.ipynb\r\n"
     ]
    }
   ],
   "source": [
    "!ls -ltr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hadd Target file: Combination.root\n",
      "hadd compression setting for all output: 1\n",
      "hadd Source file 1: 2018_Mu_Data.root\n",
      "hadd Source file 2: 2018_Mu_MonteCarloTTToSemiLeptonic.root\n",
      "hadd Source file 3: 2018_Mu_MonteCarloTTTo2L2Nu.root\n",
      "hadd Source file 4: 2018_Mu_MonteCarloWJetsToLNu.root\n",
      "hadd Source file 5: 2018_Mu_MonteCarloST_tW_top.root\n",
      "hadd Source file 6: 2018_Mu_MonteCarloST_tchannel_top.root\n",
      "hadd Target path: Combination.root:/\n"
     ]
    }
   ],
   "source": [
    "!mv Combination.root Combination.root_backup\n",
    "!hadd -f Combination.root 2018_Mu_Data.root 2018_Mu_MonteCarloTTToSemiLeptonic.root 2018_Mu_MonteCarloTTTo2L2Nu.root 2018_Mu_MonteCarloWJetsToLNu.root 2018_Mu_MonteCarloST_tW_top.root 2018_Mu_MonteCarloST_tchannel_top.root"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2018___Mu___Data___leading_isolated_muon_pt_initial___nominal', '2018___Mu___Data___leading_isolated_muon_eta_initial___nominal', '2018___Mu___Data___leading_isolated_muon_phi_initial___nominal', '2018___Mu___Data___leading_isolated_muon_mass_initial___nominal', '2018___Mu___Data___leading_isolated_muon_charge_initial___nominal', '2018___Mu___Data___leading_isolated_electron_pt_initial___nominal', '2018___Mu___Data___leading_isolated_electron_eta_initial___nominal', '2018___Mu___Data___leading_isolated_electron_phi_initial___nominal', '2018___Mu___Data___leading_isolated_electron_mass_initial___nominal', '2018___Mu___Data___leading_isolated_electron_charge_initial___nominal', '2018___Mu___Data___met_before_met_cut___nominal', '2018___Mu___Data___met_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___Data___number_of_jets_initial___nominal', '2018___Mu___Data___number_of_jets___nominal', '2018___Mu___Data___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___Data___number_of_jpsi_muons_initial___nominal', '2018___Mu___Data___number_of_jpsi_muons___nominal', '2018___Mu___Data___leading_isolated_muon_pt___nominal', '2018___Mu___Data___leading_isolated_muon_eta___nominal', '2018___Mu___Data___leading_isolated_muon_phi___nominal', '2018___Mu___Data___leading_isolated_muon_mass___nominal', '2018___Mu___Data___leading_isolated_muon_charge___nominal', '2018___Mu___Data___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___Data___jet1_pt___nominal', '2018___Mu___Data___jet2_pt___nominal', '2018___Mu___Data___jet1_eta___nominal', '2018___Mu___Data___jet2_eta___nominal', '2018___Mu___Data___jet1_phi___nominal', '2018___Mu___Data___jet2_phi___nominal', '2018___Mu___Data___transverse_mass___nominal', '2018___Mu___Data___ht___nominal', '2018___Mu___Data___jpsi_muons_pt___nominal', '2018___Mu___Data___jpsi_muons_eta___nominal', '2018___Mu___Data___jpsi_muons_phi___nominal', '2018___Mu___Data___jpsi_muons_charge___nominal', '2018___Mu___Data___invariant_mass_jpsi_muons___nominal', '2018___Mu___Data___invariant_masses_zoomed___nominal', '2018___Mu___Data___invariant_mass_jpsi_muons_and_isolated_muons___nominal', '2018___Mu___Data___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___jpsi_pt___nominal', '2018___Mu___Data___jpsi_eta___nominal', '2018___Mu___Data___jpsi_phi___nominal', '2018___Mu___Data___delta_eta_between_jpsi_muons___nominal', '2018___Mu___Data___delta_phi_between_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___Data___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___jpsi_muon_pt___nominal', '2018___Mu___Data___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___Data___jpsi_muon_pf_iso_id___nominal', '2018___Mu___Data___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___Data___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___Data___jpsi_mass_muons_in_range___nominal', '2018___Mu___Data___pt_at_low_delta_r___nominal', '2018___Mu___Data___jpsi_mass_in_peak___nominal', '2018___Mu___Data___delta_eta_for_jpsi_muons_in_peak___nominal', '2018___Mu___Data___delta_phi_for_jpsi_muons_in_peak___nominal', '2018___Mu___Data___delta_r_for_jpsi_muons_in_peak___nominal', '2018___Mu___Data___jpsi_muons_charge_in_peak___nominal', '2018___Mu___Data___jpsi_pt_with_muon_in_peak___nominal', '2018___Mu___Data___jpsi_muon_pts_in_peak___nominal', '2018___Mu___Data___jpsi_muon_isolation_in_peak___nominal', '2018___Mu___Data___top_mass_in_peak___nominal', '2018___Mu___Data___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___Data___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___Data___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___met_before_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___met_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___transverse_mass___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___ht___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_muons_and_isolated_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_mass_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_charge_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_pt_with_muon_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pts_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_isolation_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___top_mass_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___met_before_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___met_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___transverse_mass___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___ht___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_muons_and_isolated_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_mass_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_charge_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_pt_with_muon_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pts_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_isolation_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___top_mass_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___met_before_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___met_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jets_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jets___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___transverse_mass___nominal', '2018___Mu___MonteCarloWJetsToLNu___ht___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_muons_and_isolated_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloWJetsToLNu___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_mass_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_charge_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_pt_with_muon_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pts_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_isolation_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___top_mass_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloST_tW_top___met_before_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___met_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jets_initial___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jets___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_phi___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_phi___nominal', '2018___Mu___MonteCarloST_tW_top___transverse_mass___nominal', '2018___Mu___MonteCarloST_tW_top___ht___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_muons_and_isolated_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_phi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloST_tW_top___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_mass_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_charge_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_pt_with_muon_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_pts_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_isolation_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___top_mass_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___met_before_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___met_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jets_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jets___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___transverse_mass___nominal', '2018___Mu___MonteCarloST_tchannel_top___ht___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_muons_and_isolated_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloST_tchannel_top___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_mass_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_charge_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_pt_with_muon_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pts_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_isolation_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___top_mass_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal']\n"
     ]
    }
   ],
   "source": [
    "f = ROOT.TFile.Open('Combination.root', 'read')\n",
    "k = [ff.GetName() for ff in f.GetListOfKeys()]\n",
    "print(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "eras = list(set([kk.split(\"___\")[0] for kk in k]))\n",
    "channels = list(set([kk.split(\"___\")[1] for kk in k]))\n",
    "samples = list(set([kk.split(\"___\")[2] for kk in k]))\n",
    "variables = list(set([kk.split(\"___\")[3] for kk in k]))\n",
    "systematics = list(set([kk.split(\"___\")[4] for kk in k]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2018']\n",
      "['Mu']\n",
      "['MonteCarloTTToSemiLeptonic', 'Data', 'MonteCarloTTTo2L2Nu', 'MonteCarloWJetsToLNu', 'MonteCarloST_tchannel_top', 'MonteCarloST_tW_top']\n",
      "['jpsi_muon_pt', 'invariant_masses_zoomed', 'jet1_pt', 'transverse_mass', 'jet2_eta', 'jpsi_pt_with_muon_in_peak', 'met_after_met_cut', 'leading_isolated_muon_eta', 'leading_isolated_muon_pt_initial', 'delta_phi_for_jpsi_muons_in_peak', 'jet2_phi', 'jet2_pt', 'isolated_muon_pf_rel_iso_03_all', 'invariant_mass_jpsi_muons', 'delta_r_between_isolated_and_jpsi_muons', 'delta_r_between_jpsi_muons_in_peak', 'number_of_jets', 'jpsi_mass_in_peak', 'leading_isolated_muon_eta_initial', 'jpsi_muons_phi', 'delta_r_between_jpsi_muons', 'invariant_mass_jpsi_muons_and_isolated_muons', 'jpsi_muons_eta', 'jpsi_muon_isolation_in_peak', 'delta_r_for_jpsi_muons_in_peak', 'jpsi_muon_pf_iso_id', 'top_mass_in_peak', 'jpsi_mass_muons_in_range', 'delta_r_between_isolated_muon_and_jpsi_in_peak', 'leading_isolated_muon_phi_initial', 'leading_isolated_muon_phi', 'leading_isolated_muon_pt_after_met_cut', 'jpsi_muon_pts_in_peak', 'leading_isolated_muon_eta_after_jet_cut', 'isolated_muons_in_range_pfRelIso03_all', 'pt_at_low_delta_r', 'number_of_jets_initial', 'leading_isolated_electron_phi_after_met_cut', 'delta_phi_between_isolated_muon_and_jpsi_in_peak', 'leading_isolated_electron_pt_initial', 'leading_isolated_muon_charge_initial', 'leading_isolated_muon_pt_after_jet_cut', 'leading_isolated_electron_eta_after_met_cut', 'delta_eta_for_jpsi_muons_in_peak', 'ht', 'leading_isolated_muon_mass_after_jet_cut', 'delta_eta_between_isolated_and_jpsi_muons', 'leading_isolated_muon_charge_after_met_cut', 'jpsi_muons_in_range_pfRelIso03_all', 'delta_phi_between_jpsi_muons', 'jpsi_muon_pf_rel_iso_03_all', 'delta_r_between_isolated_muon_and_jpsi', 'jpsi_eta', 'leading_isolated_muon_mass_initial', 'leading_isolated_muon_charge', 'delta_eta_between_jpsi_muons', 'leading_isolated_electron_mass_after_met_cut', 'jet1_eta', 'jet1_phi', 'leading_isolated_muon_phi_after_met_cut', 'met_before_met_cut', 'leading_isolated_electron_mass_initial', 'jpsi_muons_pt', 'delta_phi_between_isolated_muon_and_jpsi', 'leading_isolated_muon_pt', 'leading_isolated_electron_phi_initial', 'delta_phi_between_isolated_and_jpsi_muons', 'number_of_jpsi_muons', 'jpsi_muons_charge_in_peak', 'leading_isolated_electron_eta_initial', 'number_of_jpsi_muons_initial', 'leading_isolated_muon_phi_after_jet_cut', 'leading_isolated_muon_eta_after_met_cut', 'leading_isolated_muon_mass', 'leading_isolated_muon_mass_after_met_cut', 'leading_isolated_electron_charge_after_met_cut', 'jpsi_phi', 'leading_isolated_electron_charge_initial', 'jpsi_muons_charge', 'leading_isolated_muon_charge_after_jet_cut', 'delta_eta_between_isolated_muon_and_jpsi', 'delta_eta_between_isolated_muon_and_jpsi_in_peak', 'jpsi_pt', 'leading_isolated_electron_pt_after_met_cut']\n",
      "['nominal']\n"
     ]
    }
   ],
   "source": [
    "print(eras)\n",
    "print(channels)\n",
    "print(samples)\n",
    "print(variables)\n",
    "print(systematics)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def GetHistos(f, era, channel, variable, systematic = \"nominal\", separator = \"___\"):\n",
    "    \n",
    "    MC = dict()\n",
    "    Data = dict()\n",
    "    \n",
    "    k = [ff.GetName() for ff in f.GetListOfKeys()]\n",
    "    print(k)\n",
    "    k = [kk for kk in k if era == kk.split(separator)[0]]\n",
    "    k = [kk for kk in k if channel == kk.split(separator)[1]]\n",
    "    k = [kk for kk in k if variable == kk.split(separator)[3]]\n",
    "    k = [kk for kk in k if systematic == kk.split(separator)[4]]\n",
    "    \n",
    "    for kk in k:\n",
    "        sample = kk.split(separator)[2]\n",
    "        \n",
    "        if \"data\" in sample.lower():\n",
    "            Data[sample] = f.Get(kk)\n",
    "            print(\"Data\")\n",
    "            \n",
    "        else:\n",
    "            MC[sample] = f.Get(kk)\n",
    "            print(sample)\n",
    "            \n",
    "    return MC, Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2018___Mu___Data___leading_isolated_muon_pt_initial___nominal', '2018___Mu___Data___leading_isolated_muon_eta_initial___nominal', '2018___Mu___Data___leading_isolated_muon_phi_initial___nominal', '2018___Mu___Data___leading_isolated_muon_mass_initial___nominal', '2018___Mu___Data___leading_isolated_muon_charge_initial___nominal', '2018___Mu___Data___leading_isolated_electron_pt_initial___nominal', '2018___Mu___Data___leading_isolated_electron_eta_initial___nominal', '2018___Mu___Data___leading_isolated_electron_phi_initial___nominal', '2018___Mu___Data___leading_isolated_electron_mass_initial___nominal', '2018___Mu___Data___leading_isolated_electron_charge_initial___nominal', '2018___Mu___Data___met_before_met_cut___nominal', '2018___Mu___Data___met_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___Data___number_of_jets_initial___nominal', '2018___Mu___Data___number_of_jets___nominal', '2018___Mu___Data___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___Data___number_of_jpsi_muons_initial___nominal', '2018___Mu___Data___number_of_jpsi_muons___nominal', '2018___Mu___Data___leading_isolated_muon_pt___nominal', '2018___Mu___Data___leading_isolated_muon_eta___nominal', '2018___Mu___Data___leading_isolated_muon_phi___nominal', '2018___Mu___Data___leading_isolated_muon_mass___nominal', '2018___Mu___Data___leading_isolated_muon_charge___nominal', '2018___Mu___Data___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___Data___jet1_pt___nominal', '2018___Mu___Data___jet2_pt___nominal', '2018___Mu___Data___jet1_eta___nominal', '2018___Mu___Data___jet2_eta___nominal', '2018___Mu___Data___jet1_phi___nominal', '2018___Mu___Data___jet2_phi___nominal', '2018___Mu___Data___transverse_mass___nominal', '2018___Mu___Data___ht___nominal', '2018___Mu___Data___jpsi_muons_pt___nominal', '2018___Mu___Data___jpsi_muons_eta___nominal', '2018___Mu___Data___jpsi_muons_phi___nominal', '2018___Mu___Data___jpsi_muons_charge___nominal', '2018___Mu___Data___invariant_mass_jpsi_muons___nominal', '2018___Mu___Data___invariant_masses_zoomed___nominal', '2018___Mu___Data___invariant_mass_jpsi_muons_and_isolated_muons___nominal', '2018___Mu___Data___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___jpsi_pt___nominal', '2018___Mu___Data___jpsi_eta___nominal', '2018___Mu___Data___jpsi_phi___nominal', '2018___Mu___Data___delta_eta_between_jpsi_muons___nominal', '2018___Mu___Data___delta_phi_between_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___Data___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___jpsi_muon_pt___nominal', '2018___Mu___Data___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___Data___jpsi_muon_pf_iso_id___nominal', '2018___Mu___Data___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___Data___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___Data___jpsi_mass_muons_in_range___nominal', '2018___Mu___Data___pt_at_low_delta_r___nominal', '2018___Mu___Data___jpsi_mass_in_peak___nominal', '2018___Mu___Data___delta_eta_for_jpsi_muons_in_peak___nominal', '2018___Mu___Data___delta_phi_for_jpsi_muons_in_peak___nominal', '2018___Mu___Data___delta_r_for_jpsi_muons_in_peak___nominal', '2018___Mu___Data___jpsi_muons_charge_in_peak___nominal', '2018___Mu___Data___jpsi_pt_with_muon_in_peak___nominal', '2018___Mu___Data___jpsi_muon_pts_in_peak___nominal', '2018___Mu___Data___jpsi_muon_isolation_in_peak___nominal', '2018___Mu___Data___top_mass_in_peak___nominal', '2018___Mu___Data___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___Data___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___Data___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___met_before_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___met_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___transverse_mass___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___ht___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_muons_and_isolated_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_mass_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_charge_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_pt_with_muon_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pts_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_isolation_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___top_mass_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___met_before_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___met_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___transverse_mass___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___ht___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_muons_and_isolated_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_mass_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_charge_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_pt_with_muon_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pts_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_isolation_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___top_mass_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___met_before_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___met_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jets_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jets___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___transverse_mass___nominal', '2018___Mu___MonteCarloWJetsToLNu___ht___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_muons_and_isolated_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloWJetsToLNu___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_mass_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_charge_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_pt_with_muon_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pts_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_isolation_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___top_mass_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloST_tW_top___met_before_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___met_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jets_initial___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jets___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_phi___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_phi___nominal', '2018___Mu___MonteCarloST_tW_top___transverse_mass___nominal', '2018___Mu___MonteCarloST_tW_top___ht___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_muons_and_isolated_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_phi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloST_tW_top___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_mass_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_charge_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_pt_with_muon_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_pts_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_isolation_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___top_mass_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___met_before_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___met_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jets_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jets___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___transverse_mass___nominal', '2018___Mu___MonteCarloST_tchannel_top___ht___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_muons_and_isolated_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloST_tchannel_top___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_mass_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_for_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_charge_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_pt_with_muon_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pts_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_isolation_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___top_mass_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal']\n",
      "{} {}\n"
     ]
    }
   ],
   "source": [
    "x, y = GetHistos(f, \"2018\", \"Mu\", \"mu_pt\")\n",
    "print(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#Load histograms from file(s)\n",
    "MonteCarlo = dict()\n",
    "RealData = dict()\n",
    "\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"] = dict()\n",
    "MonteCarlo[\"met_before_met_cut\"] = dict()\n",
    "MonteCarlo[\"met_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"number_of_jets_initial\"] = dict()\n",
    "MonteCarlo[\"number_of_jets\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"] = dict()\n",
    "MonteCarlo[\"number_of_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"] = dict()\n",
    "MonteCarlo[\"jet1_pt\"] = dict()\n",
    "MonteCarlo[\"jet2_pt\"] = dict()\n",
    "MonteCarlo[\"jet1_eta\"] = dict()\n",
    "MonteCarlo[\"jet2_eta\"] = dict()\n",
    "MonteCarlo[\"jet1_phi\"] = dict()\n",
    "MonteCarlo[\"jet2_phi\"] = dict()\n",
    "MonteCarlo[\"transverse_mass\"] = dict()\n",
    "MonteCarlo[\"ht\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_pt\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_eta\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_phi\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_charge\"] = dict()\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"invariant_masses_zoomed\"] = dict()\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons_and_isolated_muons\"] = dict()\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"jpsi_pt\"] = dict()\n",
    "MonteCarlo[\"jpsi_eta\"] = dict()\n",
    "MonteCarlo[\"jpsi_phi\"] = dict()\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons_in_peak\"] = dict()\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"] = dict()\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"] = dict()\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_pt\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_pf_rel_iso_03_all\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_pf_iso_id\"] = dict()\n",
    "MonteCarlo[\"isolated_muons_in_range_pfRelIso03_all\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_in_range_pfRelIso03_all\"] = dict()\n",
    "MonteCarlo[\"jpsi_mass_muons_in_range\"] = dict()\n",
    "MonteCarlo[\"pt_at_low_delta_r\"] = dict()\n",
    "MonteCarlo[\"jpsi_mass_in_peak\"] = dict()\n",
    "MonteCarlo[\"delta_eta_for_jpsi_muons_in_peak\"] = dict()\n",
    "MonteCarlo[\"delta_phi_for_jpsi_muons_in_peak\"] = dict()\n",
    "MonteCarlo[\"delta_r_for_jpsi_muons_in_peak\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_charge_in_peak\"] = dict()\n",
    "MonteCarlo[\"jpsi_pt_with_muon_in_peak\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_pts_in_peak\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_isolation_in_peak\"] = dict()\n",
    "MonteCarlo[\"top_mass_in_peak\"] = dict()\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi_in_peak\"] = dict()\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi_in_peak\"] = dict()\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi_in_peak\"] = dict()\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"] = dict()\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"] = dict()\n",
    "# MonteCarlo[\"further_muon_medium_tight_pt\"] = dict()\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"] = dict()\n",
    "# MonteCarlo[\"further_muon_loose_tight_pt\"] = dict()\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"] = dict()\n",
    "# MonteCarlo[\"further_muon_medium_medium_pt\"] = dict()\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"] = dict()\n",
    "# MonteCarlo[\"further_muon_loose_medium_pt\"] = dict()\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"] = dict()\n",
    "\n",
    "\n",
    "\n",
    "RealData[\"leading_isolated_muon_pt_initial\"] = dict()\n",
    "RealData[\"leading_isolated_muon_eta_initial\"] = dict()\n",
    "RealData[\"leading_isolated_muon_phi_initial\"] = dict()\n",
    "RealData[\"leading_isolated_muon_mass_initial\"] = dict()\n",
    "RealData[\"leading_isolated_muon_charge_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_pt_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_eta_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_phi_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_mass_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_charge_initial\"] = dict()\n",
    "RealData[\"met_before_met_cut\"] = dict()\n",
    "RealData[\"met_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_pt_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_eta_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_phi_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_mass_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_charge_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_pt_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_eta_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_phi_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_mass_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_charge_after_met_cut\"] = dict()\n",
    "RealData[\"number_of_jets_initial\"] = dict()\n",
    "RealData[\"number_of_jets\"] = dict()\n",
    "RealData[\"leading_isolated_muon_pt_after_jet_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_eta_after_jet_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_phi_after_jet_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_mass_after_jet_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_charge_after_jet_cut\"] = dict()\n",
    "RealData[\"number_of_jpsi_muons_initial\"] = dict()\n",
    "RealData[\"number_of_jpsi_muons\"] = dict()\n",
    "RealData[\"leading_isolated_muon_pt\"] = dict()\n",
    "RealData[\"leading_isolated_muon_eta\"] = dict()\n",
    "RealData[\"leading_isolated_muon_phi\"] = dict()\n",
    "RealData[\"leading_isolated_muon_mass\"] = dict()\n",
    "RealData[\"leading_isolated_muon_charge\"] = dict()\n",
    "RealData[\"jet1_pt\"] = dict()\n",
    "RealData[\"jet2_pt\"] = dict()\n",
    "RealData[\"jet1_eta\"] = dict()\n",
    "RealData[\"jet2_eta\"] = dict()\n",
    "RealData[\"jet1_phi\"] = dict()\n",
    "RealData[\"jet2_phi\"] = dict()\n",
    "RealData[\"transverse_mass\"] = dict()\n",
    "RealData[\"ht\"] = dict()\n",
    "RealData[\"jpsi_muons_pt\"] = dict()\n",
    "RealData[\"jpsi_muons_eta\"] = dict()\n",
    "RealData[\"jpsi_muons_phi\"] = dict()\n",
    "RealData[\"jpsi_muons_charge\"] = dict()\n",
    "RealData[\"invariant_mass_jpsi_muons\"] = dict()\n",
    "RealData[\"invariant_masses_zoomed\"] = dict()\n",
    "RealData[\"invariant_mass_jpsi_muons_and_isolated_muons\"] = dict()\n",
    "RealData[\"delta_eta_between_isolated_and_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_phi_between_isolated_and_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_r_between_isolated_and_jpsi_muons\"] = dict()\n",
    "RealData[\"jpsi_pt\"] = dict()\n",
    "RealData[\"jpsi_eta\"] = dict()\n",
    "RealData[\"jpsi_phi\"] = dict()\n",
    "RealData[\"delta_eta_between_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_phi_between_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_r_between_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_r_between_jpsi_muons_in_peak\"] = dict()\n",
    "RealData[\"delta_eta_between_isolated_muon_and_jpsi\"] = dict()\n",
    "RealData[\"delta_phi_between_isolated_muon_and_jpsi\"] = dict()\n",
    "RealData[\"delta_r_between_isolated_muon_and_jpsi\"] = dict()\n",
    "RealData[\"jpsi_muon_pt\"] = dict()\n",
    "RealData[\"jpsi_muon_pf_rel_iso_03_all\"] = dict()\n",
    "RealData[\"jpsi_muon_pf_iso_id\"] = dict()\n",
    "RealData[\"isolated_muons_in_range_pfRelIso03_all\"] = dict()\n",
    "RealData[\"jpsi_muons_in_range_pfRelIso03_all\"] = dict()\n",
    "RealData[\"jpsi_mass_muons_in_range\"] = dict()\n",
    "RealData[\"pt_at_low_delta_r\"] = dict()\n",
    "RealData[\"jpsi_mass_in_peak\"] = dict()\n",
    "RealData[\"delta_eta_for_jpsi_muons_in_peak\"] = dict()\n",
    "RealData[\"delta_phi_for_jpsi_muons_in_peak\"] = dict()\n",
    "RealData[\"delta_r_for_jpsi_muons_in_peak\"] = dict()\n",
    "RealData[\"jpsi_muons_charge_in_peak\"] = dict()\n",
    "RealData[\"jpsi_pt_with_muon_in_peak\"] = dict()\n",
    "RealData[\"jpsi_muon_pts_in_peak\"] = dict()\n",
    "RealData[\"jpsi_muon_isolation_in_peak\"] = dict()\n",
    "RealData[\"top_mass_in_peak\"] = dict()\n",
    "RealData[\"delta_eta_between_isolated_muon_and_jpsi_in_peak\"] = dict()\n",
    "RealData[\"delta_phi_between_isolated_muon_and_jpsi_in_peak\"] = dict()\n",
    "RealData[\"delta_r_between_isolated_muon_and_jpsi_in_peak\"] = dict()\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg\"] = dict()\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"] = dict()\n",
    "# RealData[\"further_muon_medium_tight_pt\"] = dict()\n",
    "# RealData[\"further_muon_medium_tight_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"further_muon_medium_tight_pf_iso_id\"] = dict()\n",
    "# RealData[\"further_muon_loose_tight_pt\"] = dict()\n",
    "# RealData[\"further_muon_loose_tight_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"further_muon_loose_tight_pf_iso_id\"] = dict()\n",
    "# RealData[\"further_muon_medium_medium_pt\"] = dict()\n",
    "# RealData[\"further_muon_medium_medium_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"further_muon_medium_medium_pf_iso_id\"] = dict()\n",
    "# RealData[\"further_muon_loose_medium_pt\"] = dict()\n",
    "# RealData[\"further_muon_loose_medium_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"further_muon_loose_medium_pf_iso_id\"] = dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_pt_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_eta_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_phi_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_mass_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_mass_initial___nominal\") \n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_charge_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_pt_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_eta_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_phi_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_mass_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_mass_initial___nominal\") \n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_charge_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___met_before_met_cut___nominal\")\n",
    "RealData[\"met_before_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___met_after_met_cut___nominal\")\n",
    "RealData[\"met_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_pt_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_eta_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_phi_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_mass_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_mass_after_met_cut___nominal\") \n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_charge_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_pt_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_eta_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_phi_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_mass_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_mass_after_met_cut___nominal\") \n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_charge_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___number_of_jets_initial___nominal\")\n",
    "RealData[\"number_of_jets_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___number_of_jets___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___number_of_jets___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___number_of_jets___nominal\")\n",
    "RealData[\"number_of_jets\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___number_of_jets___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_pt_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_eta_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_phi_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_mass_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_mass_after_jet_cut___nominal\") \n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_charge_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons_initial___nominal\")\n",
    "RealData[\"number_of_jpsi_muons_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons___nominal\")\n",
    "RealData[\"number_of_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt___nominal\")\n",
    "RealData[\"leading_isolated_muon_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta___nominal\")\n",
    "RealData[\"leading_isolated_muon_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi___nominal\")\n",
    "RealData[\"leading_isolated_muon_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass___nominal\")\n",
    "RealData[\"leading_isolated_muon_mass\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_mass___nominal\") \n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge___nominal\")\n",
    "RealData[\"leading_isolated_muon_charge\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet1_pt___nominal\")\n",
    "RealData[\"jet1_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet2_pt___nominal\")\n",
    "RealData[\"jet2_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet1_eta___nominal\")\n",
    "RealData[\"jet1_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet2_eta___nominal\")\n",
    "RealData[\"jet2_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet1_phi___nominal\")\n",
    "RealData[\"jet1_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet2_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet2_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet2_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet2_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet2_phi___nominal\")\n",
    "RealData[\"jet2_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet2_phi___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___transverse_mass___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___transverse_mass___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___transverse_mass___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___transverse_mass___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___transverse_mass___nominal\")\n",
    "RealData[\"transverse_mass\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___transverse_mass___nominal\")\n",
    "MonteCarlo[\"ht\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___ht___nominal\")\n",
    "MonteCarlo[\"ht\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___ht___nominal\")\n",
    "MonteCarlo[\"ht\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___ht___nominal\")\n",
    "MonteCarlo[\"ht\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___ht___nominal\")\n",
    "MonteCarlo[\"ht\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___ht___nominal\")\n",
    "RealData[\"ht\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___ht___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_pt___nominal\")\n",
    "RealData[\"jpsi_muons_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_eta___nominal\")\n",
    "RealData[\"jpsi_muons_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_phi___nominal\")\n",
    "RealData[\"jpsi_muons_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_charge___nominal\")\n",
    "RealData[\"jpsi_muons_charge\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_muons___nominal\")\n",
    "RealData[\"invariant_mass_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___invariant_masses_zoomed___nominal\")\n",
    "RealData[\"invariant_masses_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons_and_isolated_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_muons_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons_and_isolated_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_muons_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons_and_isolated_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_muons_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons_and_isolated_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_muons_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons_and_isolated_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_muons_and_isolated_muons___nominal\")\n",
    "RealData[\"invariant_mass_jpsi_muons_and_isolated_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___invariant_mass_jpsi_muons_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "RealData[\"delta_eta_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "RealData[\"delta_phi_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "RealData[\"delta_r_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_pt___nominal\")\n",
    "RealData[\"jpsi_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_eta___nominal\")\n",
    "RealData[\"jpsi_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_phi___nominal\")\n",
    "RealData[\"jpsi_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_jpsi_muons___nominal\")\n",
    "RealData[\"delta_eta_between_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_jpsi_muons___nominal\")\n",
    "RealData[\"delta_phi_between_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons___nominal\")\n",
    "RealData[\"delta_r_between_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons_in_peak\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons_in_peak\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons_in_peak\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons_in_peak\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons_in_peak\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons_in_peak___nominal\")\n",
    "RealData[\"delta_r_between_jpsi_muons_in_peak\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_r_between_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "RealData[\"delta_eta_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "RealData[\"delta_phi_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "RealData[\"delta_r_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pt___nominal\")\n",
    "RealData[\"jpsi_muon_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pf_rel_iso_03_all___nominal\")\n",
    "RealData[\"jpsi_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_iso_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_iso_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_iso_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_iso_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_iso_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pf_iso_id___nominal\")\n",
    "RealData[\"jpsi_muon_pf_iso_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"isolated_muons_in_range_pfRelIso03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muons_in_range_pfRelIso03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muons_in_range_pfRelIso03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muons_in_range_pfRelIso03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muons_in_range_pfRelIso03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muons_in_range_pfRelIso03_all___nominal\")\n",
    "RealData[\"isolated_muons_in_range_pfRelIso03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_in_range_pfRelIso03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_in_range_pfRelIso03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_in_range_pfRelIso03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_in_range_pfRelIso03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_in_range_pfRelIso03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_in_range_pfRelIso03_all___nominal\")\n",
    "RealData[\"jpsi_muons_in_range_pfRelIso03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_muons_in_range\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_mass_muons_in_range___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_muons_in_range\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_mass_muons_in_range___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_muons_in_range\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_mass_muons_in_range___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_muons_in_range\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_mass_muons_in_range___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_muons_in_range\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_mass_muons_in_range___nominal\")\n",
    "RealData[\"jpsi_mass_muons_in_range\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_mass_muons_in_range___nominal\")\n",
    "MonteCarlo[\"pt_at_low_delta_r\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___pt_at_low_delta_r___nominal\")\n",
    "MonteCarlo[\"pt_at_low_delta_r\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___pt_at_low_delta_r___nominal\")\n",
    "MonteCarlo[\"pt_at_low_delta_r\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___pt_at_low_delta_r___nominal\")\n",
    "MonteCarlo[\"pt_at_low_delta_r\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___pt_at_low_delta_r___nominal\")\n",
    "MonteCarlo[\"pt_at_low_delta_r\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___pt_at_low_delta_r___nominal\")\n",
    "RealData[\"pt_at_low_delta_r\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___pt_at_low_delta_r___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_in_peak\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_mass_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_in_peak\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_mass_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_in_peak\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_mass_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_in_peak\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_mass_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_in_peak\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_mass_in_peak___nominal\")\n",
    "RealData[\"jpsi_mass_in_peak\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_mass_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_eta_for_jpsi_muons_in_peak\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_eta_for_jpsi_muons_in_peak\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_eta_for_jpsi_muons_in_peak\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_eta_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_eta_for_jpsi_muons_in_peak\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_eta_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_eta_for_jpsi_muons_in_peak\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_eta_for_jpsi_muons_in_peak___nominal\")\n",
    "RealData[\"delta_eta_for_jpsi_muons_in_peak\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_eta_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_phi_for_jpsi_muons_in_peak\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_phi_for_jpsi_muons_in_peak\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_phi_for_jpsi_muons_in_peak\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_phi_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_phi_for_jpsi_muons_in_peak\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_phi_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_phi_for_jpsi_muons_in_peak\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_phi_for_jpsi_muons_in_peak___nominal\")\n",
    "RealData[\"delta_phi_for_jpsi_muons_in_peak\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_phi_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_for_jpsi_muons_in_peak\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_for_jpsi_muons_in_peak\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_r_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_for_jpsi_muons_in_peak\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_r_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_for_jpsi_muons_in_peak\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_r_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_for_jpsi_muons_in_peak\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_r_for_jpsi_muons_in_peak___nominal\")\n",
    "RealData[\"delta_r_for_jpsi_muons_in_peak\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_r_for_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge_in_peak\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_charge_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge_in_peak\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_charge_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge_in_peak\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_charge_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge_in_peak\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_charge_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge_in_peak\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_charge_in_peak___nominal\")\n",
    "RealData[\"jpsi_muons_charge_in_peak\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_charge_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_pt_with_muon_in_peak\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_pt_with_muon_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_pt_with_muon_in_peak\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_pt_with_muon_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_pt_with_muon_in_peak\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_pt_with_muon_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_pt_with_muon_in_peak\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_pt_with_muon_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_pt_with_muon_in_peak\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_pt_with_muon_in_peak___nominal\")\n",
    "RealData[\"jpsi_pt_with_muon_in_peak\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_pt_with_muon_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pts_in_peak\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pts_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pts_in_peak\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pts_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pts_in_peak\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pts_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pts_in_peak\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_pts_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pts_in_peak\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pts_in_peak___nominal\")\n",
    "RealData[\"jpsi_muon_pts_in_peak\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_pts_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_isolation_in_peak\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_isolation_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_isolation_in_peak\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_isolation_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_isolation_in_peak\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_isolation_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_isolation_in_peak\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_isolation_in_peak___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_isolation_in_peak\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_isolation_in_peak___nominal\")\n",
    "RealData[\"jpsi_muon_isolation_in_peak\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_isolation_in_peak___nominal\")\n",
    "MonteCarlo[\"top_mass_in_peak\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___top_mass_in_peak___nominal\")\n",
    "MonteCarlo[\"top_mass_in_peak\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___top_mass_in_peak___nominal\")\n",
    "MonteCarlo[\"top_mass_in_peak\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___top_mass_in_peak___nominal\")\n",
    "MonteCarlo[\"top_mass_in_peak\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___top_mass_in_peak___nominal\")\n",
    "MonteCarlo[\"top_mass_in_peak\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___top_mass_in_peak___nominal\")\n",
    "RealData[\"top_mass_in_peak\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___top_mass_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi_in_peak\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi_in_peak\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi_in_peak\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi_in_peak\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi_in_peak\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "RealData[\"delta_eta_between_isolated_muon_and_jpsi_in_peak\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_eta_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi_in_peak\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi_in_peak\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi_in_peak\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi_in_peak\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi_in_peak\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "RealData[\"delta_phi_between_isolated_muon_and_jpsi_in_peak\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_phi_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi_in_peak\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi_in_peak\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi_in_peak\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi_in_peak\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi_in_peak\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "RealData[\"delta_r_between_isolated_muon_and_jpsi_in_peak\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_r_between_isolated_muon_and_jpsi_in_peak___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "RealData[\"isolated_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pt___nominal\")\n",
    "# RealData[\"further_muon_medium_tight_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "# RealData[\"further_muon_medium_tight_pf_iso_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pt___nominal\")\n",
    "# RealData[\"further_muon_loose_tight_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "# RealData[\"further_muon_loose_tight_pf_iso_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pt___nominal\")\n",
    "# RealData[\"further_muon_medium_medium_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "# RealData[\"further_muon_medium_medium_pf_iso_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pt___nominal\")\n",
    "# RealData[\"further_muon_loose_medium_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "# RealData[\"further_muon_loose_medium_pf_iso_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_medium_pf_iso_id___nominal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "S = dict()\n",
    "S[\"leading_isolated_muon_pt_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_pt_initial\", \"Leading Isolated Muon Transverse Momentum (One Muon, No Electrons); Pt (GeV);Events\")\n",
    "S[\"leading_isolated_muon_eta_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_eta_initial\", \"Leading Isolated Muon Pseudorapidity (One Muon, No Electrons); Eta; Events\")\n",
    "S[\"leading_isolated_muon_phi_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_phi_initial\", \"Leading Isolated Muon Angle (One Muon, No Electrons); Phi (Radians); Events\")\n",
    "S[\"leading_isolated_muon_mass_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_mass_initial\", \"Leading Isolated Muon Mass (One Muon, No Electrons); Mass(Gev); Events\")\n",
    "S[\"leading_isolated_muon_charge_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_charge_initial\", \"Leading Isolated Muon Charge (One Muon, No Electrons); Charge; Events\")\n",
    "S[\"leading_isolated_electron_pt_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_pt_initial\", \"Leading Isolated Electron Transverse Momentum (One Electron, No Muons); Pt (GeV);Events\")\n",
    "S[\"leading_isolated_electron_eta_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_eta_initial\", \"Leading Isolated Electron Pseudorapidity (One Electron, No Muons); Eta; Events\")\n",
    "S[\"leading_isolated_electron_phi_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_phi_initial\", \"Leading Isolated Electron Angle (One Electron, No Muons); Phi (Radians); Events\")\n",
    "S[\"leading_isolated_electron_mass_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_mass_initial\", \"Leading Isolated Electron Mass (One Electron, No Muons); Mass(Gev); Events\")\n",
    "S[\"leading_isolated_electron_charge_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_charge_initial\", \"Leading Isolated Electron Charge (One Electron, No Muons); Charge; Events\")\n",
    "S[\"met_before_met_cut\"] = ROOT.THStack(\"s_met_before_met_cut\", \"MET Before MET Cut; Pt (GeV); Events\")\n",
    "S[\"met_after_met_cut\"] = ROOT.THStack(\"s_met_after_met_cut\", \"MET After MET Cut; Pt (GeV); Events\")\n",
    "S[\"leading_isolated_muon_pt_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_pt_after_met_cut\", \"Leading Isolated Muon Transverse Momentum After MET Cut; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_muon_eta_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_eta_after_met_cut\", \"Leading Isolated Muon Pseudorapidity After MET Cut; Eta; Events\")\n",
    "S[\"leading_isolated_muon_phi_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_phi_after_met_cut\", \"Leading Isolated Muon Angle After MET Cut; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_muon_mass_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_mass_after_met_cut\", \"Leading Isolated Muon Mass After MET Cut; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_muon_charge_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_charge_after_met_cut\", \"Leading Isolated Muon Charge After MET Cut; Charge; Events\")\n",
    "S[\"leading_isolated_electron_pt_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_pt_after_met_cut\", \"Leading Isolated Electron Transverse Momentum After MET Cut; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_electron_eta_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_eta_after_met_cut\", \"Leading Isolated Electron Pseudorapidity After MET Cut; Eta; Events\")\n",
    "S[\"leading_isolated_electron_phi_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_phi_after_met_cut\", \"Leading Isolated Electron Angle After MET Cut; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_electron_mass_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_mass_after_met_cut\", \"Leading Isolated Electron Mass After MET Cut; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_electron_charge_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_charge_after_met_cut\", \"Leading Isolated Electron Charge After MET Cut; Charge; Events\")\n",
    "S[\"number_of_jets_initial\"] = ROOT.THStack(\"s_number_of_jets_initial\", \"Number Of Jets Before Jet Cut; Number Of Jets; Events\")\n",
    "S[\"number_of_jets\"] = ROOT.THStack(\"s_number_of_jets\", \"Number Of Jets; Number Of Jets; Events\")\n",
    "S[\"leading_isolated_muon_pt_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_pt_after_jet_cut\", \"Leading Isolated Muon Transverse Momentum After Jet Cut; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_muon_eta_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_eta_after_jet_cut\", \"Leading Isolated Muon Pseudorapidity After Jet Cut; Eta; Events\")\n",
    "S[\"leading_isolated_muon_phi_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_phi_after_jet_cut\", \"Leading Isolated Muon Angle After Jet Cut; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_muon_mass_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_mass_after_jet_cut\", \"Leading Isolated Muon Mass After Jet Cut; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_muon_charge_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_charge_after_jet_cut\", \"Leading Isolated Muon Charge After Jet Cut; Charge; Events\")\n",
    "S[\"number_of_jpsi_muons_initial\"] = ROOT.THStack(\"s_number_of_jpsi_muons_initial\", \"Number of JPsi Muons Before JPsi Muon Cut; Number Of Muons; Events\")\n",
    "S[\"number_of_jpsi_muons\"] = ROOT.THStack(\"s_number_of_jpsi_muons\", \"Number of JPsi Muons; Number Of Muons; Events\")\n",
    "S[\"leading_isolated_muon_pt\"] = ROOT.THStack(\"s_leading_isolated_muon_pt\", \"Leading Isolated Muon Transverse Momentum; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_muon_eta\"] = ROOT.THStack(\"s_leading_isolated_muon_eta\", \"Leading Isolated Muon Pseudorapidity; Eta; Events\")\n",
    "S[\"leading_isolated_muon_phi\"] = ROOT.THStack(\"s_leading_isolated_muon_phi\", \"Leading Isolated Muon Angle; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_muon_mass\"] = ROOT.THStack(\"s_leading_isolated_muon_mass\", \"Leading Isolated Muon Mass; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_muon_charge\"] = ROOT.THStack(\"s_leading_isolated_muon_charge\", \"Leading Isolated Muon Charge; Charge; Events\")\n",
    "S[\"leading_isolated_electron_pt\"] = ROOT.THStack(\"s_leading_isolated_electron_pt\", \"Leading Isolated Electron Transverse Momentum; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_electron_eta\"] = ROOT.THStack(\"s_leading_isolated_electron_eta\", \"Leading Isolated Electron Pseudorapidity; Eta; Events\")\n",
    "S[\"leading_isolated_electron_phi\"] = ROOT.THStack(\"s_leading_isolated_electron_phi\", \"Leading Isolated Electron Angle; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_electron_mass\"] = ROOT.THStack(\"s_leading_isolated_electron_mass\", \"Leading Isolated Electron Mass; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_electron_charge\"] = ROOT.THStack(\"s_leading_isolated_electron_charge\", \"Leading Isolated Electron Charge; Charge; Events\")\n",
    "S[\"jet1_pt\"] = ROOT.THStack(\"s_jet1_pt\", \"Jet Transverse Momentum for Leading Jet; Pt (GeV); Events\")\n",
    "S[\"jet2_pt\"] = ROOT.THStack(\"s_jet2_pt\", \"Jet Transverse Momentum for Subleading Jet; Pt (GeV); Events\")\n",
    "S[\"jet1_eta\"] = ROOT.THStack(\"s_jet1_eta\", \"Jet Pseudorapidity for Leading Jet; Eta; Events\")\n",
    "S[\"jet2_eta\"] = ROOT.THStack(\"s_jet2_eta\", \"Jet Pseudorapidity for Subleading Jet; Eta; Events\")\n",
    "S[\"jet1_phi\"] = ROOT.THStack(\"s_jet1_phi\", \"Jet Angle for Leading Jet; Phi (Radians); Events\")\n",
    "S[\"jet2_phi\"] = ROOT.THStack(\"s_jet2_phi\", \"Jet Angle for Subleading Jet; Phi (Radians); Events\")\n",
    "S[\"transverse_mass\"] = ROOT.THStack(\"s_transverse_mass\", \"Transverse Mass; Transverse Mass (GeV); Events\")\n",
    "S[\"ht\"] = ROOT.THStack(\"s_ht\", \"Ht; Ht; Events\")\n",
    "S[\"jpsi_muons_pt\"] = ROOT.THStack(\"s_jpsi_muons_pt\", \"Transverse Momentum for JPsi Muons; Pt; Events\")\n",
    "S[\"jpsi_muons_eta\"] = ROOT.THStack(\"s_jpsi_muons_eta\", \"Pseudorapidity for JPsi Muons; Eta; Events\")\n",
    "S[\"jpsi_muons_phi\"] = ROOT.THStack(\"s_jpsi_muons_phi\", \"Angle for JPsi Muons; Phi; Events\")\n",
    "S[\"jpsi_muons_charge\"] = ROOT.THStack(\"s_jpsi_muons_charge\", \"Charge of JPsi Muons; Charge; Events\")\n",
    "S[\"invariant_mass_jpsi_muons\"] = ROOT.THStack(\"s_invariant_mass_jpsi_muons\", \"Invariant Masses for J/Psi Candidate Muons (Oppositely Charged); Invariant Masses; Events\")\n",
    "S[\"invariant_masses_zoomed\"] = ROOT.THStack(\"s_invariant_masses_zoomed\", \"Invariant Masses for J/Psi Candidate Muons (Oppositely Charged); Invariant Masses; Events\")\n",
    "S[\"invariant_mass_jpsi_muons_and_isolated_muons\"] = ROOT.THStack(\"s_invariant_mass_jpsi_muons_and_isolated_muons\", \"Invariant Masses for J/Psi Candidate And Isolated Muons (dR < 2); Invariant Masses; Events\")\n",
    "S[\"delta_eta_between_isolated_and_jpsi_muons\"] = ROOT.THStack(\"s_delta_eta_between_isolated_and_jpsi_muons\", \"Delta Eta for Isolated Muon - JPsi Muons; Delta Eta; Events\")\n",
    "S[\"delta_phi_between_isolated_and_jpsi_muons\"] = ROOT.THStack(\"s_delta_phi_between_isolated_and_jpsi_muons\", \"Delta Phi for Isolated Muon - JPsi Muons; Delta Phi; Events\")\n",
    "S[\"delta_r_between_isolated_and_jpsi_muons\"] = ROOT.THStack(\"s_delta_r_between_isolated_and_jpsi_muons\", \"Delta R for Isolated and JPsi Muons; Delta R; Events\")\n",
    "S[\"jpsi_pt\"] = ROOT.THStack(\"s_jpsi_pt\", \"Transverse Momentum for JPsi; Pt; Events\")\n",
    "S[\"jpsi_eta\"] = ROOT.THStack(\"s_jpsi_eta\", \"Pseudorapidity for JPsi; Eta; Events\")\n",
    "S[\"jpsi_phi\"] = ROOT.THStack(\"s_jpsi_phi\", \"Angle for JPsi; Phi; Events\")\n",
    "S[\"delta_eta_between_jpsi_muons\"] = ROOT.THStack(\"s_delta_eta_between_jpsi_muons\", \"Delta Eta for JPsi Muons; Delta Eta; Events\")\n",
    "S[\"delta_phi_between_jpsi_muons\"] = ROOT.THStack(\"s_delta_phi_between_jpsi_muons\", \"Delta Phi for JPsi Muons; Delta Phi; Events\")\n",
    "S[\"delta_r_between_jpsi_muons\"] = ROOT.THStack(\"s_delta_r_between_jpsi_muons\", \"Delta R for JPsi Muons; Delta R; Events\")\n",
    "S[\"delta_r_between_jpsi_muons_in_peak\"] = ROOT.THStack(\"s_delta_r_between_jpsi_muons_in_peak\", \"Delta R for JPsi Muons In Peak; Delta R; Events\")\n",
    "S[\"delta_eta_between_isolated_muon_and_jpsi\"] = ROOT.THStack(\"s_delta_eta_between_isolated_muon_and_jpsi\", \"Delta Eta for Isolated Muon And JPsi; Delta Eta; Events\")\n",
    "S[\"delta_phi_between_isolated_muon_and_jpsi\"] = ROOT.THStack(\"s_delta_phi_between_isolated_muon_and_jpsi\", \"Delta Phi for Isolated Muon And JPsi; Delta Phi; Events\")\n",
    "S[\"delta_r_between_isolated_muon_and_jpsi\"] = ROOT.THStack(\"s_delta_r_between_isolated_muon_and_jpsi\", \"Delta R for Isolated Muon And JPsi; Delta R; Events\")\n",
    "S[\"jpsi_muon_pt\"] = ROOT.THStack(\"s_jpsi_muon_pt\", \"JPsi Muon Pt - Muon Id Medium, Iso Id Tight; JPsi Muon Pt; Events\")\n",
    "S[\"jpsi_muon_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_jpsi_muon_pf_rel_iso_03_all\", \"JPsi Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Tight; JPsi Muon Pf Rel Iso 03 All; Events\")\n",
    "S[\"jpsi_muon_pf_iso_id\"] = ROOT.THStack(\"s_jpsi_muon_pf_iso_id\", \"JPsi Muon Pf Iso Id - Muon Id Medium, Iso Id Tight; JPsi Muon Pf Iso Id; Events\")\n",
    "S[\"isolated_muons_in_range_pfRelIso03_all\"] = ROOT.THStack(\"s_isolated_muons_in_range_pfRelIso03_all\", \"PfRelIso03_All For Isolated Muons In 90-120 GeV Range; PfRelIso03_All; Events\")\n",
    "S[\"jpsi_muons_in_range_pfRelIso03_all\"] = ROOT.THStack(\"s_jpsi_muons_in_range_pfRelIso03_all\", \"PfRelIso03_All For JPsi Muons In 90-120 GeV Range; PfRelIso03_All; Events\")\n",
    "S[\"jpsi_mass_muons_in_range\"] = ROOT.THStack(\"s_jpsi_mass_muons_in_range\", \"JPsi Mass For JPsis In 90-120 GeV Range; JPsi Mass; Events\")\n",
    "S[\"pt_at_low_delta_r\"] = ROOT.THStack(\"s_pt_at_low_delta_r\", \"Isolated Muon and JPsi Pt at Delta R < 0.3; Isolated Muon Pt; JPsi Muon Pt; Events\")\n",
    "S[\"jpsi_mass_in_peak\"] = ROOT.THStack(\"jpsi_mass_in_peak\", \"J/Psi Mass Made from Muons In Peak; J/Psi Mass; Events\")\n",
    "S[\"delta_eta_for_jpsi_muons_in_peak\"] = ROOT.THStack(\"delta_eta_for_jpsi_muons_in_peak\", \"Delta Eta For J/Psi Muons In Peak; Delta Eta; Events\")\n",
    "S[\"delta_phi_for_jpsi_muons_in_peak\"] = ROOT.THStack(\"delta_phi_for_jpsi_muons_in_peak\", \"Delta Phi For J/Psi Muons In Peak; Delta Phi; Events\")\n",
    "S[\"delta_r_for_jpsi_muons_in_peak\"] = ROOT.THStack(\"delta_r_for_jpsi_muons_in_peak\", \"Delta R For J/Psi Muons In Peak; Delta R; Events\")\n",
    "S[\"jpsi_muons_charge_in_peak\"] = ROOT.THStack(\"jpsi_muons_charge_in_peak\", \"J/Psi Muons In Peak Charge; Charge; Events\")\n",
    "S[\"jpsi_pt_with_muon_in_peak\"] = ROOT.THStack(\"jpsi_pt_with_muon_in_peak\", \"J/Psi Pt With Muons In Peak; Pt; Events\")\n",
    "S[\"jpsi_muon_pts_in_peak\"] = ROOT.THStack(\"jpsi_muon_pts_in_peak\", \"J/Psi Muon Pts In Peak; Positive Muon Pts; Negative Muon Pts; Events\")\n",
    "S[\"jpsi_muon_isolation_in_peak\"] = ROOT.THStack(\"jpsi_muon_isolation_in_peak\", \"J/Psi Pf Rel Iso 03 All Made From Muons In Peak; Pf Rel Iso 03 All; Events\")\n",
    "S[\"top_mass_in_peak\"] = ROOT.THStack(\"top_mass_in_peak\", \"Top Quark Mass Made From Muons In Peak; Mass; Events\")\n",
    "S[\"delta_eta_between_isolated_muon_and_jpsi_in_peak\"] = ROOT.THStack(\"delta_eta_between_isolated_muon_and_jpsi_in_peak\", \"Delta Eta Between Isolated Muon And J/Psi; Delta Eta; Events\")\n",
    "S[\"delta_phi_between_isolated_muon_and_jpsi_in_peak\"] = ROOT.THStack(\"delta_phi_between_isolated_muon_and_jpsi_in_peak\", \"Delta Phi Between Isolated Muon And J/Psi; Delta Phi; Events\")\n",
    "S[\"delta_r_between_isolated_muon_and_jpsi_in_peak\"] = ROOT.THStack(\"delta_r_between_isolated_muon_and_jpsi_in_peak\", \"Delta R Between Isolated Muon And J/Psi; Delta R; Events\")\n",
    "S[\"isolated_muon_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_all\", \"Isolated Muon PfRelIso03_All; Isolated Muon PfRelIso03_All; Events\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_chg\", \"Isolated Muon PfRelIso03_Chg; Isolated Muon PfRelIso03_Chg; Events\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_all\", \"JPsi Muon Positive PfRelIso03_All; JPsi Muon Positive PfRelIso03_All; Events\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_chg\", \"JPsi Muon Positive PfRelIso03_Chg; JPsi Muon Positive PfRelIso03_Chg; Events\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_all\", \"JPsi Muon Negative PfRelIso03_All; JPsi Muon Negative PfRelIso03_All; Events\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_chg\", \"JPsi Muon Negative PfRelIso03_Chg; JPsi Muon Negative PfRelIso03_Chg; Events\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all_zoomed\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_all_zoomed\", \"Isolated Muon PfRelIso03_All Zoomed; Isolated Muon PfRelIso03_All; Events\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_all_zoomed\", \"JPsi Muon Positive PfRelIso03_All Zoomed; JPsi Muon Positive PfRelIso03_All; Events\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_all_zoomed\", \"JPsi Muon Negative PfRelIso03_All Zoomed; JPsi Muon Negative PfRelIso03_All; Events\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all_medium_id\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_all_medium_id\", \"Isolated Muon PfRelIso03_All Medium ID; Isolated Muon PfRelIso03_All Medium ID; Events\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\", \"Isolated Muon PfRelIso03_All Medium ID Zoomed; Isolated Muon PfRelIso03_All Medium ID; Events\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_chg_medium_id\", \"Isolated Muon PfRelIso03_Chg Medium ID; Isolated Muon PfRelIso03_Chg Medium ID; Events\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_all_medium_id\", \"JPsi Muon Positive PfRelIso03_All Medium ID; JPsi Muon Positive PfRelIso03_All Medium ID; Events\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\", \"JPsi Muon Positive PfRelIso03_All Zoomed Medium ID; JPsi Muon Positive PfRelIso03_All Medium ID; Events\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\", \"JPsi Muon Positive PfRelIso03_Chg Medium ID; JPsi Muon Positive PfRelIso03_Chg Medium ID; Events\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_all_medium_id\", \"JPsi Muon Negative PfRelIso03_All Medium ID; JPsi Muon Negative PfRelIso03_All Medium ID; Events\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\", \"JPsi Muon Negative PfRelIso03_All Zoomed Medium ID; JPsi Muon Negative PfRelIso03_All Medium ID; Events\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\", \"JPsi Muon Negative PfRelIso03_Chg Medium ID; JPsi Muon Negative PfRelIso03_Chg Medium ID; Events\")\n",
    "# S[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_jpsi_muon_positive_peak_only_pf_rel_iso_03_all\", \"JPsi Muon Positive Peak Only PfRelIso03_All; JPsi Muon Positive Peak Only PfRelIso03_All; Events\")\n",
    "# S[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\", \"JPsi Muon Positive Peak Only PfRelIso03_Chg; JPsi Muon Positive Peak Only PfRelIso03_Chg; Events\")\n",
    "# S[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_jpsi_muon_negative_peak_only_pf_rel_iso_03_all\", \"JPsi Muon Negative Peak Only PfRelIso03_All; JPsi Muon Negative Peak Only PfRelIso03_All; Events\")\n",
    "# S[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\", \"JPsi Muon Negative Peak Only PfRelIso03_Chg; JPsi Muon Negative Peak Only PfRelIso03_Chg; Events\")\n",
    "# S[\"further_muon_medium_tight_pt\"] = ROOT.THStack(\"s_further_muon_medium_tight_pt\", \"Further Muon Pt - Muon Id Medium, Iso Id Tight; Further Muon Pt - Muon Id Medium, Iso Id Tight; Events\")\n",
    "# S[\"further_muon_medium_tight_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_further_muon_medium_tight_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Tight; Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Tight; Events\")\n",
    "# S[\"further_muon_medium_tight_pf_iso_id\"] = ROOT.THStack(\"s_further_muon_medium_tight_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Medium, Iso Id Tight; Further Muon Pf Iso Id - Muon Id Medium, Iso Id Tight; Events\")\n",
    "# S[\"further_muon_loose_tight_pt\"] = ROOT.THStack(\"s_further_muon_loose_tight_pt\", \"Further Muon Pt - Muon Id Loose Iso Id Tight; Further Muon Pt - Muon Id Loose, Iso Id Tight; Events\")\n",
    "# S[\"further_muon_loose_tight_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_further_muon_loose_tight_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Tight; Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Tight; Events\")\n",
    "# S[\"further_muon_loose_tight_pf_iso_id\"] = ROOT.THStack(\"s_further_muon_loose_tight_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Loose, Iso Id Tight; Further Muon Pf Iso Id - Muon Id Loose, Iso Id Tight; Events\")\n",
    "# S[\"further_muon_medium_medium_pt\"] = ROOT.THStack(\"s_further_muon_medium_medium_pt\", \"Further Muon Pt - Muon Id Medium, Iso Id Medium; Further Muon Pt - Muon Id Medium, Iso Id Medium; Events\")\n",
    "# S[\"further_muon_medium_medium_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_further_muon_medium_medium_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Medium; Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Medium; Events\")\n",
    "# S[\"further_muon_medium_medium_pf_iso_id\"] = ROOT.THStack(\"s_further_muon_medium_medium_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Medium, Iso Id Medium; Further Muon Pf Iso Id - Muon Id Medium, Iso Id Medium; Events\")\n",
    "# S[\"further_muon_loose_medium_pt\"] = ROOT.THStack(\"s_further_muon_loose_medium_pt\", \"Further Muon Pt - Muon Id Loose, Iso Id Medium; Further Muon Pt - Muon Id Loose, Iso Id Medium; Events\")\n",
    "# S[\"further_muon_loose_medium_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_further_muon_loose_medium_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Medium; Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Medium; Events\")\n",
    "# S[\"further_muon_loose_medium_pf_iso_id\"] = ROOT.THStack(\"s_further_muon_loose_medium_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Loose, Iso Id Medium; Further Muon Pf Iso Id - Muon Id Loose, Iso Id Medium; Events\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "leading_isolated_muon_pt_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt_initial WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt_initial ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_initial WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_initial ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_initial WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_initial ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_initial WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_initial ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_initial WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_initial ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_pt_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_pt_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_pt_initial WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_pt_initial ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_pt_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_eta_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_eta_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_eta_initial WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_eta_initial ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_eta_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_phi_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_phi_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_phi_initial WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_phi_initial ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_phi_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_mass_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_mass_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_mass_initial WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_mass_initial ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_mass_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_charge_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_charge_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_charge_initial WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_charge_initial ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_charge_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "met_before_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "met_before_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "met_before_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "met_before_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "met_before_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "met_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "met_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "met_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "met_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "met_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_pt_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_pt_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_pt_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_pt_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_pt_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_eta_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_eta_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_eta_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_eta_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_eta_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_phi_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_phi_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_phi_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_phi_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_phi_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_mass_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_mass_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_mass_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_mass_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_mass_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_charge_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_charge_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_charge_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_charge_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_electron_charge_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jets_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jets_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jets_initial WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jets_initial ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jets_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jets TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jets TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jets WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jets ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jets ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jpsi_muons_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jpsi_muons_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jpsi_muons_initial WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jpsi_muons_initial ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jpsi_muons_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "number_of_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_mass ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "leading_isolated_muon_charge ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_pt WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_pt ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_pt WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_pt ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_eta WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_eta ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_eta WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_eta ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_phi WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_phi ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet1_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_phi WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_phi ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jet2_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "transverse_mass TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "transverse_mass TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "transverse_mass WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "transverse_mass ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "transverse_mass ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "ht TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "ht TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "ht WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "ht ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "ht ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_pt WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_pt ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_eta WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_eta ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_phi WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_phi ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_charge TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_charge TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_charge WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_charge ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_charge ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_mass_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_mass_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_mass_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_mass_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_mass_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_masses_zoomed TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_masses_zoomed TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_masses_zoomed WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_masses_zoomed ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_masses_zoomed ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_mass_jpsi_muons_and_isolated_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_mass_jpsi_muons_and_isolated_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_mass_jpsi_muons_and_isolated_muons WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_mass_jpsi_muons_and_isolated_muons ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "invariant_mass_jpsi_muons_and_isolated_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_and_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_and_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_and_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_and_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_and_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_isolated_and_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_isolated_and_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_isolated_and_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_isolated_and_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_isolated_and_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_and_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_and_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_and_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_and_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_and_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_pt WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_pt ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_eta WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_eta ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_phi WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_phi ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_jpsi_muons_in_peak TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_jpsi_muons_in_peak TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_jpsi_muons_in_peak WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_jpsi_muons_in_peak ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_jpsi_muons_in_peak ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_isolated_muon_and_jpsi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_isolated_muon_and_jpsi TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_isolated_muon_and_jpsi WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_isolated_muon_and_jpsi ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_isolated_muon_and_jpsi ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_muon_and_jpsi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_muon_and_jpsi TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_muon_and_jpsi WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_muon_and_jpsi ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_muon_and_jpsi ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pt WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pt ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pf_rel_iso_03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pf_rel_iso_03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pf_rel_iso_03_all WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pf_rel_iso_03_all ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pf_rel_iso_03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pf_iso_id TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pf_iso_id TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pf_iso_id WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pf_iso_id ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pf_iso_id ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "isolated_muons_in_range_pfRelIso03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "isolated_muons_in_range_pfRelIso03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "isolated_muons_in_range_pfRelIso03_all WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "isolated_muons_in_range_pfRelIso03_all ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "isolated_muons_in_range_pfRelIso03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_in_range_pfRelIso03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_in_range_pfRelIso03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_in_range_pfRelIso03_all WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_in_range_pfRelIso03_all ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_in_range_pfRelIso03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_mass_muons_in_range TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_mass_muons_in_range TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_mass_muons_in_range WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_mass_muons_in_range ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_mass_muons_in_range ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "pt_at_low_delta_r TTToSemiLeptonic <class cppyy.gbl.TH2D at 0xa219940>\n",
      "pt_at_low_delta_r TTTo2L2Nu <class cppyy.gbl.TH2D at 0xa219940>\n",
      "pt_at_low_delta_r WJetsToLNu <class cppyy.gbl.TH2D at 0xa219940>\n",
      "pt_at_low_delta_r ST_tW_top <class cppyy.gbl.TH2D at 0xa219940>\n",
      "pt_at_low_delta_r ST_tchannel_top <class cppyy.gbl.TH2D at 0xa219940>\n",
      "jpsi_mass_in_peak TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_mass_in_peak TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_mass_in_peak WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_mass_in_peak ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_mass_in_peak ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_for_jpsi_muons_in_peak TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_for_jpsi_muons_in_peak TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_for_jpsi_muons_in_peak WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_for_jpsi_muons_in_peak ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_for_jpsi_muons_in_peak ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_for_jpsi_muons_in_peak TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_for_jpsi_muons_in_peak TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_for_jpsi_muons_in_peak WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_for_jpsi_muons_in_peak ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_for_jpsi_muons_in_peak ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_for_jpsi_muons_in_peak TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_for_jpsi_muons_in_peak TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_for_jpsi_muons_in_peak WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_for_jpsi_muons_in_peak ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_for_jpsi_muons_in_peak ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_charge_in_peak TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_charge_in_peak TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_charge_in_peak WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_charge_in_peak ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muons_charge_in_peak ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_pt_with_muon_in_peak TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_pt_with_muon_in_peak TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_pt_with_muon_in_peak WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_pt_with_muon_in_peak ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_pt_with_muon_in_peak ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_pts_in_peak TTToSemiLeptonic <class cppyy.gbl.TH2D at 0xa219940>\n",
      "jpsi_muon_pts_in_peak TTTo2L2Nu <class cppyy.gbl.TH2D at 0xa219940>\n",
      "jpsi_muon_pts_in_peak WJetsToLNu <class cppyy.gbl.TH2D at 0xa219940>\n",
      "jpsi_muon_pts_in_peak ST_tW_top <class cppyy.gbl.TH2D at 0xa219940>\n",
      "jpsi_muon_pts_in_peak ST_tchannel_top <class cppyy.gbl.TH2D at 0xa219940>\n",
      "jpsi_muon_isolation_in_peak TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_isolation_in_peak TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_isolation_in_peak WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_isolation_in_peak ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "jpsi_muon_isolation_in_peak ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "top_mass_in_peak TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "top_mass_in_peak TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "top_mass_in_peak WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "top_mass_in_peak ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "top_mass_in_peak ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi_in_peak TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi_in_peak TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi_in_peak WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi_in_peak ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_eta_between_isolated_muon_and_jpsi_in_peak ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_isolated_muon_and_jpsi_in_peak TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_isolated_muon_and_jpsi_in_peak TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_isolated_muon_and_jpsi_in_peak WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "delta_phi_between_isolated_muon_and_jpsi_in_peak ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_phi_between_isolated_muon_and_jpsi_in_peak ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_muon_and_jpsi_in_peak TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_muon_and_jpsi_in_peak TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_muon_and_jpsi_in_peak WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_muon_and_jpsi_in_peak ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "delta_r_between_isolated_muon_and_jpsi_in_peak ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "isolated_muon_pf_rel_iso_03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "isolated_muon_pf_rel_iso_03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "isolated_muon_pf_rel_iso_03_all WJetsToLNu <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "isolated_muon_pf_rel_iso_03_all ST_tW_top <class cppyy.gbl.TH1D at 0xa0687c0>\n",
      "isolated_muon_pf_rel_iso_03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0xa0687c0>\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for item in MonteCarlo:\n",
    "\n",
    "    for sample, color in {\"TTToSemiLeptonic\" : ROOT.kRed, \"TTTo2L2Nu\" : ROOT.kGreen, \"WJetsToLNu\" : ROOT.kBlue, \"ST_tW_top\" : ROOT.kMagenta, \"ST_tchannel_top\" : ROOT.kOrange}.items():\n",
    "        print(item, sample, type(MonteCarlo[item][sample]))\n",
    "        MonteCarlo[item][sample].SetFillColor(color)\n",
    "        MonteCarlo[item][sample].SetLineColor(color)\n",
    "        S[item].Add(MonteCarlo[item][sample])\n",
    "\n",
    "canvasas = dict()\n",
    "\n",
    "# canvas0 = ROOT.TCanvas(\"c_leading_isolated_muon_pt_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_pt_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_pt_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_pt_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas0.Draw()\n",
    "# canvasas['0'] = canvas0\n",
    "\n",
    "# canvas1 = ROOT.TCanvas(\"c_leading_isolated_muon_eta_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_eta_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_eta_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_eta_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas1.Draw()\n",
    "# canvasas['1'] = canvas1\n",
    "\n",
    "# canvas2 = ROOT.TCanvas(\"c_leading_isolated_muon_phi_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_phi_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_phi_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_phi_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas2.Draw()\n",
    "# canvasas['2'] = canvas2\n",
    "\n",
    "# canvas3 = ROOT.TCanvas(\"c_leading_isolated_muon_mass_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_mass_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_mass_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_mass_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas3.Draw()\n",
    "# canvasas['3'] = canvas3\n",
    "\n",
    "# canvas4 = ROOT.TCanvas(\"c_leading_isolated_muon_charge_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_charge_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_charge_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_charge_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas4.Draw()\n",
    "# canvasas['4'] = canvas4\n",
    "\n",
    "# canvas5 = ROOT.TCanvas(\"c_leading_isolated_electron_pt_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_pt_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_pt_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_pt_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas5.Draw()\n",
    "# canvasas['5'] = canvas5\n",
    "\n",
    "# canvas6 = ROOT.TCanvas(\"c_leading_isolated_electron_eta_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_eta_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_eta_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_eta_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas6.Draw()\n",
    "# canvasas['6'] = canvas6\n",
    "\n",
    "# canvas7 = ROOT.TCanvas(\"c_leading_isolated_electron_phi_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_phi_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_phi_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_phi_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas7.Draw()\n",
    "# canvasas['7'] = canvas7\n",
    "\n",
    "# canvas8 = ROOT.TCanvas(\"c_leading_isolated_electron_mass_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_mass_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_mass_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_mass_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas8.Draw()\n",
    "# canvasas['8'] = canvas8\n",
    "\n",
    "# canvas9 = ROOT.TCanvas(\"c_leading_isolated_electron_charge_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_charge_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_charge_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_charge_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas9.Draw()\n",
    "# canvasas['9'] = canvas9\n",
    "\n",
    "# canvas10 = ROOT.TCanvas(\"c_met_before_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"met_before_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"met_before_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"met_before_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas10.Draw()\n",
    "# canvasas['10'] = canvas10\n",
    "\n",
    "# canvas11 = ROOT.TCanvas(\"c_met_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"met_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"met_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"met_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas11.Draw()\n",
    "# canvasas['11'] = canvas11\n",
    "\n",
    "# canvas12 = ROOT.TCanvas(\"c_leading_isolated_muon_pt_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_pt_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_pt_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_pt_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas12.Draw()\n",
    "# canvasas['12'] = canvas12\n",
    "\n",
    "# canvas13 = ROOT.TCanvas(\"c_leading_isolated_muon_eta_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_eta_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_eta_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_eta_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas13.Draw()\n",
    "# canvasas['13'] = canvas13\n",
    "\n",
    "# canvas14 = ROOT.TCanvas(\"c_leading_isolated_muon_phi_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_phi_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_phi_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_phi_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas14.Draw()\n",
    "# canvasas['14'] = canvas14\n",
    "\n",
    "# canvas15 = ROOT.TCanvas(\"c_leading_isolated_muon_mass_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_mass_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_mass_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_mass_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas15.Draw()\n",
    "# canvasas['15'] = canvas15\n",
    "\n",
    "# canvas16 = ROOT.TCanvas(\"c_leading_isolated_muon_charge_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_charge_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_charge_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_charge_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas16.Draw()\n",
    "# canvasas['16'] = canvas16\n",
    "\n",
    "# canvas17 = ROOT.TCanvas(\"c_leading_isolated_electron_pt_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_pt_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_pt_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_pt_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas17.Draw()\n",
    "# canvasas['17'] = canvas17\n",
    "\n",
    "# canvas18 = ROOT.TCanvas(\"c_leading_isolated_electron_eta_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_eta_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_eta_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_eta_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas18.Draw()\n",
    "# canvasas['18'] = canvas18\n",
    "\n",
    "# canvas19 = ROOT.TCanvas(\"c_leading_isolated_electron_phi_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_phi_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_phi_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_phi_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas19.Draw()\n",
    "# canvasas['19'] = canvas19\n",
    "\n",
    "# canvas20 = ROOT.TCanvas(\"c_leading_isolated_electron_mass_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_mass_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_mass_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_mass_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas20.Draw()\n",
    "# canvasas['20'] = canvas20\n",
    "\n",
    "# canvas21 = ROOT.TCanvas(\"c_leading_isolated_electron_charge_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_charge_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_charge_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_charge_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas21.Draw()\n",
    "# canvasas['21'] = canvas21\n",
    "\n",
    "# canvas22 = ROOT.TCanvas(\"c_number_of_jets_initial\", \"\", 800, 800)\n",
    "# RealData[\"number_of_jets_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"number_of_jets_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"number_of_jets_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas22.Draw()\n",
    "# canvasas['22'] = canvas22\n",
    "\n",
    "\n",
    "\n",
    "# canvas24 = ROOT.TCanvas(\"c_leading_isolated_muon_pt_after_jet_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_pt_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_pt_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_pt_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas24.Draw()\n",
    "# canvasas['24'] = canvas24\n",
    "\n",
    "# canvas25 = ROOT.TCanvas(\"c_leading_isolated_muon_eta_after_jet_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_eta_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_eta_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_eta_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas25.Draw()\n",
    "# canvasas['25'] = canvas25\n",
    "\n",
    "# canvas26 = ROOT.TCanvas(\"c_leading_isolated_muon_phi_after_jet_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_phi_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_phi_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_phi_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas26.Draw()\n",
    "# canvasas['26'] = canvas26\n",
    "\n",
    "# canvas27 = ROOT.TCanvas(\"c_leading_isolated_muon_mass_after_jet_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_mass_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_mass_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_mass_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas27.Draw()\n",
    "# canvasas['27'] = canvas27\n",
    "\n",
    "# canvas28 = ROOT.TCanvas(\"c_leading_isolated_muon_charge_after_jet_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_charge_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_charge_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_charge_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas28.Draw()\n",
    "# canvasas['28'] = canvas28\n",
    "\n",
    "# canvas29 = ROOT.TCanvas(\"c_number_of_jpsi_muons_initial\", \"\", 800, 800)\n",
    "# RealData[\"number_of_jpsi_muons_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"number_of_jpsi_muons_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"number_of_jpsi_muons_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas29.Draw()\n",
    "# canvasas['29'] = canvas29\n",
    "\n",
    "# canvas30 = ROOT.TCanvas(\"c_number_of_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"number_of_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"number_of_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"number_of_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas30.Draw()\n",
    "# canvasas['30'] = canvas30\n",
    "\n",
    "# canvas31 = ROOT.TCanvas(\"c_leading_isolated_muon_pt\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas31.Draw()\n",
    "# canvasas['31'] = canvas31\n",
    "\n",
    "# canvas32 = ROOT.TCanvas(\"c_leading_isolated_muon_eta\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_eta\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas32.Draw()\n",
    "# canvasas['32'] = canvas32\n",
    "\n",
    "# canvas33 = ROOT.TCanvas(\"c_leading_isolated_muon_phi\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_phi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas33.Draw()\n",
    "# canvasas['33'] = canvas33\n",
    "\n",
    "# canvas33a = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas33a.Draw()\n",
    "# canvasas['33a'] = canvas33a\n",
    "\n",
    "# canvas33a = ROOT.TCanvas(\"c_leading_isolated_muon_mass\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_mass\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_mass\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_mass\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas33a.Draw()\n",
    "# canvasas['33a'] = canvas33a\n",
    "\n",
    "# canvas34 = ROOT.TCanvas(\"c_leading_isolated_muon_charge\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_charge\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_charge\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_charge\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas34.Draw()\n",
    "# canvasas['34'] = canvas34\n",
    "\n",
    "# canvas34a = ROOT.TCanvas(\"c_number_of_jets\", \"\", 800, 800)\n",
    "# RealData[\"number_of_jets\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"number_of_jets\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"number_of_jets\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas34a.Draw()\n",
    "# canvasas['34a'] = canvas34a\n",
    "\n",
    "# canvas35 = ROOT.TCanvas(\"c_jet1_pt\", \"\", 800, 800)\n",
    "# RealData[\"jet1_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jet1_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jet1_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas35.Draw()\n",
    "# canvasas['35'] = canvas35\n",
    "\n",
    "# canvas36 = ROOT.TCanvas(\"c_jet2_pt\", \"\", 800, 800)\n",
    "# RealData[\"jet2_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jet2_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jet2_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas36.Draw()\n",
    "# canvasas['36'] = canvas36\n",
    "\n",
    "# canvas37 = ROOT.TCanvas(\"c_jet1_eta\", \"\", 800, 800)\n",
    "# RealData[\"jet1_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jet1_eta\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jet1_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas37.Draw()\n",
    "# canvasas['37'] = canvas37\n",
    "\n",
    "# canvas38 = ROOT.TCanvas(\"c_jet2_eta\", \"\", 800, 800)\n",
    "# RealData[\"jet2_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jet2_eta\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jet2_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas38.Draw()\n",
    "# canvasas['38'] = canvas38\n",
    "\n",
    "# canvas39 = ROOT.TCanvas(\"c_jet1_phi\", \"\", 800, 800)\n",
    "# RealData[\"jet1_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jet1_phi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jet1_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas39.Draw()\n",
    "# canvasas['39'] = canvas39\n",
    "\n",
    "# canvas40 = ROOT.TCanvas(\"c_jet2_phi\", \"\", 800, 800)\n",
    "# RealData[\"jet2_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jet2_phi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jet2_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas40.Draw()\n",
    "# canvasas['40'] = canvas40\n",
    "\n",
    "# canvas41 = ROOT.TCanvas(\"c_transverse_mass\", \"\", 800, 800)\n",
    "# RealData[\"transverse_mass\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"transverse_mass\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"transverse_mass\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas41.Draw()\n",
    "# canvasas['41'] = canvas41\n",
    "\n",
    "# canvas42 = ROOT.TCanvas(\"c_ht\", \"\", 800, 800)\n",
    "# RealData[\"ht\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"ht\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"ht\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas42.Draw()\n",
    "# canvasas['42'] = canvas42\n",
    "\n",
    "# canvas43 = ROOT.TCanvas(\"c_jpsi_muons_pt\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muons_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muons_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muons_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas43.Draw()\n",
    "# canvasas['43'] = canvas43\n",
    "\n",
    "# canvas44 = ROOT.TCanvas(\"c_jpsi_muons_eta\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muons_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muons_eta\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muons_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas44.Draw()\n",
    "# canvasas['44'] = canvas44\n",
    "\n",
    "# canvas45 = ROOT.TCanvas(\"c_jpsi_muons_phi\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muons_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muons_phi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muons_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas45.Draw()\n",
    "# canvasas['45'] = canvas45\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# canvas46 = ROOT.TCanvas(\"c_jpsi_muons_charge\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muons_charge\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muons_charge\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muons_charge\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas46.Draw()\n",
    "# canvasas['46'] = canvas46\n",
    "\n",
    "# canvas47 = ROOT.TCanvas(\"c_invariant_mass_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"invariant_mass_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"invariant_mass_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"invariant_mass_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas47.Draw()\n",
    "# canvasas['47'] = canvas47\n",
    "\n",
    "# canvas48 = ROOT.TCanvas(\"c_invariant_masses_zoomed\", \"\", 800, 800)\n",
    "# RealData[\"invariant_masses_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"invariant_masses_zoomed\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"invariant_masses_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas48.Draw()\n",
    "# canvasas['48'] = canvas48\n",
    "\n",
    "canvas49 = ROOT.TCanvas(\"c_invariant_mass_jpsi_muons_and_isolated_muons\", \"\", 800, 800)\n",
    "RealData[\"invariant_mass_jpsi_muons_and_isolated_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"invariant_mass_jpsi_muons_and_isolated_muons\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"invariant_mass_jpsi_muons_and_isolated_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas49.Draw()\n",
    "canvasas['49'] = canvas49\n",
    "\n",
    "# canvas50 = ROOT.TCanvas(\"c_delta_eta_between_isolated_and_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"delta_eta_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_eta_between_isolated_and_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_eta_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas50.Draw()\n",
    "# canvasas['50'] = canvas50\n",
    "\n",
    "# canvas51 = ROOT.TCanvas(\"c_delta_phi_between_isolated_and_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"delta_phi_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_phi_between_isolated_and_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_phi_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas51.Draw()\n",
    "# canvasas['51'] = canvas51\n",
    "\n",
    "# canvas52 = ROOT.TCanvas(\"c_delta_r_between_isolated_and_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"delta_r_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_r_between_isolated_and_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_r_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas52.Draw()\n",
    "# canvasas['52'] = canvas52\n",
    "\n",
    "# canvas53 = ROOT.TCanvas(\"c_jpsi_pt\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas53.Draw()\n",
    "# canvasas['53'] = canvas53\n",
    "\n",
    "# canvas54 = ROOT.TCanvas(\"c_jpsi_eta\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_eta\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas54.Draw()\n",
    "# canvasas['54'] = canvas54\n",
    "\n",
    "# canvas55 = ROOT.TCanvas(\"c_jpsi_phi\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_phi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas55.Draw()\n",
    "# canvasas['55'] = canvas55\n",
    "\n",
    "# canvas56 = ROOT.TCanvas(\"c_delta_eta_between_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"delta_eta_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_eta_between_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_eta_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas56.Draw()\n",
    "# canvasas['56'] = canvas56\n",
    "\n",
    "# canvas57 = ROOT.TCanvas(\"c_delta_phi_between_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"delta_phi_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_phi_between_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_phi_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas57.Draw()\n",
    "# canvasas['57'] = canvas57\n",
    "\n",
    "# canvas58 = ROOT.TCanvas(\"c_delta_r_between_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"delta_r_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_r_between_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_r_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas58.Draw()\n",
    "# canvasas['58'] = canvas58\n",
    "\n",
    "\n",
    "# canvas58a = ROOT.TCanvas(\"c_delta_r_between_jpsi_muons_in_peak\", \"\", 800, 800)\n",
    "# RealData[\"delta_r_between_jpsi_muons_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_r_between_jpsi_muons_in_peak\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_r_between_jpsi_muons_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas58a.Draw()\n",
    "# canvasas['58a'] = canvas58a\n",
    "\n",
    "\n",
    "# canvas59 = ROOT.TCanvas(\"c_delta_eta_between_isolated_muon_and_jpsi\", \"\", 800, 800)\n",
    "# RealData[\"delta_eta_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_eta_between_isolated_muon_and_jpsi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_eta_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas59.Draw()\n",
    "# canvasas['59'] = canvas59\n",
    "\n",
    "# canvas60 = ROOT.TCanvas(\"c_delta_phi_between_isolated_muon_and_jpsi\", \"\", 800, 800)\n",
    "# RealData[\"delta_phi_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_phi_between_isolated_muon_and_jpsi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_phi_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas60.Draw()\n",
    "# canvasas['60'] = canvas60\n",
    "\n",
    "# canvas61 = ROOT.TCanvas(\"c_delta_r_between_isolated_muon_and_jpsi\", \"\", 800, 800)\n",
    "# RealData[\"delta_r_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_r_between_isolated_muon_and_jpsi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_r_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas61.Draw()\n",
    "# canvasas['61'] = canvas61\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# canvas61a = ROOT.TCanvas(\"c_jpsi_muon_pt\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas61a.Draw()\n",
    "# canvasas['61a'] = canvas61a\n",
    "\n",
    "# canvas61b = ROOT.TCanvas(\"c_jpsi_muon_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas61b.Draw()\n",
    "# canvasas['61b'] = canvas61b\n",
    "\n",
    "# canvas61c = ROOT.TCanvas(\"c_jpsi_muon_pf_iso_id\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_pf_iso_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas61c.Draw()\n",
    "# canvasas['61c'] = canvas61c\n",
    "\n",
    "# canvas61d = ROOT.TCanvas(\"c_isolated_muons_in_range_pfRelIso03_all\", \"\", 800, 800)\n",
    "# RealData[\"isolated_muons_in_range_pfRelIso03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"isolated_muons_in_range_pfRelIso03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"isolated_muons_in_range_pfRelIso03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas61d.Draw()\n",
    "# canvasas['61d'] = canvas61d\n",
    "\n",
    "# canvas61e = ROOT.TCanvas(\"c_jpsi_muons_in_range_pfRelIso03_all\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muons_in_range_pfRelIso03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muons_in_range_pfRelIso03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muons_in_range_pfRelIso03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas61e.Draw()\n",
    "# canvasas['61e'] = canvas61e\n",
    "\n",
    "# canvas61f = ROOT.TCanvas(\"c_jpsi_mass_muons_in_range\", \"\", 800, 800)\n",
    "# #RealData[\"jpsi_mass_muons_in_range\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_mass_muons_in_range\"].Draw(\"HIST S\")\n",
    "# RealData[\"jpsi_mass_muons_in_range\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas61f.Draw()\n",
    "# canvasas['61f'] = canvas61f\n",
    "\n",
    "# canvas61g = ROOT.TCanvas(\"c_pt_at_low_delta_r\", \"\", 800, 800)\n",
    "# RealData[\"pt_at_low_delta_r\"][\"SingleMuon2018\"].Draw(\"P\")\n",
    "# canvas61g.Draw()\n",
    "# canvasas['61g'] = canvas61g\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# canvas63 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas63.Draw()\n",
    "# canvasas['63'] = canvas63\n",
    "\n",
    "# canvas64 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas64.Draw()\n",
    "# canvasas['64'] = canvas64\n",
    "\n",
    "# canvas65 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas65.Draw()\n",
    "# canvasas['65'] = canvas65\n",
    "\n",
    "# canvas66 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas66.Draw()\n",
    "# canvasas['66'] = canvas66\n",
    "\n",
    "# canvas67 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas67.Draw()\n",
    "# canvasas['67'] = canvas67\n",
    "\n",
    "# canvas68 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_all_zoomed\", \"\", 800, 800)\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all_zoomed\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas68.Draw()\n",
    "# canvasas['68'] = canvas68\n",
    "\n",
    "# canvas69 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_all_zoomed\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas69.Draw()\n",
    "# canvasas['69'] = canvas69\n",
    "\n",
    "# canvas70 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_all_zoomed\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas70.Draw()\n",
    "# canvasas['70'] = canvas70\n",
    "\n",
    "# canvas71 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_all_medium_id\", \"\", 800, 800)\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all_medium_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas71.Draw()\n",
    "# canvasas['71'] = canvas71\n",
    "\n",
    "# canvas72 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\", \"\", 800, 800)\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas72.Draw()\n",
    "# canvasas['72'] = canvas72\n",
    "\n",
    "# canvas73 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_chg_medium_id\", \"\", 800, 800)\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas73.Draw()\n",
    "# canvasas['73'] = canvas73\n",
    "\n",
    "# canvas74 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_all_medium_id\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas74.Draw()\n",
    "# canvasas['74'] = canvas74\n",
    "\n",
    "# canvas75 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas75.Draw()\n",
    "# canvasas['75'] = canvas75\n",
    "\n",
    "# canvas76 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas76.Draw()\n",
    "# canvasas['76'] = canvas76\n",
    "\n",
    "# canvas77 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_all_medium_id\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas77.Draw()\n",
    "# canvasas['77'] = canvas77\n",
    "\n",
    "# canvas78 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas78.Draw()\n",
    "# canvasas['78'] = canvas78\n",
    "\n",
    "# canvas79 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas79.Draw()\n",
    "# canvasas['79'] = canvas79\n",
    "\n",
    "# canvas80 = ROOT.TCanvas(\"c_jpsi_muon_positive_peak_only_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas80.Draw()\n",
    "# canvasas['80'] = canvas80\n",
    "\n",
    "# canvas81 = ROOT.TCanvas(\"c_jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas81.Draw()\n",
    "# canvasas['81'] = canvas81\n",
    "\n",
    "# canvas82 = ROOT.TCanvas(\"c_jpsi_muon_negative_peak_only_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas82.Draw()\n",
    "# canvasas['82'] = canvas82\n",
    "\n",
    "# canvas83 = ROOT.TCanvas(\"c_jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas83.Draw()\n",
    "# canvasas['83'] = canvas83\n",
    "\n",
    "# canvas84 = ROOT.TCanvas(\"c_further_muon_medium_tight_pt\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_medium_tight_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_medium_tight_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_medium_tight_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas84.Draw()\n",
    "# canvasas['84'] = canvas84\n",
    "\n",
    "# canvas85 = ROOT.TCanvas(\"c_further_muon_medium_tight_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_medium_tight_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas85.Draw()\n",
    "# canvasas['85'] = canvas85\n",
    "\n",
    "# canvas86 = ROOT.TCanvas(\"c_further_muon_medium_tight_pf_iso_id\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_medium_tight_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_medium_tight_pf_iso_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_medium_tight_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas86.Draw()\n",
    "# canvasas['86'] = canvas86\n",
    "\n",
    "# canvas87 = ROOT.TCanvas(\"c_further_muon_loose_tight_pt\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_loose_tight_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_loose_tight_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_loose_tight_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas87.Draw()\n",
    "# canvasas['87'] = canvas87\n",
    "\n",
    "# canvas88 = ROOT.TCanvas(\"c_further_muon_loose_tight_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_loose_tight_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas88.Draw()\n",
    "# canvasas['88'] = canvas88\n",
    "\n",
    "# canvas89 = ROOT.TCanvas(\"c_further_muon_loose_tight_pf_iso_id\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_loose_tight_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_loose_tight_pf_iso_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_loose_tight_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas89.Draw()\n",
    "# canvasas['89'] = canvas89\n",
    "         \n",
    "# canvas90 = ROOT.TCanvas(\"c_further_muon_medium_medium_pt\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_medium_medium_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_medium_medium_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_medium_medium_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas90.Draw()\n",
    "# canvasas['90'] = canvas90\n",
    "\n",
    "# canvas91 = ROOT.TCanvas(\"c_further_muon_medium_medium_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_medium_medium_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas91.Draw()\n",
    "# canvasas['91'] = canvas91\n",
    "\n",
    "# canvas92 = ROOT.TCanvas(\"c_further_muon_medium_medium_pf_iso_id\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_medium_medium_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_medium_medium_pf_iso_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_medium_medium_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas92.Draw()\n",
    "# canvasas['92'] = canvas92\n",
    "\n",
    "# canvas93 = ROOT.TCanvas(\"c_further_muon_loose_medium_pt\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_loose_medium_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_loose_medium_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_loose_medium_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas93.Draw()\n",
    "# canvasas['93'] = canvas93\n",
    "\n",
    "# canvas94 = ROOT.TCanvas(\"c_further_muon_loose_medium_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_loose_medium_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas94.Draw()\n",
    "# canvasas['94'] = canvas94\n",
    "\n",
    "# canvas95 = ROOT.TCanvas(\"c_further_muon_loose_medium_pf_iso_id\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_loose_medium_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_loose_medium_pf_iso_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_loose_medium_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas95.Draw()\n",
    "# canvasas['95'] = canvas95\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "canvas96 = ROOT.TCanvas(\"c_jpsi_mass_in_peak\", \"\", 800, 800)\n",
    "RealData[\"jpsi_mass_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_mass_in_peak\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_mass_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas96.Draw()\n",
    "canvasas['96'] = canvas96\n",
    "\n",
    "canvas97 = ROOT.TCanvas(\"c_delta_eta_for_jpsi_muons_in_peak\", \"\", 800, 800)\n",
    "RealData[\"delta_eta_for_jpsi_muons_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_eta_for_jpsi_muons_in_peak\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_eta_for_jpsi_muons_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas97.Draw()\n",
    "canvasas['97'] = canvas97\n",
    "\n",
    "canvas98 = ROOT.TCanvas(\"c_delta_phi_for_jpsi_muons_in_peak\", \"\", 800, 800)\n",
    "RealData[\"delta_phi_for_jpsi_muons_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_phi_for_jpsi_muons_in_peak\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_phi_for_jpsi_muons_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas98.Draw()\n",
    "canvasas['98'] = canvas98\n",
    "\n",
    "canvas99 = ROOT.TCanvas(\"c_delta_r_for_jpsi_muons_in_peak\", \"\", 800, 800)\n",
    "RealData[\"delta_r_for_jpsi_muons_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_r_for_jpsi_muons_in_peak\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_r_for_jpsi_muons_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas99.Draw()\n",
    "canvasas['99'] = canvas99\n",
    "\n",
    "canvas100 = ROOT.TCanvas(\"c_jpsi_muons_charge_in_peak\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muons_charge_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muons_charge_in_peak\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muons_charge_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas100.Draw()\n",
    "canvasas['100'] = canvas100\n",
    "\n",
    "canvas101 = ROOT.TCanvas(\"c_jpsi_pt_with_muon_in_peak\", \"\", 800, 800)\n",
    "RealData[\"jpsi_pt_with_muon_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_pt_with_muon_in_peak\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_pt_with_muon_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas101.Draw()\n",
    "canvasas['101'] = canvas101\n",
    "\n",
    "canvas101a = ROOT.TCanvas(\"c_jpsi_muon_pts_in_peak\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_pts_in_peak\"][\"SingleMuon2018\"].Draw(\"P\")\n",
    "canvas101a.Draw()\n",
    "canvasas['101a'] = canvas101a\n",
    "\n",
    "\n",
    "\n",
    "canvas102 = ROOT.TCanvas(\"c_jpsi_muon_isolation_in_peak\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_isolation_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_isolation_in_peak\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_isolation_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas102.Draw()\n",
    "canvasas['102'] = canvas102\n",
    "\n",
    "canvas103 = ROOT.TCanvas(\"c_top_mass_in_peak\", \"\", 800, 800)\n",
    "RealData[\"top_mass_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"top_mass_in_peak\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"top_mass_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas103.Draw()\n",
    "canvasas['103'] = canvas103\n",
    "\n",
    "canvas104 = ROOT.TCanvas(\"c_delta_eta_between_isolated_muon_and_jpsi_in_peak\", \"\", 800, 800)\n",
    "RealData[\"delta_eta_between_isolated_muon_and_jpsi_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_eta_between_isolated_muon_and_jpsi_in_peak\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_eta_between_isolated_muon_and_jpsi_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas104.Draw()\n",
    "canvasas['104'] = canvas104\n",
    "\n",
    "canvas105 = ROOT.TCanvas(\"c_delta_phi_between_isolated_muon_and_jpsi_in_peak\", \"\", 800, 800)\n",
    "RealData[\"delta_phi_between_isolated_muon_and_jpsi_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_phi_between_isolated_muon_and_jpsi_in_peak\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_phi_between_isolated_muon_and_jpsi_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas105.Draw()\n",
    "canvasas['105'] = canvas105\n",
    "\n",
    "canvas106 = ROOT.TCanvas(\"c_delta_r_between_isolated_muon_and_jpsi_in_peak\", \"\", 800, 800)\n",
    "RealData[\"delta_r_between_isolated_muon_and_jpsi_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_r_between_isolated_muon_and_jpsi_in_peak\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_r_between_isolated_muon_and_jpsi_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas106.Draw()\n",
    "canvasas['106'] = canvas106"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Opening PDF\n",
      "Closing PDF\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Info in <TCanvas::Print>: pdf file Gordon_Michael_August_4_2022.pdf has been created using the current canvas\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_August_4_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_August_4_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_August_4_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_August_4_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_August_4_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_August_4_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_August_4_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_August_4_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_August_4_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_August_4_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_August_4_2022.pdf and file closed\n"
     ]
    }
   ],
   "source": [
    "for kn, k in enumerate(canvasas.keys()):\n",
    "    \n",
    "    if kn == 0:\n",
    "        print(\"Opening PDF\")\n",
    "        canvasas[k].SaveAs('Gordon_Michael_August_4_2022.pdf(')\n",
    "    \n",
    "    elif kn == len(canvasas) - 1:\n",
    "        print(\"Closing PDF\")\n",
    "        canvasas[k].SaveAs('Gordon_Michael_August_4_2022.pdf)')\n",
    "    \n",
    "    else:\n",
    "        canvasas[k].SaveAs('Gordon_Michael_August_4_2022.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "era = \"2017\"\n",
    "channel = \"Mu\"\n",
    "\n",
    "def DrawStack(MonteCarlo, Data, separator = \"___\"):\n",
    "    era, channel, sample, variable, systematic = list(MonteCarlo.values())[0].GetName().split(separator)\n",
    "    name = \"_\".join([\"stack\", era, channel, variable, systematic])\n",
    "    colors = {\"TTToSemiLeptonic\" : ROOT.kRed}\n",
    "    stack = ROOT.THStack(name, \"\")\n",
    "    \n",
    "    canvas = ROOT.TCanvas(name.replace(\"stack\", \"canvas\"), \"\", 800, 800)\n",
    "  \n",
    "    \n",
    "    for sample, hist in MonteCarlo.items():\n",
    "        hist.SetFillColor(colors.get(sample, ROOT.kMagenta))\n",
    "        hist.SetLineColor(colors.get(sample, ROOT.kMagenta))\n",
    "        stack.Add(hist)\n",
    "        \n",
    "    aggregate = None\n",
    "    \n",
    "    for sample, hist in Data.items():\n",
    "        if aggregate == None:\n",
    "            aggregate = hist.Clone(hist.GetName().replace(\"sample\", \"allData\"))\n",
    "            \n",
    "        else:\n",
    "            aggregate += hist\n",
    "    \n",
    "    maxima = []\n",
    "    minima = []\n",
    "    maxima.append(stack.GetMaximum())\n",
    "    maxima.append(aggregate.GetMaximum())\n",
    "    minima.append(stack.GetMinimum())\n",
    "    minima.append(aggregate.GetMinimum())\n",
    "    \n",
    "    stack.SetMinimum(min(minima))\n",
    "    stack.SetMaximum(max(maxima))\n",
    "    \n",
    "    stack.Draw(\"HIST S\")\n",
    "    aggregate.Draw(\"PE1 SAME\")\n",
    "    \n",
    "    canvas.BuildLegend()\n",
    "    \n",
    "    return stack, aggregate, canvas\n",
    "\n",
    "for kn, variable in enumerate(variables):\n",
    "        \n",
    "    MonteCarlo, RealData = GetHistos(f, era, channel, variable)\n",
    "    \n",
    "    stack, aggregate, canvas = DrawStack(MonteCarlo, RealData)\n",
    "       \n",
    "    if kn == 0:\n",
    "        print(\"Opening PDF\")\n",
    "        canvas.SaveAs('December2.pdf(')\n",
    "\n",
    "    elif kn == len(variables) - 1:\n",
    "        print(\"Closing PDF\")\n",
    "        canvas.SaveAs('December2.pdf)')\n",
    "\n",
    "    else:\n",
    "        canvas.SaveAs('December2.pdf')\n",
    "        \n",
    "    canvas.SaveAs(variable + 'December2.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on _Helper in module _sitebuiltins object:\n",
      "\n",
      "class _Helper(builtins.object)\n",
      " |  Define the builtin 'help'.\n",
      " |  \n",
      " |  This is a wrapper around pydoc.help that provides a helpful message\n",
      " |  when 'help' is typed at the Python interactive prompt.\n",
      " |  \n",
      " |  Calling help() at the Python prompt starts an interactive help session.\n",
      " |  Calling help(thing) prints help for the python object 'thing'.\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  __call__(self, *args, **kwds)\n",
      " |      Call self as a function.\n",
      " |  \n",
      " |  __repr__(self)\n",
      " |      Return repr(self).\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors defined here:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(help)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
