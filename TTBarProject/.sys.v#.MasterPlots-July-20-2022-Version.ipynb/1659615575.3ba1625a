{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.26/04\n"
     ]
    }
   ],
   "source": [
    "import ROOT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 38893\r\n",
      "-rw-r--r--. 1 migordon 1399   15708 Aug 18  2020 TTto2L2Nu.txt\r\n",
      "-rw-r--r--. 1 migordon 1399   41132 Aug 18  2020 TTToSemiLeptonic.txt\r\n",
      "-rw-r--r--. 1 migordon 1399   14492 Aug 25  2020 Plots.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   37773 Aug 27  2020 August26.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   34610 Sep  2  2020 FTFunctions.cpp\r\n",
      "-rw-r--r--. 1 migordon 1399    5774 Sep 21  2020 RealData\r\n",
      "-rw-r--r--. 1 migordon 1399   45563 Sep 23  2020 September9.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   45708 Sep 24  2020 September23MonteCarlo.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   46111 Sep 24  2020 September23RealData.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   48733 Oct  9  2020 October8MonteCarlo.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399     926 Oct 20  2020 graph.dot.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  145577 Oct 20  2020 October15.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   49188 Nov 11  2020 October8RealData.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  159946 Nov 23  2020 November12.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  159946 Nov 23  2020 November23.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  159946 Nov 24  2020 November24.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  114959 Dec  3  2020 December2.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  145516 Dec 10  2020 December10.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198313 Jan 19  2021 January18LooseID.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198153 Jan 21  2021 January21MediumID.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198536 Jan 21  2021 January21TightID.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198491 Jan 26  2021 January26WithVeto.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  197655 Jan 28  2021 January28WithVeto.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198647 Feb 23  2021 February16AtLeastOneVetoedMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  269832 Feb 23  2021 FirstTTreeAnalysisMonteCarlo-Backup.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  378821 Feb 23  2021 FirstTTreeAnalysisMonteCarlo-Backup-Jaunary-21-2021.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  198548 Feb 24  2021 February23ExactlyOneGoodMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198645 Feb 24  2021 February23AtLeastOneGoodMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  148905 Feb 24  2021 February23NoGoodMuons.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198461 Feb 24  2021 February24VetoedMuons.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  197977 Feb 25  2021 February25AtLeastOneGoodMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198084 Feb 25  2021 February25VetoedMuons.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  237095 Mar  7  2021 March2.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  273136 Mar  8  2021 March8.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  277452 May  2  2021 April27.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  383603 May  3  2021 May3.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  385981 May  5  2021 May4AtLeast4JetsAtLeast1BTagged.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399    7149 May  5  2021 WJetsToLNu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   46268 May  5  2021 2017_Mu_TTToSemiLeptonic.root\r\n",
      "-rw-r--r--. 1 migordon 1399   29677 May  5  2021 2017_Mu_WJetsToLNu.root\r\n",
      "-rw-r--r--. 1 migordon 1399  382235 May  5  2021 FirstTTreeAnalysisMonteCarlo2017Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   21530 May  5  2021 2017_Mu_Data.root\r\n",
      "-rw-r--r--. 1 migordon 1399  264376 May  6  2021 FirstTTreeAnalysisRealData2017Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399    7138 May  6  2021 TTToSemiLeptonic.dot\r\n",
      "-rw-r--r--. 1 migordon 1399    7261 May  6  2021 TTTo2L2Nu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399    7219 May  6  2021 graph.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   44070 May  6  2021 2018_Mu_TTToSemiLeptonic.root\r\n",
      "-rw-r--r--. 1 migordon 1399   44250 May  6  2021 2018_Mu_TTTo2L2Nu.root\r\n",
      "-rw-r--r--. 1 migordon 1399  388482 May  6  2021 May6.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  292166 May 12  2021 FirstTTreeAnalysisMonteCarlo2018Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  322266 May 12  2021 May11.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   34610 May 26  2021 TopMassFunctions.cpp\r\n",
      "-rw-r--r--. 1 migordon 1399   24558 Aug 19  2021 FirstTTreeAnalysis2018United-Backup.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399     427 Aug 24  2021 New_Combination.root\r\n",
      "-rw-r--r--. 1 migordon 1399  152243 Aug 25  2021 August25_50K_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  253643 Aug 25  2021 August25_500K_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  268165 Aug 26  2021 August25_1M_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  288466 Aug 26  2021 August25_3M_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  293684 Aug 26  2021 August25_5M_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   32517 Aug 30  2021 FirstTTreeAnalysis2018United-Backup-Copy1.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  308929 Aug 31  2021 August31.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  287815 Sep  1  2021 September1.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  165129 Sep  2  2021 FirstTTreeAnalysisRealData2018Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  342481 Sep  3  2021 September2.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  354661 Sep 21  2021 September21TightMedium.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  354301 Sep 21  2021 September21TightTight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  354485 Sep 21  2021 September22MediumTight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  568715 Sep 28  2021 MasterPlots-9-27-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  366143 Oct  1  2021 September30.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  608173 Oct  6  2021 MasterPlots-10-5-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  718643 Oct 20  2021 MasterPlots-10-20-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  460135 Oct 21  2021 October21.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  459750 Oct 28  2021 October26.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  469993 Nov 11  2021 November11.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  815942 Dec 20  2021 MasterPlots.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   35815 Jan  7  2022 FirstTTreeAnalysis2018United-AdditionalJPsi.py\r\n",
      "-rw-r--r--. 1 migordon 1399   48706 Jan  7  2022 FirstTTreeAnalysis2018United-AdditionalJPsi.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399 5254040 Jan  9  2022 FirstTTreeAnalysis2018United-AdditionalJPsi-OldCopy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   49408 Jan  9  2022 FirstTTreeAnalysis2018United-AdditionalJPsi-1-9-22-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   52579 Jan 10  2022 FirstTTreeAnalysis2018United-AdditionalJPsi-Late2021Fixes.py\r\n",
      "-rw-r--r--. 1 migordon 1399   22036 May  9 11:57 FirstTTreeAnalysis2018United.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   75336 May 14 12:09 May14_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  134983 May 26 14:41 May26_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  156426 Jun 13 14:42 June13_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   76628 Jun 13 16:00 FirstTTreeAnalysis2018United-AdditionalJPsi-Late2021Fixes.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   41767 Jun 13 17:53 FirstTTreeAnalysis2018United-AdditionalJPsi-10-20-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  317522 Jun 14 16:22 June14_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   39626 Jun 20 15:21 FirstTTreeAnalysis2018United-AdditionalJPsi-10-5-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   27369 Jun 20 16:49 FirstTTreeAnalysis2018United-AdditionalJPsi-10-5-21-Copy.py\r\n",
      "-rw-r--r--. 1 migordon 1399  115107 Jun 21 15:12 FirstTTreeAnalysis2018United-AdditionalJPsi-May_23_2022_Version.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  552871 Jun 21 16:25 MasterPlots-Late2021Fixes.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  461138 Jun 23 17:27 June23_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  267495 Jun 27 14:57 FirstTTreeAnalysisRealData-Backup-January-21-2021.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  472488 Jun 30 17:37 June30_2022_JPsiZoomed.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   32374 Jul  1 16:35 FirstTTreeAnalysis2018United-AdditionalJPsi-9-27-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   66434 Jul  1 23:03 FirstTTreeAnalysis2018United-AdditionalJPsi-June_20_2022_Version-Common-Filters-First.py\r\n",
      "-rw-r--r--. 1 migordon 1399   80894 Jul  3 13:20 FirstTTreeAnalysis2018United-AdditionalJPsi-June_20_2022_Version-Common-Filters-First.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  605767 Jul  3 20:45 July3_2022_MinimumFourJets.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  173470 Jul  4 12:49 MasterPlots-June-20-2022-Version.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  702825 Jul  4 13:22 July4_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  705989 Jul  5 09:55 July5_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   95925 Jul 10 23:20 FirstTTreeAnalysis2018United-AdditionalJPsi-July_10_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  776465 Jul 10 23:49 July10_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   97291 Jul 11 01:36 FirstTTreeAnalysis2018United-AdditionalJPsi-July_3_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   80141 Jul 11 01:38 FirstTTreeAnalysis2018United-AdditionalJPsi-July_3_2022.py\r\n",
      "-rw-r--r--. 1 migordon 1399   98358 Jul 11 02:56 TopQuark_JPsi_Analysis-July_11_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   80916 Jul 11 02:57 TopQuark_JPsi_Analysis-July_11_2022.py\r\n",
      "-rw-r--r--. 1 migordon 1399  769640 Jul 11 03:12 July11_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   95925 Jul 11 09:41 FirstTTreeAnalysis2018United-AdditionalJPsi-July_11_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  802986 Jul 11 10:35 July11_2022_a.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   77722 Jul 11 11:04 TopQuark_JPsi_Analysis-July_11_2022-Copy1.py\r\n",
      "-rw-r--r--. 1 migordon 1399  838420 Jul 11 11:30 July11_2022_b.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  900846 Jul 12 19:46 July12_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399 1057489 Jul 13 15:13 July13_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399 1049253 Jul 13 22:15 July13_2022_Isolated_Tight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   83308 Jul 17 18:38 Gordon_Michael_July_17_2022_Alternate_Muon_IDs.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  613179 Jul 20 08:43 MasterPlots-July-3-2022-Version.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   75405 Jul 20 12:46 Gordon_Michael_July_20_2022_Medium_Tight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   90076 Jul 21 07:24 Gordon_Michael_July_20_2022_Medium_Tight_Revised.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  535140 Jul 21 11:17 Gordon_Michael_July_21_2022_Medium_Tight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  927599 Jul 21 18:29 Gordon_Michael_July_21_2022_Medium_Tight_Revised.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  937378 Jul 21 19:27 Gordon_Michael_July_21_2022_Medium_Tight_Revised_Twice.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  540881 Jul 24 10:30 Combination.root_backup\r\n",
      "-rw-r--r--. 1 migordon 1399 1008949 Jul 24 10:30 Gordon_Michael_July_24_2022.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  150120 Jul 25 09:46 TopQuark_JPsi_Analysis-July_12_2022.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  128259 Jul 25 09:49 TopQuark_JPsi_Analysis-July_12_2022.py\r\n",
      "drwxr-xr-x. 2 migordon 1399    4096 Jul 25 09:49 __pycache__\r\n",
      "-rw-r--r--. 1 migordon 1399   16805 Jul 25 09:51 Data.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   28903 Jul 25 09:51 Data_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   17073 Jul 25 09:51 MonteCarloTTToSemiLeptonic.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   30670 Jul 25 09:51 MonteCarloTTToSemiLeptonic_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   17073 Jul 25 09:51 MonteCarloTTTo2L2Nu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   30670 Jul 25 09:51 MonteCarloTTTo2L2Nu_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   17073 Jul 25 09:51 MonteCarloWJetsToLNu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   30670 Jul 25 09:51 MonteCarloWJetsToLNu_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   17073 Jul 25 09:51 MonteCarloST_tW_top.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   30670 Jul 25 09:51 MonteCarloST_tW_top_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   17200 Jul 25 09:51 MonteCarloST_tchannel_top.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   30670 Jul 25 09:51 MonteCarloST_tchannel_top_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   64324 Jul 25 09:53 2018_Mu_Data.root\r\n",
      "-rw-r--r--. 1 migordon 1399  114576 Jul 25 09:54 2018_Mu_MonteCarloTTToSemiLeptonic.root\r\n",
      "-rw-r--r--. 1 migordon 1399  114957 Jul 25 09:56 2018_Mu_MonteCarloTTTo2L2Nu.root\r\n",
      "-rw-r--r--. 1 migordon 1399  103486 Jul 25 09:56 2018_Mu_MonteCarloWJetsToLNu.root\r\n",
      "-rw-r--r--. 1 migordon 1399   63399 Jul 25 09:56 2018_Mu_MonteCarloST_tW_top.root\r\n",
      "-rw-r--r--. 1 migordon 1399   76304 Jul 25 09:57 2018_Mu_MonteCarloST_tchannel_top.root\r\n",
      "-rw-r--r--. 1 migordon 1399  518997 Jul 25 09:57 Combination.root\r\n",
      "-rw-r--r--. 1 migordon 1399  310187 Jul 25 09:58 MasterPlots-July-20-2022-Version.ipynb\r\n"
     ]
    }
   ],
   "source": [
    "!ls -ltr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hadd Target file: Combination.root\n",
      "hadd compression setting for all output: 1\n",
      "hadd Source file 1: 2018_Mu_Data.root\n",
      "hadd Source file 2: 2018_Mu_MonteCarloTTToSemiLeptonic.root\n",
      "hadd Source file 3: 2018_Mu_MonteCarloTTTo2L2Nu.root\n",
      "hadd Source file 4: 2018_Mu_MonteCarloWJetsToLNu.root\n",
      "hadd Source file 5: 2018_Mu_MonteCarloST_tW_top.root\n",
      "hadd Source file 6: 2018_Mu_MonteCarloST_tchannel_top.root\n",
      "hadd Target path: Combination.root:/\n"
     ]
    }
   ],
   "source": [
    "!mv Combination.root Combination.root_backup\n",
    "!hadd -f Combination.root 2018_Mu_Data.root 2018_Mu_MonteCarloTTToSemiLeptonic.root 2018_Mu_MonteCarloTTTo2L2Nu.root 2018_Mu_MonteCarloWJetsToLNu.root 2018_Mu_MonteCarloST_tW_top.root 2018_Mu_MonteCarloST_tchannel_top.root"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2018___Mu___Data___leading_isolated_muon_pt_initial___nominal', '2018___Mu___Data___leading_isolated_muon_eta_initial___nominal', '2018___Mu___Data___leading_isolated_muon_phi_initial___nominal', '2018___Mu___Data___leading_isolated_muon_mass_initial___nominal', '2018___Mu___Data___leading_isolated_muon_charge_initial___nominal', '2018___Mu___Data___leading_isolated_electron_pt_initial___nominal', '2018___Mu___Data___leading_isolated_electron_eta_initial___nominal', '2018___Mu___Data___leading_isolated_electron_phi_initial___nominal', '2018___Mu___Data___leading_isolated_electron_mass_initial___nominal', '2018___Mu___Data___leading_isolated_electron_charge_initial___nominal', '2018___Mu___Data___met_before_met_cut___nominal', '2018___Mu___Data___met_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___Data___number_of_jets_initial___nominal', '2018___Mu___Data___number_of_jets___nominal', '2018___Mu___Data___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___Data___number_of_jpsi_muons_initial___nominal', '2018___Mu___Data___number_of_jpsi_muons___nominal', '2018___Mu___Data___leading_isolated_muon_pt___nominal', '2018___Mu___Data___leading_isolated_muon_eta___nominal', '2018___Mu___Data___leading_isolated_muon_phi___nominal', '2018___Mu___Data___leading_isolated_muon_mass___nominal', '2018___Mu___Data___leading_isolated_muon_charge___nominal', '2018___Mu___Data___jet1_pt___nominal', '2018___Mu___Data___jet2_pt___nominal', '2018___Mu___Data___jet1_eta___nominal', '2018___Mu___Data___jet2_eta___nominal', '2018___Mu___Data___jet1_phi___nominal', '2018___Mu___Data___jet2_phi___nominal', '2018___Mu___Data___transverse_mass___nominal', '2018___Mu___Data___ht___nominal', '2018___Mu___Data___jpsi_muons_pt___nominal', '2018___Mu___Data___jpsi_muons_eta___nominal', '2018___Mu___Data___jpsi_muons_phi___nominal', '2018___Mu___Data___jpsi_muons_charge___nominal', '2018___Mu___Data___invariant_mass_jpsi_muons___nominal', '2018___Mu___Data___invariant_masses_zoomed___nominal', '2018___Mu___Data___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___Data___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___jpsi_pt___nominal', '2018___Mu___Data___jpsi_eta___nominal', '2018___Mu___Data___jpsi_phi___nominal', '2018___Mu___Data___delta_eta_between_jpsi_muons___nominal', '2018___Mu___Data___delta_phi_between_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___Data___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___jpsi_muon_pt___nominal', '2018___Mu___Data___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___Data___jpsi_muon_pf_iso_id___nominal', '2018___Mu___Data___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___Data___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___Data___jpsi_mass_muons_in_range___nominal', '2018___Mu___Data___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___met_before_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___met_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___transverse_mass___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___ht___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___met_before_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___met_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___transverse_mass___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___ht___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___met_before_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___met_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jets_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jets___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___transverse_mass___nominal', '2018___Mu___MonteCarloWJetsToLNu___ht___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloWJetsToLNu___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloST_tW_top___met_before_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___met_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jets_initial___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jets___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_phi___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_phi___nominal', '2018___Mu___MonteCarloST_tW_top___transverse_mass___nominal', '2018___Mu___MonteCarloST_tW_top___ht___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_phi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloST_tW_top___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___met_before_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___met_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jets_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jets___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___transverse_mass___nominal', '2018___Mu___MonteCarloST_tchannel_top___ht___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloST_tchannel_top___pt_at_low_delta_r___nominal']\n"
     ]
    }
   ],
   "source": [
    "f = ROOT.TFile.Open('Combination.root', 'read')\n",
    "k = [ff.GetName() for ff in f.GetListOfKeys()]\n",
    "print(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "eras = list(set([kk.split(\"___\")[0] for kk in k]))\n",
    "channels = list(set([kk.split(\"___\")[1] for kk in k]))\n",
    "samples = list(set([kk.split(\"___\")[2] for kk in k]))\n",
    "variables = list(set([kk.split(\"___\")[3] for kk in k]))\n",
    "systematics = list(set([kk.split(\"___\")[4] for kk in k]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2018']\n",
      "['Mu']\n",
      "['MonteCarloST_tchannel_top', 'MonteCarloWJetsToLNu', 'Data', 'MonteCarloST_tW_top', 'MonteCarloTTTo2L2Nu', 'MonteCarloTTToSemiLeptonic']\n",
      "['leading_isolated_muon_charge', 'leading_isolated_electron_charge_after_met_cut', 'number_of_jets_initial', 'met_after_met_cut', 'leading_isolated_muon_mass_after_met_cut', 'jet2_eta', 'leading_isolated_muon_mass', 'delta_eta_between_isolated_and_jpsi_muons', 'delta_phi_between_isolated_muon_and_jpsi', 'delta_r_between_jpsi_muons_in_peak', 'leading_isolated_muon_charge_after_jet_cut', 'leading_isolated_muon_phi_after_jet_cut', 'leading_isolated_electron_mass_initial', 'leading_isolated_muon_charge_after_met_cut', 'leading_isolated_muon_mass_initial', 'jpsi_phi', 'pt_at_low_delta_r', 'number_of_jets', 'jet1_phi', 'delta_phi_between_isolated_and_jpsi_muons', 'leading_isolated_muon_phi_after_met_cut', 'jet1_eta', 'delta_r_between_isolated_and_jpsi_muons', 'delta_phi_between_jpsi_muons', 'jpsi_mass_muons_in_range', 'delta_eta_between_jpsi_muons', 'leading_isolated_muon_eta', 'delta_r_between_jpsi_muons', 'leading_isolated_muon_charge_initial', 'leading_isolated_electron_pt_initial', 'leading_isolated_muon_eta_after_met_cut', 'leading_isolated_electron_eta_initial', 'leading_isolated_muon_eta_initial', 'leading_isolated_muon_pt_after_met_cut', 'leading_isolated_electron_phi_initial', 'leading_isolated_electron_mass_after_met_cut', 'delta_eta_between_isolated_muon_and_jpsi', 'invariant_masses_zoomed', 'invariant_mass_jpsi_muons', 'delta_r_between_isolated_muon_and_jpsi', 'jpsi_eta', 'leading_isolated_muon_phi', 'jpsi_muons_charge', 'jpsi_muon_pt', 'number_of_jpsi_muons', 'transverse_mass', 'leading_isolated_muon_mass_after_jet_cut', 'ht', 'leading_isolated_electron_charge_initial', 'jet2_pt', 'jet2_phi', 'jpsi_muon_pf_iso_id', 'invariant_mass_jpsi_and_isolated_muons', 'jpsi_pt', 'leading_isolated_electron_phi_after_met_cut', 'jpsi_muons_eta', 'leading_isolated_muon_pt_initial', 'leading_isolated_muon_pt_after_jet_cut', 'number_of_jpsi_muons_initial', 'leading_isolated_electron_pt_after_met_cut', 'jpsi_muons_pt', 'jpsi_muon_pf_rel_iso_03_all', 'leading_isolated_muon_pt', 'jpsi_muons_in_range_pfRelIso03_all', 'leading_isolated_muon_phi_initial', 'leading_isolated_electron_eta_after_met_cut', 'leading_isolated_muon_eta_after_jet_cut', 'jet1_pt', 'met_before_met_cut', 'isolated_muons_in_range_pfRelIso03_all', 'jpsi_muons_phi']\n",
      "['nominal']\n"
     ]
    }
   ],
   "source": [
    "print(eras)\n",
    "print(channels)\n",
    "print(samples)\n",
    "print(variables)\n",
    "print(systematics)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def GetHistos(f, era, channel, variable, systematic = \"nominal\", separator = \"___\"):\n",
    "    \n",
    "    MC = dict()\n",
    "    Data = dict()\n",
    "    \n",
    "    k = [ff.GetName() for ff in f.GetListOfKeys()]\n",
    "    print(k)\n",
    "    k = [kk for kk in k if era == kk.split(separator)[0]]\n",
    "    k = [kk for kk in k if channel == kk.split(separator)[1]]\n",
    "    k = [kk for kk in k if variable == kk.split(separator)[3]]\n",
    "    k = [kk for kk in k if systematic == kk.split(separator)[4]]\n",
    "    \n",
    "    for kk in k:\n",
    "        sample = kk.split(separator)[2]\n",
    "        \n",
    "        if \"data\" in sample.lower():\n",
    "            Data[sample] = f.Get(kk)\n",
    "            print(\"Data\")\n",
    "            \n",
    "        else:\n",
    "            MC[sample] = f.Get(kk)\n",
    "            print(sample)\n",
    "            \n",
    "    return MC, Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2018___Mu___Data___leading_isolated_muon_pt_initial___nominal', '2018___Mu___Data___leading_isolated_muon_eta_initial___nominal', '2018___Mu___Data___leading_isolated_muon_phi_initial___nominal', '2018___Mu___Data___leading_isolated_muon_mass_initial___nominal', '2018___Mu___Data___leading_isolated_muon_charge_initial___nominal', '2018___Mu___Data___leading_isolated_electron_pt_initial___nominal', '2018___Mu___Data___leading_isolated_electron_eta_initial___nominal', '2018___Mu___Data___leading_isolated_electron_phi_initial___nominal', '2018___Mu___Data___leading_isolated_electron_mass_initial___nominal', '2018___Mu___Data___leading_isolated_electron_charge_initial___nominal', '2018___Mu___Data___met_before_met_cut___nominal', '2018___Mu___Data___met_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___Data___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___Data___number_of_jets_initial___nominal', '2018___Mu___Data___number_of_jets___nominal', '2018___Mu___Data___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___Data___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___Data___number_of_jpsi_muons_initial___nominal', '2018___Mu___Data___number_of_jpsi_muons___nominal', '2018___Mu___Data___leading_isolated_muon_pt___nominal', '2018___Mu___Data___leading_isolated_muon_eta___nominal', '2018___Mu___Data___leading_isolated_muon_phi___nominal', '2018___Mu___Data___leading_isolated_muon_mass___nominal', '2018___Mu___Data___leading_isolated_muon_charge___nominal', '2018___Mu___Data___jet1_pt___nominal', '2018___Mu___Data___jet2_pt___nominal', '2018___Mu___Data___jet1_eta___nominal', '2018___Mu___Data___jet2_eta___nominal', '2018___Mu___Data___jet1_phi___nominal', '2018___Mu___Data___jet2_phi___nominal', '2018___Mu___Data___transverse_mass___nominal', '2018___Mu___Data___ht___nominal', '2018___Mu___Data___jpsi_muons_pt___nominal', '2018___Mu___Data___jpsi_muons_eta___nominal', '2018___Mu___Data___jpsi_muons_phi___nominal', '2018___Mu___Data___jpsi_muons_charge___nominal', '2018___Mu___Data___invariant_mass_jpsi_muons___nominal', '2018___Mu___Data___invariant_masses_zoomed___nominal', '2018___Mu___Data___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___Data___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___Data___jpsi_pt___nominal', '2018___Mu___Data___jpsi_eta___nominal', '2018___Mu___Data___jpsi_phi___nominal', '2018___Mu___Data___delta_eta_between_jpsi_muons___nominal', '2018___Mu___Data___delta_phi_between_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_jpsi_muons___nominal', '2018___Mu___Data___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___Data___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___Data___jpsi_muon_pt___nominal', '2018___Mu___Data___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___Data___jpsi_muon_pf_iso_id___nominal', '2018___Mu___Data___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___Data___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___Data___jpsi_mass_muons_in_range___nominal', '2018___Mu___Data___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___met_before_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___met_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet1_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jet2_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___transverse_mass___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___ht___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___met_before_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___met_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet1_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jet2_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___transverse_mass___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___ht___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___met_before_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___met_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jets_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jets___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet1_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jet2_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___transverse_mass___nominal', '2018___Mu___MonteCarloWJetsToLNu___ht___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloWJetsToLNu___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloWJetsToLNu___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloWJetsToLNu___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloST_tW_top___met_before_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___met_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jets_initial___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jets___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jet1_phi___nominal', '2018___Mu___MonteCarloST_tW_top___jet2_phi___nominal', '2018___Mu___MonteCarloST_tW_top___transverse_mass___nominal', '2018___Mu___MonteCarloST_tW_top___ht___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_eta___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_phi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tW_top___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tW_top___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloST_tW_top___pt_at_low_delta_r___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___met_before_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___met_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_after_met_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jets_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jets___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_jet_cut___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons_initial___nominal', '2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet1_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jet2_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___transverse_mass___nominal', '2018___Mu___MonteCarloST_tchannel_top___ht___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_charge___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_masses_zoomed___nominal', '2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_and_isolated_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_and_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons_in_peak___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_muon_and_jpsi___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pf_rel_iso_03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pf_iso_id___nominal', '2018___Mu___MonteCarloST_tchannel_top___isolated_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_in_range_pfRelIso03_all___nominal', '2018___Mu___MonteCarloST_tchannel_top___jpsi_mass_muons_in_range___nominal', '2018___Mu___MonteCarloST_tchannel_top___pt_at_low_delta_r___nominal']\n",
      "{} {}\n"
     ]
    }
   ],
   "source": [
    "x, y = GetHistos(f, \"2018\", \"Mu\", \"mu_pt\")\n",
    "print(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#Load histograms from file(s)\n",
    "MonteCarlo = dict()\n",
    "RealData = dict()\n",
    "\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"] = dict()\n",
    "MonteCarlo[\"met_before_met_cut\"] = dict()\n",
    "MonteCarlo[\"met_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"] = dict()\n",
    "MonteCarlo[\"number_of_jets_initial\"] = dict()\n",
    "MonteCarlo[\"number_of_jets\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"] = dict()\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"] = dict()\n",
    "MonteCarlo[\"number_of_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"] = dict()\n",
    "MonteCarlo[\"jet1_pt\"] = dict()\n",
    "MonteCarlo[\"jet2_pt\"] = dict()\n",
    "MonteCarlo[\"jet1_eta\"] = dict()\n",
    "MonteCarlo[\"jet2_eta\"] = dict()\n",
    "MonteCarlo[\"jet1_phi\"] = dict()\n",
    "MonteCarlo[\"jet2_phi\"] = dict()\n",
    "MonteCarlo[\"transverse_mass\"] = dict()\n",
    "MonteCarlo[\"ht\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_pt\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_eta\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_phi\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_charge\"] = dict()\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"invariant_masses_zoomed\"] = dict()\n",
    "MonteCarlo[\"invariant_mass_jpsi_and_isolated_muons\"] = dict()\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"jpsi_pt\"] = dict()\n",
    "MonteCarlo[\"jpsi_eta\"] = dict()\n",
    "MonteCarlo[\"jpsi_phi\"] = dict()\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"] = dict()\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons_in_peak\"] = dict()\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"] = dict()\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"] = dict()\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_pt\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_pf_rel_iso_03_all\"] = dict()\n",
    "MonteCarlo[\"jpsi_muon_pf_iso_id\"] = dict()\n",
    "MonteCarlo[\"isolated_muons_in_range_pfRelIso03_all\"] = dict()\n",
    "MonteCarlo[\"jpsi_muons_in_range_pfRelIso03_all\"] = dict()\n",
    "MonteCarlo[\"jpsi_mass_muons_in_range\"] = dict()\n",
    "MonteCarlo[\"pt_at_low_delta_r\"] = dict()\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"] = dict()\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"] = dict()\n",
    "# MonteCarlo[\"further_muon_medium_tight_pt\"] = dict()\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"] = dict()\n",
    "# MonteCarlo[\"further_muon_loose_tight_pt\"] = dict()\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"] = dict()\n",
    "# MonteCarlo[\"further_muon_medium_medium_pt\"] = dict()\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"] = dict()\n",
    "# MonteCarlo[\"further_muon_loose_medium_pt\"] = dict()\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"] = dict()\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"] = dict()\n",
    "\n",
    "\n",
    "\n",
    "RealData[\"leading_isolated_muon_pt_initial\"] = dict()\n",
    "RealData[\"leading_isolated_muon_eta_initial\"] = dict()\n",
    "RealData[\"leading_isolated_muon_phi_initial\"] = dict()\n",
    "RealData[\"leading_isolated_muon_mass_initial\"] = dict()\n",
    "RealData[\"leading_isolated_muon_charge_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_pt_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_eta_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_phi_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_mass_initial\"] = dict()\n",
    "RealData[\"leading_isolated_electron_charge_initial\"] = dict()\n",
    "RealData[\"met_before_met_cut\"] = dict()\n",
    "RealData[\"met_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_pt_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_eta_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_phi_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_mass_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_charge_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_pt_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_eta_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_phi_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_mass_after_met_cut\"] = dict()\n",
    "RealData[\"leading_isolated_electron_charge_after_met_cut\"] = dict()\n",
    "RealData[\"number_of_jets_initial\"] = dict()\n",
    "RealData[\"number_of_jets\"] = dict()\n",
    "RealData[\"leading_isolated_muon_pt_after_jet_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_eta_after_jet_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_phi_after_jet_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_mass_after_jet_cut\"] = dict()\n",
    "RealData[\"leading_isolated_muon_charge_after_jet_cut\"] = dict()\n",
    "RealData[\"number_of_jpsi_muons_initial\"] = dict()\n",
    "RealData[\"number_of_jpsi_muons\"] = dict()\n",
    "RealData[\"leading_isolated_muon_pt\"] = dict()\n",
    "RealData[\"leading_isolated_muon_eta\"] = dict()\n",
    "RealData[\"leading_isolated_muon_phi\"] = dict()\n",
    "RealData[\"leading_isolated_muon_mass\"] = dict()\n",
    "RealData[\"leading_isolated_muon_charge\"] = dict()\n",
    "RealData[\"jet1_pt\"] = dict()\n",
    "RealData[\"jet2_pt\"] = dict()\n",
    "RealData[\"jet1_eta\"] = dict()\n",
    "RealData[\"jet2_eta\"] = dict()\n",
    "RealData[\"jet1_phi\"] = dict()\n",
    "RealData[\"jet2_phi\"] = dict()\n",
    "RealData[\"transverse_mass\"] = dict()\n",
    "RealData[\"ht\"] = dict()\n",
    "RealData[\"jpsi_muons_pt\"] = dict()\n",
    "RealData[\"jpsi_muons_eta\"] = dict()\n",
    "RealData[\"jpsi_muons_phi\"] = dict()\n",
    "RealData[\"jpsi_muons_charge\"] = dict()\n",
    "RealData[\"invariant_mass_jpsi_muons\"] = dict()\n",
    "RealData[\"invariant_masses_zoomed\"] = dict()\n",
    "RealData[\"invariant_mass_jpsi_and_isolated_muons\"] = dict()\n",
    "RealData[\"delta_eta_between_isolated_and_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_phi_between_isolated_and_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_r_between_isolated_and_jpsi_muons\"] = dict()\n",
    "RealData[\"jpsi_pt\"] = dict()\n",
    "RealData[\"jpsi_eta\"] = dict()\n",
    "RealData[\"jpsi_phi\"] = dict()\n",
    "RealData[\"delta_eta_between_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_phi_between_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_r_between_jpsi_muons\"] = dict()\n",
    "RealData[\"delta_r_between_jpsi_muons_in_peak\"] = dict()\n",
    "RealData[\"delta_eta_between_isolated_muon_and_jpsi\"] = dict()\n",
    "RealData[\"delta_phi_between_isolated_muon_and_jpsi\"] = dict()\n",
    "RealData[\"delta_r_between_isolated_muon_and_jpsi\"] = dict()\n",
    "RealData[\"jpsi_muon_pt\"] = dict()\n",
    "RealData[\"jpsi_muon_pf_rel_iso_03_all\"] = dict()\n",
    "RealData[\"jpsi_muon_pf_iso_id\"] = dict()\n",
    "RealData[\"isolated_muons_in_range_pfRelIso03_all\"] = dict()\n",
    "RealData[\"jpsi_muons_in_range_pfRelIso03_all\"] = dict()\n",
    "RealData[\"jpsi_mass_muons_in_range\"] = dict()\n",
    "RealData[\"pt_at_low_delta_r\"] = dict()\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg\"] = dict()\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"] = dict()\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"] = dict()\n",
    "# RealData[\"further_muon_medium_tight_pt\"] = dict()\n",
    "# RealData[\"further_muon_medium_tight_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"further_muon_medium_tight_pf_iso_id\"] = dict()\n",
    "# RealData[\"further_muon_loose_tight_pt\"] = dict()\n",
    "# RealData[\"further_muon_loose_tight_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"further_muon_loose_tight_pf_iso_id\"] = dict()\n",
    "# RealData[\"further_muon_medium_medium_pt\"] = dict()\n",
    "# RealData[\"further_muon_medium_medium_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"further_muon_medium_medium_pf_iso_id\"] = dict()\n",
    "# RealData[\"further_muon_loose_medium_pt\"] = dict()\n",
    "# RealData[\"further_muon_loose_medium_pf_rel_iso_03_all\"] = dict()\n",
    "# RealData[\"further_muon_loose_medium_pf_iso_id\"] = dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_pt_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_eta_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_phi_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_mass_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_mass_initial___nominal\") \n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_initial___nominal\")\n",
    "RealData[\"leading_isolated_muon_charge_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_pt_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_pt_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_eta_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_eta_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_phi_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_phi_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_mass_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_mass_initial___nominal\") \n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_initial___nominal\")\n",
    "RealData[\"leading_isolated_electron_charge_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_charge_initial___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_before_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___met_before_met_cut___nominal\")\n",
    "RealData[\"met_before_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___met_before_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"met_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___met_after_met_cut___nominal\")\n",
    "RealData[\"met_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___met_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_pt_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_eta_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_phi_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_mass_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_mass_after_met_cut___nominal\") \n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_charge_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_pt_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_pt_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_pt_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_eta_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_eta_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_eta_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_phi_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_phi_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_phi_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_mass_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_mass_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_mass_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_mass_after_met_cut___nominal\") \n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_electron_charge_after_met_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "RealData[\"leading_isolated_electron_charge_after_met_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_electron_charge_after_met_cut___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___number_of_jets_initial___nominal\")\n",
    "RealData[\"number_of_jets_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___number_of_jets_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jets___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___number_of_jets___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___number_of_jets___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___number_of_jets___nominal\")\n",
    "MonteCarlo[\"number_of_jets\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___number_of_jets___nominal\")\n",
    "RealData[\"number_of_jets\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___number_of_jets___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_pt_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_pt_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_eta_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_eta_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_phi_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_phi_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_mass_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_mass_after_jet_cut___nominal\") \n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge_after_jet_cut\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "RealData[\"leading_isolated_muon_charge_after_jet_cut\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_charge_after_jet_cut___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons_initial\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons_initial___nominal\")\n",
    "RealData[\"number_of_jpsi_muons_initial\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___number_of_jpsi_muons_initial___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"number_of_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___number_of_jpsi_muons___nominal\")\n",
    "RealData[\"number_of_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___number_of_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_pt___nominal\")\n",
    "RealData[\"leading_isolated_muon_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_eta___nominal\")\n",
    "RealData[\"leading_isolated_muon_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_phi___nominal\")\n",
    "RealData[\"leading_isolated_muon_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_mass___nominal\")\n",
    "RealData[\"leading_isolated_muon_mass\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_mass___nominal\") \n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_isolated_muon_charge___nominal\")\n",
    "RealData[\"leading_isolated_muon_charge\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_isolated_muon_charge___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet1_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet1_pt___nominal\")\n",
    "RealData[\"jet1_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet1_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet2_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet2_pt___nominal\")\n",
    "RealData[\"jet2_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet2_pt___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet1_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet1_eta___nominal\")\n",
    "RealData[\"jet1_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet1_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet2_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet2_eta___nominal\")\n",
    "RealData[\"jet2_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet2_eta___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet1_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet1_phi___nominal\")\n",
    "RealData[\"jet1_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet1_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jet2_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jet2_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jet2_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jet2_phi___nominal\")\n",
    "MonteCarlo[\"jet2_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jet2_phi___nominal\")\n",
    "RealData[\"jet2_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jet2_phi___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___transverse_mass___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___transverse_mass___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___transverse_mass___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___transverse_mass___nominal\")\n",
    "MonteCarlo[\"transverse_mass\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___transverse_mass___nominal\")\n",
    "RealData[\"transverse_mass\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___transverse_mass___nominal\")\n",
    "MonteCarlo[\"ht\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___ht___nominal\")\n",
    "MonteCarlo[\"ht\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___ht___nominal\")\n",
    "MonteCarlo[\"ht\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___ht___nominal\")\n",
    "MonteCarlo[\"ht\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___ht___nominal\")\n",
    "MonteCarlo[\"ht\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___ht___nominal\")\n",
    "RealData[\"ht\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___ht___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_pt___nominal\")\n",
    "RealData[\"jpsi_muons_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_eta___nominal\")\n",
    "RealData[\"jpsi_muons_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_phi___nominal\")\n",
    "RealData[\"jpsi_muons_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_charge\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_charge___nominal\")\n",
    "RealData[\"jpsi_muons_charge\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_charge___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_muons___nominal\")\n",
    "RealData[\"invariant_mass_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___invariant_mass_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_masses_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___invariant_masses_zoomed___nominal\")\n",
    "RealData[\"invariant_masses_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___invariant_masses_zoomed___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_and_isolated_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___invariant_mass_jpsi_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_and_isolated_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___invariant_mass_jpsi_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_and_isolated_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___invariant_mass_jpsi_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_and_isolated_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___invariant_mass_jpsi_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"invariant_mass_jpsi_and_isolated_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___invariant_mass_jpsi_and_isolated_muons___nominal\")\n",
    "RealData[\"invariant_mass_jpsi_and_isolated_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___invariant_mass_jpsi_and_isolated_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_and_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "RealData[\"delta_eta_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_eta_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_and_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "RealData[\"delta_phi_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_phi_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_and_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "RealData[\"delta_r_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_r_between_isolated_and_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_pt___nominal\")\n",
    "RealData[\"jpsi_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_eta___nominal\")\n",
    "RealData[\"jpsi_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_eta___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"jpsi_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_phi___nominal\")\n",
    "RealData[\"jpsi_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_phi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_jpsi_muons___nominal\")\n",
    "RealData[\"delta_eta_between_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_eta_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_jpsi_muons___nominal\")\n",
    "RealData[\"delta_phi_between_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_phi_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons___nominal\")\n",
    "RealData[\"delta_r_between_jpsi_muons\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_r_between_jpsi_muons___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons_in_peak\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons_in_peak\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons_in_peak\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_r_between_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons_in_peak\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_r_between_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_r_between_jpsi_muons_in_peak\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_r_between_jpsi_muons_in_peak___nominal\")\n",
    "RealData[\"delta_r_between_jpsi_muons_in_peak\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_r_between_jpsi_muons_in_peak___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_eta_between_isolated_muon_and_jpsi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "RealData[\"delta_eta_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_eta_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_phi_between_isolated_muon_and_jpsi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "RealData[\"delta_phi_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_phi_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"delta_r_between_isolated_muon_and_jpsi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "RealData[\"delta_r_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_r_between_isolated_muon_and_jpsi___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pt___nominal\")\n",
    "RealData[\"jpsi_muon_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_pt___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pf_rel_iso_03_all___nominal\")\n",
    "RealData[\"jpsi_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_pf_rel_iso_03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_iso_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_iso_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_iso_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_iso_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"jpsi_muon_pf_iso_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_pf_iso_id___nominal\")\n",
    "RealData[\"jpsi_muon_pf_iso_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_pf_iso_id___nominal\")\n",
    "MonteCarlo[\"isolated_muons_in_range_pfRelIso03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muons_in_range_pfRelIso03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muons_in_range_pfRelIso03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muons_in_range_pfRelIso03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"isolated_muons_in_range_pfRelIso03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muons_in_range_pfRelIso03_all___nominal\")\n",
    "RealData[\"isolated_muons_in_range_pfRelIso03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_in_range_pfRelIso03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_in_range_pfRelIso03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_in_range_pfRelIso03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_in_range_pfRelIso03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_muons_in_range_pfRelIso03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muons_in_range_pfRelIso03_all___nominal\")\n",
    "RealData[\"jpsi_muons_in_range_pfRelIso03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muons_in_range_pfRelIso03_all___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_muons_in_range\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_mass_muons_in_range___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_muons_in_range\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_mass_muons_in_range___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_muons_in_range\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_mass_muons_in_range___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_muons_in_range\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_mass_muons_in_range___nominal\")\n",
    "MonteCarlo[\"jpsi_mass_muons_in_range\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_mass_muons_in_range___nominal\")\n",
    "RealData[\"jpsi_mass_muons_in_range\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_mass_muons_in_range___nominal\")\n",
    "MonteCarlo[\"pt_at_low_delta_r\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___pt_at_low_delta_r___nominal\")\n",
    "MonteCarlo[\"pt_at_low_delta_r\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___pt_at_low_delta_r___nominal\")\n",
    "MonteCarlo[\"pt_at_low_delta_r\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___pt_at_low_delta_r___nominal\")\n",
    "MonteCarlo[\"pt_at_low_delta_r\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___pt_at_low_delta_r___nominal\")\n",
    "MonteCarlo[\"pt_at_low_delta_r\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___pt_at_low_delta_r___nominal\")\n",
    "RealData[\"pt_at_low_delta_r\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___pt_at_low_delta_r___nominal\")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___isolated_muon_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_pf_rel_iso_03_chg_medium_id___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_positive_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_peak_only_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___jpsi_muon_negative_peak_only_pf_rel_iso_03_chg___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pt___nominal\")\n",
    "# RealData[\"further_muon_medium_tight_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_tight_pf_iso_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "# RealData[\"further_muon_medium_tight_pf_iso_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pt___nominal\")\n",
    "# RealData[\"further_muon_loose_tight_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_tight_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_tight_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_tight_pf_iso_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "# RealData[\"further_muon_loose_tight_pf_iso_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_tight_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pt___nominal\")\n",
    "# RealData[\"further_muon_medium_medium_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_medium_medium_pf_iso_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "# RealData[\"further_muon_medium_medium_pf_iso_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_medium_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pt___nominal\")\n",
    "# RealData[\"further_muon_loose_medium_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_medium_pt___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "# RealData[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_medium_pf_rel_iso_03_all___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "# MonteCarlo[\"further_muon_loose_medium_pf_iso_id\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___further_muon_loose_medium_pf_iso_id___nominal\")\n",
    "# RealData[\"further_muon_loose_medium_pf_iso_id\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___further_muon_loose_medium_pf_iso_id___nominal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "S = dict()\n",
    "S[\"leading_isolated_muon_pt_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_pt_initial\", \"Leading Isolated Muon Transverse Momentum (One Muon, No Electrons); Pt (GeV);Events\")\n",
    "S[\"leading_isolated_muon_eta_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_eta_initial\", \"Leading Isolated Muon Pseudorapidity (One Muon, No Electrons); Eta; Events\")\n",
    "S[\"leading_isolated_muon_phi_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_phi_initial\", \"Leading Isolated Muon Angle (One Muon, No Electrons); Phi (Radians); Events\")\n",
    "S[\"leading_isolated_muon_mass_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_mass_initial\", \"Leading Isolated Muon Mass (One Muon, No Electrons); Mass(Gev); Events\")\n",
    "S[\"leading_isolated_muon_charge_initial\"] = ROOT.THStack(\"s_leading_isolated_muon_charge_initial\", \"Leading Isolated Muon Charge (One Muon, No Electrons); Charge; Events\")\n",
    "S[\"leading_isolated_electron_pt_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_pt_initial\", \"Leading Isolated Electron Transverse Momentum (One Electron, No Muons); Pt (GeV);Events\")\n",
    "S[\"leading_isolated_electron_eta_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_eta_initial\", \"Leading Isolated Electron Pseudorapidity (One Electron, No Muons); Eta; Events\")\n",
    "S[\"leading_isolated_electron_phi_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_phi_initial\", \"Leading Isolated Electron Angle (One Electron, No Muons); Phi (Radians); Events\")\n",
    "S[\"leading_isolated_electron_mass_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_mass_initial\", \"Leading Isolated Electron Mass (One Electron, No Muons); Mass(Gev); Events\")\n",
    "S[\"leading_isolated_electron_charge_initial\"] = ROOT.THStack(\"s_leading_isolated_electron_charge_initial\", \"Leading Isolated Electron Charge (One Electron, No Muons); Charge; Events\")\n",
    "S[\"met_before_met_cut\"] = ROOT.THStack(\"s_met_before_met_cut\", \"MET Before MET Cut; Pt (GeV); Events\")\n",
    "S[\"met_after_met_cut\"] = ROOT.THStack(\"s_met_after_met_cut\", \"MET After MET Cut; Pt (GeV); Events\")\n",
    "S[\"leading_isolated_muon_pt_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_pt_after_met_cut\", \"Leading Isolated Muon Transverse Momentum After MET Cut; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_muon_eta_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_eta_after_met_cut\", \"Leading Isolated Muon Pseudorapidity After MET Cut; Eta; Events\")\n",
    "S[\"leading_isolated_muon_phi_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_phi_after_met_cut\", \"Leading Isolated Muon Angle After MET Cut; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_muon_mass_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_mass_after_met_cut\", \"Leading Isolated Muon Mass After MET Cut; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_muon_charge_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_charge_after_met_cut\", \"Leading Isolated Muon Charge After MET Cut; Charge; Events\")\n",
    "S[\"leading_isolated_electron_pt_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_pt_after_met_cut\", \"Leading Isolated Electron Transverse Momentum After MET Cut; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_electron_eta_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_eta_after_met_cut\", \"Leading Isolated Electron Pseudorapidity After MET Cut; Eta; Events\")\n",
    "S[\"leading_isolated_electron_phi_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_phi_after_met_cut\", \"Leading Isolated Electron Angle After MET Cut; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_electron_mass_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_mass_after_met_cut\", \"Leading Isolated Electron Mass After MET Cut; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_electron_charge_after_met_cut\"] = ROOT.THStack(\"s_leading_isolated_electron_charge_after_met_cut\", \"Leading Isolated Electron Charge After MET Cut; Charge; Events\")\n",
    "S[\"number_of_jets_initial\"] = ROOT.THStack(\"s_number_of_jets_initial\", \"Number Of Jets Before Jet Cut; Number Of Jets; Events\")\n",
    "S[\"number_of_jets\"] = ROOT.THStack(\"s_number_of_jets\", \"Number Of Jets; Number Of Jets; Events\")\n",
    "S[\"leading_isolated_muon_pt_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_pt_after_jet_cut\", \"Leading Isolated Muon Transverse Momentum After Jet Cut; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_muon_eta_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_eta_after_jet_cut\", \"Leading Isolated Muon Pseudorapidity After Jet Cut; Eta; Events\")\n",
    "S[\"leading_isolated_muon_phi_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_phi_after_jet_cut\", \"Leading Isolated Muon Angle After Jet Cut; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_muon_mass_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_mass_after_jet_cut\", \"Leading Isolated Muon Mass After Jet Cut; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_muon_charge_after_jet_cut\"] = ROOT.THStack(\"s_leading_isolated_muon_charge_after_jet_cut\", \"Leading Isolated Muon Charge After Jet Cut; Charge; Events\")\n",
    "S[\"number_of_jpsi_muons_initial\"] = ROOT.THStack(\"s_number_of_jpsi_muons_initial\", \"Number of JPsi Muons Before JPsi Muon Cut; Number Of Muons; Events\")\n",
    "S[\"number_of_jpsi_muons\"] = ROOT.THStack(\"s_number_of_jpsi_muons\", \"Number of JPsi Muons; Number Of Muons; Events\")\n",
    "S[\"leading_isolated_muon_pt\"] = ROOT.THStack(\"s_leading_isolated_muon_pt\", \"Leading Isolated Muon Transverse Momentum; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_muon_eta\"] = ROOT.THStack(\"s_leading_isolated_muon_eta\", \"Leading Isolated Muon Pseudorapidity; Eta; Events\")\n",
    "S[\"leading_isolated_muon_phi\"] = ROOT.THStack(\"s_leading_isolated_muon_phi\", \"Leading Isolated Muon Angle; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_muon_mass\"] = ROOT.THStack(\"s_leading_isolated_muon_mass\", \"Leading Isolated Muon Mass; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_muon_charge\"] = ROOT.THStack(\"s_leading_isolated_muon_charge\", \"Leading Isolated Muon Charge; Charge; Events\")\n",
    "S[\"leading_isolated_electron_pt\"] = ROOT.THStack(\"s_leading_isolated_electron_pt\", \"Leading Isolated Electron Transverse Momentum; Pt (GeV);Events\")\n",
    "S[\"leading_isolated_electron_eta\"] = ROOT.THStack(\"s_leading_isolated_electron_eta\", \"Leading Isolated Electron Pseudorapidity; Eta; Events\")\n",
    "S[\"leading_isolated_electron_phi\"] = ROOT.THStack(\"s_leading_isolated_electron_phi\", \"Leading Isolated Electron Angle; Phi (Radians); Events\")\n",
    "S[\"leading_isolated_electron_mass\"] = ROOT.THStack(\"s_leading_isolated_electron_mass\", \"Leading Isolated Electron Mass; Mass(Gev); Events\")\n",
    "S[\"leading_isolated_electron_charge\"] = ROOT.THStack(\"s_leading_isolated_electron_charge\", \"Leading Isolated Electron Charge; Charge; Events\")\n",
    "S[\"jet1_pt\"] = ROOT.THStack(\"s_jet1_pt\", \"Jet Transverse Momentum for Leading Jet; Pt (GeV); Events\")\n",
    "S[\"jet2_pt\"] = ROOT.THStack(\"s_jet2_pt\", \"Jet Transverse Momentum for Subleading Jet; Pt (GeV); Events\")\n",
    "S[\"jet1_eta\"] = ROOT.THStack(\"s_jet1_eta\", \"Jet Pseudorapidity for Leading Jet; Eta; Events\")\n",
    "S[\"jet2_eta\"] = ROOT.THStack(\"s_jet2_eta\", \"Jet Pseudorapidity for Subleading Jet; Eta; Events\")\n",
    "S[\"jet1_phi\"] = ROOT.THStack(\"s_jet1_phi\", \"Jet Angle for Leading Jet; Phi (Radians); Events\")\n",
    "S[\"jet2_phi\"] = ROOT.THStack(\"s_jet2_phi\", \"Jet Angle for Subleading Jet; Phi (Radians); Events\")\n",
    "S[\"transverse_mass\"] = ROOT.THStack(\"s_transverse_mass\", \"Transverse Mass; Transverse Mass (GeV); Events\")\n",
    "S[\"ht\"] = ROOT.THStack(\"s_ht\", \"Ht; Ht; Events\")\n",
    "S[\"jpsi_muons_pt\"] = ROOT.THStack(\"s_jpsi_muons_pt\", \"Transverse Momentum for JPsi Muons; Pt; Events\")\n",
    "S[\"jpsi_muons_eta\"] = ROOT.THStack(\"s_jpsi_muons_eta\", \"Pseudorapidity for JPsi Muons; Eta; Events\")\n",
    "S[\"jpsi_muons_phi\"] = ROOT.THStack(\"s_jpsi_muons_phi\", \"Angle for JPsi Muons; Phi; Events\")\n",
    "S[\"jpsi_muons_charge\"] = ROOT.THStack(\"s_jpsi_muons_charge\", \"Charge of JPsi Muons; Charge; Events\")\n",
    "S[\"invariant_mass_jpsi_muons\"] = ROOT.THStack(\"s_invariant_mass_jpsi_muons\", \"Invariant Masses for J/Psi Candidate Muons (Oppositely Charged); Invariant Masses; Events\")\n",
    "S[\"invariant_masses_zoomed\"] = ROOT.THStack(\"s_invariant_masses_zoomed\", \"Invariant Masses for J/Psi Candidate Muons (Oppositely Charged); Invariant Masses; Events\")\n",
    "S[\"invariant_mass_jpsi_and_isolated_muons\"] = ROOT.THStack(\"s_invariant_mass_jpsi_and_isolated_muons\", \"Invariant Masses for J/Psi Candidate And Isolated Muons; Invariant Masses; Events\")\n",
    "S[\"delta_eta_between_isolated_and_jpsi_muons\"] = ROOT.THStack(\"s_delta_eta_between_isolated_and_jpsi_muons\", \"Delta Eta for Isolated Muon - JPsi Muons; Delta Eta; Events\")\n",
    "S[\"delta_phi_between_isolated_and_jpsi_muons\"] = ROOT.THStack(\"s_delta_phi_between_isolated_and_jpsi_muons\", \"Delta Phi for Isolated Muon - JPsi Muons; Delta Phi; Events\")\n",
    "S[\"delta_r_between_isolated_and_jpsi_muons\"] = ROOT.THStack(\"s_delta_r_between_isolated_and_jpsi_muons\", \"Delta R for Isolated and JPsi Muons; Delta R; Events\")\n",
    "S[\"jpsi_pt\"] = ROOT.THStack(\"s_jpsi_pt\", \"Transverse Momentum for JPsi; Pt; Events\")\n",
    "S[\"jpsi_eta\"] = ROOT.THStack(\"s_jpsi_eta\", \"Pseudorapidity for JPsi; Eta; Events\")\n",
    "S[\"jpsi_phi\"] = ROOT.THStack(\"s_jpsi_phi\", \"Angle for JPsi; Phi; Events\")\n",
    "S[\"delta_eta_between_jpsi_muons\"] = ROOT.THStack(\"s_delta_eta_between_jpsi_muons\", \"Delta Eta for JPsi Muons; Delta Eta; Events\")\n",
    "S[\"delta_phi_between_jpsi_muons\"] = ROOT.THStack(\"s_delta_phi_between_jpsi_muons\", \"Delta Phi for JPsi Muons; Delta Phi; Events\")\n",
    "S[\"delta_r_between_jpsi_muons\"] = ROOT.THStack(\"s_delta_r_between_jpsi_muons\", \"Delta R for JPsi Muons; Delta R; Events\")\n",
    "S[\"delta_r_between_jpsi_muons_in_peak\"] = ROOT.THStack(\"s_delta_r_between_jpsi_muons_in_peak\", \"Delta R for JPsi Muons In Peak; Delta R; Events\")\n",
    "S[\"delta_eta_between_isolated_muon_and_jpsi\"] = ROOT.THStack(\"s_delta_eta_between_isolated_muon_and_jpsi\", \"Delta Eta for Isolated Muon And JPsi; Delta Eta; Events\")\n",
    "S[\"delta_phi_between_isolated_muon_and_jpsi\"] = ROOT.THStack(\"s_delta_phi_between_isolated_muon_and_jpsi\", \"Delta Phi for Isolated Muon And JPsi; Delta Phi; Events\")\n",
    "S[\"delta_r_between_isolated_muon_and_jpsi\"] = ROOT.THStack(\"s_delta_r_between_isolated_muon_and_jpsi\", \"Delta R for Isolated Muon And JPsi; Delta R; Events\")\n",
    "S[\"jpsi_muon_pt\"] = ROOT.THStack(\"s_jpsi_muon_pt\", \"JPsi Muon Pt - Muon Id Medium, Iso Id Tight; JPsi Muon Pt; Events\")\n",
    "S[\"jpsi_muon_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_jpsi_muon_pf_rel_iso_03_all\", \"JPsi Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Tight; JPsi Muon Pf Rel Iso 03 All; Events\")\n",
    "S[\"jpsi_muon_pf_iso_id\"] = ROOT.THStack(\"s_jpsi_muon_pf_iso_id\", \"JPsi Muon Pf Iso Id - Muon Id Medium, Iso Id Tight; JPsi Muon Pf Iso Id; Events\")\n",
    "S[\"isolated_muons_in_range_pfRelIso03_all\"] = ROOT.THStack(\"s_isolated_muons_in_range_pfRelIso03_all\", \"PfRelIso03_All For Isolated Muons In 90-120 GeV Range; PfRelIso03_All; Events\")\n",
    "S[\"jpsi_muons_in_range_pfRelIso03_all\"] = ROOT.THStack(\"s_jpsi_muons_in_range_pfRelIso03_all\", \"PfRelIso03_All For JPsi Muons In 90-120 GeV Range; PfRelIso03_All; Events\")\n",
    "S[\"jpsi_mass_muons_in_range\"] = ROOT.THStack(\"s_jpsi_mass_muons_in_range\", \"JPsi Mass For JPsis In 90-120 GeV Range; JPsi Mass; Events\")\n",
    "S[\"pt_at_low_delta_r\"] = ROOT.THStack(\"s_pt_at_low_delta_r\", \"Isolated Muon and JPsi Pt at Delta R < 0.3; Isolated Muon Pt; JPsi Muon Pt; Events\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_all\", \"Isolated Muon PfRelIso03_All; Isolated Muon PfRelIso03_All; Events\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_chg\", \"Isolated Muon PfRelIso03_Chg; Isolated Muon PfRelIso03_Chg; Events\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_all\", \"JPsi Muon Positive PfRelIso03_All; JPsi Muon Positive PfRelIso03_All; Events\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_chg\", \"JPsi Muon Positive PfRelIso03_Chg; JPsi Muon Positive PfRelIso03_Chg; Events\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_all\", \"JPsi Muon Negative PfRelIso03_All; JPsi Muon Negative PfRelIso03_All; Events\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_chg\", \"JPsi Muon Negative PfRelIso03_Chg; JPsi Muon Negative PfRelIso03_Chg; Events\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all_zoomed\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_all_zoomed\", \"Isolated Muon PfRelIso03_All Zoomed; Isolated Muon PfRelIso03_All; Events\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_all_zoomed\", \"JPsi Muon Positive PfRelIso03_All Zoomed; JPsi Muon Positive PfRelIso03_All; Events\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_all_zoomed\", \"JPsi Muon Negative PfRelIso03_All Zoomed; JPsi Muon Negative PfRelIso03_All; Events\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all_medium_id\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_all_medium_id\", \"Isolated Muon PfRelIso03_All Medium ID; Isolated Muon PfRelIso03_All Medium ID; Events\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\", \"Isolated Muon PfRelIso03_All Medium ID Zoomed; Isolated Muon PfRelIso03_All Medium ID; Events\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"] = ROOT.THStack(\"s_isolated_muon_pf_rel_iso_03_chg_medium_id\", \"Isolated Muon PfRelIso03_Chg Medium ID; Isolated Muon PfRelIso03_Chg Medium ID; Events\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_all_medium_id\", \"JPsi Muon Positive PfRelIso03_All Medium ID; JPsi Muon Positive PfRelIso03_All Medium ID; Events\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\", \"JPsi Muon Positive PfRelIso03_All Zoomed Medium ID; JPsi Muon Positive PfRelIso03_All Medium ID; Events\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"] = ROOT.THStack(\"s_jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\", \"JPsi Muon Positive PfRelIso03_Chg Medium ID; JPsi Muon Positive PfRelIso03_Chg Medium ID; Events\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_all_medium_id\", \"JPsi Muon Negative PfRelIso03_All Medium ID; JPsi Muon Negative PfRelIso03_All Medium ID; Events\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\", \"JPsi Muon Negative PfRelIso03_All Zoomed Medium ID; JPsi Muon Negative PfRelIso03_All Medium ID; Events\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"] = ROOT.THStack(\"s_jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\", \"JPsi Muon Negative PfRelIso03_Chg Medium ID; JPsi Muon Negative PfRelIso03_Chg Medium ID; Events\")\n",
    "# S[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_jpsi_muon_positive_peak_only_pf_rel_iso_03_all\", \"JPsi Muon Positive Peak Only PfRelIso03_All; JPsi Muon Positive Peak Only PfRelIso03_All; Events\")\n",
    "# S[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\", \"JPsi Muon Positive Peak Only PfRelIso03_Chg; JPsi Muon Positive Peak Only PfRelIso03_Chg; Events\")\n",
    "# S[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_jpsi_muon_negative_peak_only_pf_rel_iso_03_all\", \"JPsi Muon Negative Peak Only PfRelIso03_All; JPsi Muon Negative Peak Only PfRelIso03_All; Events\")\n",
    "# S[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"] = ROOT.THStack(\"s_jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\", \"JPsi Muon Negative Peak Only PfRelIso03_Chg; JPsi Muon Negative Peak Only PfRelIso03_Chg; Events\")\n",
    "# S[\"further_muon_medium_tight_pt\"] = ROOT.THStack(\"s_further_muon_medium_tight_pt\", \"Further Muon Pt - Muon Id Medium, Iso Id Tight; Further Muon Pt - Muon Id Medium, Iso Id Tight; Events\")\n",
    "# S[\"further_muon_medium_tight_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_further_muon_medium_tight_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Tight; Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Tight; Events\")\n",
    "# S[\"further_muon_medium_tight_pf_iso_id\"] = ROOT.THStack(\"s_further_muon_medium_tight_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Medium, Iso Id Tight; Further Muon Pf Iso Id - Muon Id Medium, Iso Id Tight; Events\")\n",
    "# S[\"further_muon_loose_tight_pt\"] = ROOT.THStack(\"s_further_muon_loose_tight_pt\", \"Further Muon Pt - Muon Id Loose Iso Id Tight; Further Muon Pt - Muon Id Loose, Iso Id Tight; Events\")\n",
    "# S[\"further_muon_loose_tight_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_further_muon_loose_tight_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Tight; Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Tight; Events\")\n",
    "# S[\"further_muon_loose_tight_pf_iso_id\"] = ROOT.THStack(\"s_further_muon_loose_tight_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Loose, Iso Id Tight; Further Muon Pf Iso Id - Muon Id Loose, Iso Id Tight; Events\")\n",
    "# S[\"further_muon_medium_medium_pt\"] = ROOT.THStack(\"s_further_muon_medium_medium_pt\", \"Further Muon Pt - Muon Id Medium, Iso Id Medium; Further Muon Pt - Muon Id Medium, Iso Id Medium; Events\")\n",
    "# S[\"further_muon_medium_medium_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_further_muon_medium_medium_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Medium; Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Medium; Events\")\n",
    "# S[\"further_muon_medium_medium_pf_iso_id\"] = ROOT.THStack(\"s_further_muon_medium_medium_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Medium, Iso Id Medium; Further Muon Pf Iso Id - Muon Id Medium, Iso Id Medium; Events\")\n",
    "# S[\"further_muon_loose_medium_pt\"] = ROOT.THStack(\"s_further_muon_loose_medium_pt\", \"Further Muon Pt - Muon Id Loose, Iso Id Medium; Further Muon Pt - Muon Id Loose, Iso Id Medium; Events\")\n",
    "# S[\"further_muon_loose_medium_pf_rel_iso_03_all\"] = ROOT.THStack(\"s_further_muon_loose_medium_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Medium; Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Medium; Events\")\n",
    "# S[\"further_muon_loose_medium_pf_iso_id\"] = ROOT.THStack(\"s_further_muon_loose_medium_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Loose, Iso Id Medium; Further Muon Pf Iso Id - Muon Id Loose, Iso Id Medium; Events\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "leading_isolated_muon_pt_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt_initial ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_initial ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_initial ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_initial ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_initial ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_pt_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_pt_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_pt_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_pt_initial ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_pt_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_eta_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_eta_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_eta_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_eta_initial ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_eta_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_phi_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_phi_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_phi_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_phi_initial ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_phi_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_mass_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_mass_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_mass_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_mass_initial ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_mass_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_charge_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_charge_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_charge_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_charge_initial ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_charge_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "met_before_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "met_before_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "met_before_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "met_before_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "met_before_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "met_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "met_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "met_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "met_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "met_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_pt_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_pt_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_pt_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_pt_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_pt_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_eta_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_eta_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_eta_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_eta_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_eta_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_phi_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_phi_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_phi_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_phi_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_phi_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_mass_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_mass_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_mass_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_mass_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_mass_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_charge_after_met_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_charge_after_met_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_charge_after_met_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_charge_after_met_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_electron_charge_after_met_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jets_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jets_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jets_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jets_initial ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jets_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jets TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jets TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jets WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jets ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jets ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_after_jet_cut TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_after_jet_cut TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_after_jet_cut WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_after_jet_cut ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge_after_jet_cut ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jpsi_muons_initial TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jpsi_muons_initial TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jpsi_muons_initial WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jpsi_muons_initial ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jpsi_muons_initial ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "number_of_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_mass ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "leading_isolated_muon_charge ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_pt ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_pt ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_eta WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_eta ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_eta WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_eta ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_phi WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_phi ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet1_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_phi WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_phi ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jet2_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "transverse_mass TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "transverse_mass TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "transverse_mass WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "transverse_mass ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "transverse_mass ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "ht TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "ht TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "ht WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "ht ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "ht ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_pt ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_eta WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_eta ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_phi WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_phi ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_charge TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_charge TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_charge WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_charge ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_charge ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_mass_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_mass_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_mass_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_mass_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_mass_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_masses_zoomed TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_masses_zoomed TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_masses_zoomed WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_masses_zoomed ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_masses_zoomed ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_mass_jpsi_and_isolated_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_mass_jpsi_and_isolated_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_mass_jpsi_and_isolated_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_mass_jpsi_and_isolated_muons ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "invariant_mass_jpsi_and_isolated_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_isolated_and_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_isolated_and_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_isolated_and_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_isolated_and_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_isolated_and_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_isolated_and_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_isolated_and_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_isolated_and_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_isolated_and_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_isolated_and_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_isolated_and_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_isolated_and_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_isolated_and_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_isolated_and_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_isolated_and_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_pt ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_eta TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_eta TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_eta WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_eta ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_eta ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_phi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_phi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_phi WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_phi ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_phi ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "delta_r_between_jpsi_muons TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_jpsi_muons TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_jpsi_muons WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_jpsi_muons ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_jpsi_muons ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_jpsi_muons_in_peak TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_jpsi_muons_in_peak TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_jpsi_muons_in_peak WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_jpsi_muons_in_peak ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_jpsi_muons_in_peak ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_isolated_muon_and_jpsi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_isolated_muon_and_jpsi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_isolated_muon_and_jpsi WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_isolated_muon_and_jpsi ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_eta_between_isolated_muon_and_jpsi ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_isolated_muon_and_jpsi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_isolated_muon_and_jpsi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_isolated_muon_and_jpsi WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_isolated_muon_and_jpsi ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_phi_between_isolated_muon_and_jpsi ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_isolated_muon_and_jpsi TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_isolated_muon_and_jpsi TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_isolated_muon_and_jpsi WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_isolated_muon_and_jpsi ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "delta_r_between_isolated_muon_and_jpsi ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pt TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pt TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pt WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pt ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pt ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pf_rel_iso_03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pf_rel_iso_03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pf_rel_iso_03_all WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pf_rel_iso_03_all ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pf_rel_iso_03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pf_iso_id TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pf_iso_id TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pf_iso_id WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pf_iso_id ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muon_pf_iso_id ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "isolated_muons_in_range_pfRelIso03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "isolated_muons_in_range_pfRelIso03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "isolated_muons_in_range_pfRelIso03_all WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "isolated_muons_in_range_pfRelIso03_all ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "isolated_muons_in_range_pfRelIso03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_in_range_pfRelIso03_all TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_in_range_pfRelIso03_all TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_in_range_pfRelIso03_all WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_in_range_pfRelIso03_all ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_muons_in_range_pfRelIso03_all ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_mass_muons_in_range TTToSemiLeptonic <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_mass_muons_in_range TTTo2L2Nu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_mass_muons_in_range WJetsToLNu <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_mass_muons_in_range ST_tW_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "jpsi_mass_muons_in_range ST_tchannel_top <class cppyy.gbl.TH1D at 0x9e1c510>\n",
      "pt_at_low_delta_r TTToSemiLeptonic <class cppyy.gbl.TH2D at 0x9fa6ab0>\n",
      "pt_at_low_delta_r TTTo2L2Nu <class cppyy.gbl.TH2D at 0x9fa6ab0>\n",
      "pt_at_low_delta_r WJetsToLNu <class cppyy.gbl.TH2D at 0x9fa6ab0>\n",
      "pt_at_low_delta_r ST_tW_top <class cppyy.gbl.TH2D at 0x9fa6ab0>\n",
      "pt_at_low_delta_r ST_tchannel_top <class cppyy.gbl.TH2D at 0x9fa6ab0>\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for item in MonteCarlo:\n",
    "\n",
    "    for sample, color in {\"TTToSemiLeptonic\" : ROOT.kRed, \"TTTo2L2Nu\" : ROOT.kGreen, \"WJetsToLNu\" : ROOT.kBlue, \"ST_tW_top\" : ROOT.kMagenta, \"ST_tchannel_top\" : ROOT.kOrange}.items():\n",
    "        print(item, sample, type(MonteCarlo[item][sample]))\n",
    "        MonteCarlo[item][sample].SetFillColor(color)\n",
    "        MonteCarlo[item][sample].SetLineColor(color)\n",
    "        S[item].Add(MonteCarlo[item][sample])\n",
    "\n",
    "canvasas = dict()\n",
    "\n",
    "# canvas0 = ROOT.TCanvas(\"c_leading_isolated_muon_pt_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_pt_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_pt_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_pt_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas0.Draw()\n",
    "# canvasas['0'] = canvas0\n",
    "\n",
    "# canvas1 = ROOT.TCanvas(\"c_leading_isolated_muon_eta_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_eta_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_eta_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_eta_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas1.Draw()\n",
    "# canvasas['1'] = canvas1\n",
    "\n",
    "# canvas2 = ROOT.TCanvas(\"c_leading_isolated_muon_phi_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_phi_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_phi_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_phi_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas2.Draw()\n",
    "# canvasas['2'] = canvas2\n",
    "\n",
    "# canvas3 = ROOT.TCanvas(\"c_leading_isolated_muon_mass_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_mass_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_mass_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_mass_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas3.Draw()\n",
    "# canvasas['3'] = canvas3\n",
    "\n",
    "# canvas4 = ROOT.TCanvas(\"c_leading_isolated_muon_charge_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_charge_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_charge_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_charge_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas4.Draw()\n",
    "# canvasas['4'] = canvas4\n",
    "\n",
    "# canvas5 = ROOT.TCanvas(\"c_leading_isolated_electron_pt_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_pt_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_pt_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_pt_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas5.Draw()\n",
    "# canvasas['5'] = canvas5\n",
    "\n",
    "# canvas6 = ROOT.TCanvas(\"c_leading_isolated_electron_eta_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_eta_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_eta_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_eta_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas6.Draw()\n",
    "# canvasas['6'] = canvas6\n",
    "\n",
    "# canvas7 = ROOT.TCanvas(\"c_leading_isolated_electron_phi_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_phi_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_phi_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_phi_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas7.Draw()\n",
    "# canvasas['7'] = canvas7\n",
    "\n",
    "# canvas8 = ROOT.TCanvas(\"c_leading_isolated_electron_mass_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_mass_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_mass_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_mass_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas8.Draw()\n",
    "# canvasas['8'] = canvas8\n",
    "\n",
    "# canvas9 = ROOT.TCanvas(\"c_leading_isolated_electron_charge_initial\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_charge_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_charge_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_charge_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas9.Draw()\n",
    "# canvasas['9'] = canvas9\n",
    "\n",
    "# canvas10 = ROOT.TCanvas(\"c_met_before_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"met_before_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"met_before_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"met_before_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas10.Draw()\n",
    "# canvasas['10'] = canvas10\n",
    "\n",
    "# canvas11 = ROOT.TCanvas(\"c_met_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"met_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"met_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"met_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas11.Draw()\n",
    "# canvasas['11'] = canvas11\n",
    "\n",
    "# canvas12 = ROOT.TCanvas(\"c_leading_isolated_muon_pt_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_pt_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_pt_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_pt_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas12.Draw()\n",
    "# canvasas['12'] = canvas12\n",
    "\n",
    "# canvas13 = ROOT.TCanvas(\"c_leading_isolated_muon_eta_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_eta_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_eta_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_eta_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas13.Draw()\n",
    "# canvasas['13'] = canvas13\n",
    "\n",
    "# canvas14 = ROOT.TCanvas(\"c_leading_isolated_muon_phi_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_phi_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_phi_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_phi_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas14.Draw()\n",
    "# canvasas['14'] = canvas14\n",
    "\n",
    "# canvas15 = ROOT.TCanvas(\"c_leading_isolated_muon_mass_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_mass_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_mass_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_mass_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas15.Draw()\n",
    "# canvasas['15'] = canvas15\n",
    "\n",
    "# canvas16 = ROOT.TCanvas(\"c_leading_isolated_muon_charge_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_charge_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_charge_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_charge_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas16.Draw()\n",
    "# canvasas['16'] = canvas16\n",
    "\n",
    "# canvas17 = ROOT.TCanvas(\"c_leading_isolated_electron_pt_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_pt_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_pt_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_pt_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas17.Draw()\n",
    "# canvasas['17'] = canvas17\n",
    "\n",
    "# canvas18 = ROOT.TCanvas(\"c_leading_isolated_electron_eta_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_eta_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_eta_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_eta_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas18.Draw()\n",
    "# canvasas['18'] = canvas18\n",
    "\n",
    "# canvas19 = ROOT.TCanvas(\"c_leading_isolated_electron_phi_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_phi_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_phi_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_phi_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas19.Draw()\n",
    "# canvasas['19'] = canvas19\n",
    "\n",
    "# canvas20 = ROOT.TCanvas(\"c_leading_isolated_electron_mass_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_mass_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_mass_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_mass_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas20.Draw()\n",
    "# canvasas['20'] = canvas20\n",
    "\n",
    "# canvas21 = ROOT.TCanvas(\"c_leading_isolated_electron_charge_after_met_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_electron_charge_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_electron_charge_after_met_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_electron_charge_after_met_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas21.Draw()\n",
    "# canvasas['21'] = canvas21\n",
    "\n",
    "# canvas22 = ROOT.TCanvas(\"c_number_of_jets_initial\", \"\", 800, 800)\n",
    "# RealData[\"number_of_jets_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"number_of_jets_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"number_of_jets_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas22.Draw()\n",
    "# canvasas['22'] = canvas22\n",
    "\n",
    "# canvas23 = ROOT.TCanvas(\"c_number_of_jets\", \"\", 800, 800)\n",
    "# RealData[\"number_of_jets\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"number_of_jets\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"number_of_jets\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas23.Draw()\n",
    "# canvasas['23'] = canvas23\n",
    "\n",
    "# canvas24 = ROOT.TCanvas(\"c_leading_isolated_muon_pt_after_jet_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_pt_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_pt_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_pt_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas24.Draw()\n",
    "# canvasas['24'] = canvas24\n",
    "\n",
    "# canvas25 = ROOT.TCanvas(\"c_leading_isolated_muon_eta_after_jet_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_eta_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_eta_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_eta_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas25.Draw()\n",
    "# canvasas['25'] = canvas25\n",
    "\n",
    "# canvas26 = ROOT.TCanvas(\"c_leading_isolated_muon_phi_after_jet_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_phi_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_phi_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_phi_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas26.Draw()\n",
    "# canvasas['26'] = canvas26\n",
    "\n",
    "# canvas27 = ROOT.TCanvas(\"c_leading_isolated_muon_mass_after_jet_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_mass_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_mass_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_mass_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas27.Draw()\n",
    "# canvasas['27'] = canvas27\n",
    "\n",
    "# canvas28 = ROOT.TCanvas(\"c_leading_isolated_muon_charge_after_jet_cut\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_charge_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_charge_after_jet_cut\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_charge_after_jet_cut\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas28.Draw()\n",
    "# canvasas['28'] = canvas28\n",
    "\n",
    "# canvas29 = ROOT.TCanvas(\"c_number_of_jpsi_muons_initial\", \"\", 800, 800)\n",
    "# RealData[\"number_of_jpsi_muons_initial\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"number_of_jpsi_muons_initial\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"number_of_jpsi_muons_initial\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas29.Draw()\n",
    "# canvasas['29'] = canvas29\n",
    "\n",
    "# canvas30 = ROOT.TCanvas(\"c_number_of_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"number_of_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"number_of_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"number_of_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas30.Draw()\n",
    "# canvasas['30'] = canvas30\n",
    "\n",
    "# canvas31 = ROOT.TCanvas(\"c_leading_isolated_muon_pt\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas31.Draw()\n",
    "# canvasas['31'] = canvas31\n",
    "\n",
    "# canvas32 = ROOT.TCanvas(\"c_leading_isolated_muon_eta\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_eta\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas32.Draw()\n",
    "# canvasas['32'] = canvas32\n",
    "\n",
    "# canvas33 = ROOT.TCanvas(\"c_leading_isolated_muon_phi\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_phi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas33.Draw()\n",
    "# canvasas['33'] = canvas33\n",
    "\n",
    "canvas33a = ROOT.TCanvas(\"c_leading_isolated_muon_mass\", \"\", 800, 800)\n",
    "RealData[\"leading_isolated_muon_mass\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_isolated_muon_mass\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_isolated_muon_mass\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas33a.Draw()\n",
    "canvasas['33a'] = canvas33a\n",
    "\n",
    "# canvas34 = ROOT.TCanvas(\"c_leading_isolated_muon_charge\", \"\", 800, 800)\n",
    "# RealData[\"leading_isolated_muon_charge\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"leading_isolated_muon_charge\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"leading_isolated_muon_charge\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas34.Draw()\n",
    "# canvasas['34'] = canvas34\n",
    "\n",
    "# canvas35 = ROOT.TCanvas(\"c_jet1_pt\", \"\", 800, 800)\n",
    "# RealData[\"jet1_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jet1_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jet1_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas35.Draw()\n",
    "# canvasas['35'] = canvas35\n",
    "\n",
    "# canvas36 = ROOT.TCanvas(\"c_jet2_pt\", \"\", 800, 800)\n",
    "# RealData[\"jet2_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jet2_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jet2_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas36.Draw()\n",
    "# canvasas['36'] = canvas36\n",
    "\n",
    "# canvas37 = ROOT.TCanvas(\"c_jet1_eta\", \"\", 800, 800)\n",
    "# RealData[\"jet1_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jet1_eta\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jet1_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas37.Draw()\n",
    "# canvasas['37'] = canvas37\n",
    "\n",
    "# canvas38 = ROOT.TCanvas(\"c_jet2_eta\", \"\", 800, 800)\n",
    "# RealData[\"jet2_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jet2_eta\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jet2_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas38.Draw()\n",
    "# canvasas['38'] = canvas38\n",
    "\n",
    "# canvas39 = ROOT.TCanvas(\"c_jet1_phi\", \"\", 800, 800)\n",
    "# RealData[\"jet1_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jet1_phi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jet1_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas39.Draw()\n",
    "# canvasas['39'] = canvas39\n",
    "\n",
    "# canvas40 = ROOT.TCanvas(\"c_jet2_phi\", \"\", 800, 800)\n",
    "# RealData[\"jet2_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jet2_phi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jet2_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas40.Draw()\n",
    "# canvasas['40'] = canvas40\n",
    "\n",
    "canvas41 = ROOT.TCanvas(\"c_transverse_mass\", \"\", 800, 800)\n",
    "RealData[\"transverse_mass\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"transverse_mass\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"transverse_mass\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas41.Draw()\n",
    "canvasas['41'] = canvas41\n",
    "\n",
    "# canvas42 = ROOT.TCanvas(\"c_ht\", \"\", 800, 800)\n",
    "# RealData[\"ht\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"ht\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"ht\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas42.Draw()\n",
    "# canvasas['42'] = canvas42\n",
    "\n",
    "# canvas43 = ROOT.TCanvas(\"c_jpsi_muons_pt\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muons_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muons_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muons_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas43.Draw()\n",
    "# canvasas['43'] = canvas43\n",
    "\n",
    "# canvas44 = ROOT.TCanvas(\"c_jpsi_muons_eta\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muons_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muons_eta\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muons_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas44.Draw()\n",
    "# canvasas['44'] = canvas44\n",
    "\n",
    "# canvas45 = ROOT.TCanvas(\"c_jpsi_muons_phi\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muons_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muons_phi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muons_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas45.Draw()\n",
    "# canvasas['45'] = canvas45\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# canvas46 = ROOT.TCanvas(\"c_jpsi_muons_charge\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muons_charge\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muons_charge\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muons_charge\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas46.Draw()\n",
    "# canvasas['46'] = canvas46\n",
    "\n",
    "# canvas47 = ROOT.TCanvas(\"c_invariant_mass_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"invariant_mass_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"invariant_mass_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"invariant_mass_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas47.Draw()\n",
    "# canvasas['47'] = canvas47\n",
    "\n",
    "canvas48 = ROOT.TCanvas(\"c_invariant_masses_zoomed\", \"\", 800, 800)\n",
    "RealData[\"invariant_masses_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"invariant_masses_zoomed\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"invariant_masses_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas48.Draw()\n",
    "canvasas['48'] = canvas48\n",
    "\n",
    "canvas49 = ROOT.TCanvas(\"c_invariant_mass_jpsi_and_isolated_muons\", \"\", 800, 800)\n",
    "RealData[\"invariant_mass_jpsi_and_isolated_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"invariant_mass_jpsi_and_isolated_muons\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"invariant_mass_jpsi_and_isolated_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas49.Draw()\n",
    "canvasas['49'] = canvas49\n",
    "\n",
    "# canvas50 = ROOT.TCanvas(\"c_delta_eta_between_isolated_and_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"delta_eta_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_eta_between_isolated_and_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_eta_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas50.Draw()\n",
    "# canvasas['50'] = canvas50\n",
    "\n",
    "# canvas51 = ROOT.TCanvas(\"c_delta_phi_between_isolated_and_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"delta_phi_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_phi_between_isolated_and_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_phi_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas51.Draw()\n",
    "# canvasas['51'] = canvas51\n",
    "\n",
    "# canvas52 = ROOT.TCanvas(\"c_delta_r_between_isolated_and_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"delta_r_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_r_between_isolated_and_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_r_between_isolated_and_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas52.Draw()\n",
    "# canvasas['52'] = canvas52\n",
    "\n",
    "# canvas53 = ROOT.TCanvas(\"c_jpsi_pt\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas53.Draw()\n",
    "# canvasas['53'] = canvas53\n",
    "\n",
    "# canvas54 = ROOT.TCanvas(\"c_jpsi_eta\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_eta\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas54.Draw()\n",
    "# canvasas['54'] = canvas54\n",
    "\n",
    "# canvas55 = ROOT.TCanvas(\"c_jpsi_phi\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_phi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas55.Draw()\n",
    "# canvasas['55'] = canvas55\n",
    "\n",
    "# canvas56 = ROOT.TCanvas(\"c_delta_eta_between_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"delta_eta_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_eta_between_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_eta_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas56.Draw()\n",
    "# canvasas['56'] = canvas56\n",
    "\n",
    "# canvas57 = ROOT.TCanvas(\"c_delta_phi_between_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"delta_phi_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_phi_between_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_phi_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas57.Draw()\n",
    "# canvasas['57'] = canvas57\n",
    "\n",
    "# canvas58 = ROOT.TCanvas(\"c_delta_r_between_jpsi_muons\", \"\", 800, 800)\n",
    "# RealData[\"delta_r_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_r_between_jpsi_muons\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_r_between_jpsi_muons\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas58.Draw()\n",
    "# canvasas['58'] = canvas58\n",
    "\n",
    "\n",
    "canvas58a = ROOT.TCanvas(\"c_delta_r_between_jpsi_muons_in_peak\", \"\", 800, 800)\n",
    "RealData[\"delta_r_between_jpsi_muons_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"delta_r_between_jpsi_muons_in_peak\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"delta_r_between_jpsi_muons_in_peak\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas58a.Draw()\n",
    "canvasas['58a'] = canvas58a\n",
    "\n",
    "\n",
    "# canvas59 = ROOT.TCanvas(\"c_delta_eta_between_isolated_muon_and_jpsi\", \"\", 800, 800)\n",
    "# RealData[\"delta_eta_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_eta_between_isolated_muon_and_jpsi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_eta_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas59.Draw()\n",
    "# canvasas['59'] = canvas59\n",
    "\n",
    "# canvas60 = ROOT.TCanvas(\"c_delta_phi_between_isolated_muon_and_jpsi\", \"\", 800, 800)\n",
    "# RealData[\"delta_phi_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_phi_between_isolated_muon_and_jpsi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_phi_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas60.Draw()\n",
    "# canvasas['60'] = canvas60\n",
    "\n",
    "# canvas61 = ROOT.TCanvas(\"c_delta_r_between_isolated_muon_and_jpsi\", \"\", 800, 800)\n",
    "# RealData[\"delta_r_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"delta_r_between_isolated_muon_and_jpsi\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"delta_r_between_isolated_muon_and_jpsi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas61.Draw()\n",
    "# canvasas['61'] = canvas61\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "canvas61a = ROOT.TCanvas(\"c_jpsi_muon_pt\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_pt\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas61a.Draw()\n",
    "canvasas['61a'] = canvas61a\n",
    "\n",
    "canvas61b = ROOT.TCanvas(\"c_jpsi_muon_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas61b.Draw()\n",
    "canvasas['61b'] = canvas61b\n",
    "\n",
    "canvas61c = ROOT.TCanvas(\"c_jpsi_muon_pf_iso_id\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muon_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muon_pf_iso_id\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muon_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas61c.Draw()\n",
    "canvasas['61c'] = canvas61c\n",
    "\n",
    "canvas61d = ROOT.TCanvas(\"c_isolated_muons_in_range_pfRelIso03_all\", \"\", 800, 800)\n",
    "RealData[\"isolated_muons_in_range_pfRelIso03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"isolated_muons_in_range_pfRelIso03_all\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"isolated_muons_in_range_pfRelIso03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas61d.Draw()\n",
    "canvasas['61d'] = canvas61d\n",
    "\n",
    "canvas61e = ROOT.TCanvas(\"c_jpsi_muons_in_range_pfRelIso03_all\", \"\", 800, 800)\n",
    "RealData[\"jpsi_muons_in_range_pfRelIso03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_muons_in_range_pfRelIso03_all\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"jpsi_muons_in_range_pfRelIso03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas61e.Draw()\n",
    "canvasas['61e'] = canvas61e\n",
    "\n",
    "canvas61f = ROOT.TCanvas(\"c_jpsi_mass_muons_in_range\", \"\", 800, 800)\n",
    "#RealData[\"jpsi_mass_muons_in_range\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"jpsi_mass_muons_in_range\"].Draw(\"HIST S\")\n",
    "RealData[\"jpsi_mass_muons_in_range\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas61f.Draw()\n",
    "canvasas['61f'] = canvas61f\n",
    "\n",
    "canvas61g = ROOT.TCanvas(\"c_pt_at_low_delta_r\", \"\", 800, 800)\n",
    "RealData[\"pt_at_low_delta_r\"][\"SingleMuon2018\"].Draw(\"P\")\n",
    "canvas61g.Draw()\n",
    "canvasas['61g'] = canvas61g\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# canvas62 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas62.Draw()\n",
    "# canvasas['62'] = canvas62\n",
    "\n",
    "# canvas63 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas63.Draw()\n",
    "# canvasas['63'] = canvas63\n",
    "\n",
    "# canvas64 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas64.Draw()\n",
    "# canvasas['64'] = canvas64\n",
    "\n",
    "# canvas65 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas65.Draw()\n",
    "# canvasas['65'] = canvas65\n",
    "\n",
    "# canvas66 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas66.Draw()\n",
    "# canvasas['66'] = canvas66\n",
    "\n",
    "# canvas67 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas67.Draw()\n",
    "# canvasas['67'] = canvas67\n",
    "\n",
    "# canvas68 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_all_zoomed\", \"\", 800, 800)\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all_zoomed\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas68.Draw()\n",
    "# canvasas['68'] = canvas68\n",
    "\n",
    "# canvas69 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_all_zoomed\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas69.Draw()\n",
    "# canvasas['69'] = canvas69\n",
    "\n",
    "# canvas70 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_all_zoomed\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas70.Draw()\n",
    "# canvasas['70'] = canvas70\n",
    "\n",
    "# canvas71 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_all_medium_id\", \"\", 800, 800)\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all_medium_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas71.Draw()\n",
    "# canvasas['71'] = canvas71\n",
    "\n",
    "# canvas72 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\", \"\", 800, 800)\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas72.Draw()\n",
    "# canvasas['72'] = canvas72\n",
    "\n",
    "# canvas73 = ROOT.TCanvas(\"c_isolated_muon_pf_rel_iso_03_chg_medium_id\", \"\", 800, 800)\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"isolated_muon_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas73.Draw()\n",
    "# canvasas['73'] = canvas73\n",
    "\n",
    "# canvas74 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_all_medium_id\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas74.Draw()\n",
    "# canvasas['74'] = canvas74\n",
    "\n",
    "# canvas75 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas75.Draw()\n",
    "# canvasas['75'] = canvas75\n",
    "\n",
    "# canvas76 = ROOT.TCanvas(\"c_jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas76.Draw()\n",
    "# canvasas['76'] = canvas76\n",
    "\n",
    "# canvas77 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_all_medium_id\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas77.Draw()\n",
    "# canvasas['77'] = canvas77\n",
    "\n",
    "# canvas78 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas78.Draw()\n",
    "# canvasas['78'] = canvas78\n",
    "\n",
    "# canvas79 = ROOT.TCanvas(\"c_jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas79.Draw()\n",
    "# canvasas['79'] = canvas79\n",
    "\n",
    "# canvas80 = ROOT.TCanvas(\"c_jpsi_muon_positive_peak_only_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas80.Draw()\n",
    "# canvasas['80'] = canvas80\n",
    "\n",
    "# canvas81 = ROOT.TCanvas(\"c_jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas81.Draw()\n",
    "# canvasas['81'] = canvas81\n",
    "\n",
    "# canvas82 = ROOT.TCanvas(\"c_jpsi_muon_negative_peak_only_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas82.Draw()\n",
    "# canvasas['82'] = canvas82\n",
    "\n",
    "# canvas83 = ROOT.TCanvas(\"c_jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\", \"\", 800, 800)\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas83.Draw()\n",
    "# canvasas['83'] = canvas83\n",
    "\n",
    "# canvas84 = ROOT.TCanvas(\"c_further_muon_medium_tight_pt\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_medium_tight_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_medium_tight_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_medium_tight_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas84.Draw()\n",
    "# canvasas['84'] = canvas84\n",
    "\n",
    "# canvas85 = ROOT.TCanvas(\"c_further_muon_medium_tight_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_medium_tight_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_medium_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas85.Draw()\n",
    "# canvasas['85'] = canvas85\n",
    "\n",
    "# canvas86 = ROOT.TCanvas(\"c_further_muon_medium_tight_pf_iso_id\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_medium_tight_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_medium_tight_pf_iso_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_medium_tight_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas86.Draw()\n",
    "# canvasas['86'] = canvas86\n",
    "\n",
    "# canvas87 = ROOT.TCanvas(\"c_further_muon_loose_tight_pt\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_loose_tight_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_loose_tight_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_loose_tight_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas87.Draw()\n",
    "# canvasas['87'] = canvas87\n",
    "\n",
    "# canvas88 = ROOT.TCanvas(\"c_further_muon_loose_tight_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_loose_tight_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_loose_tight_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas88.Draw()\n",
    "# canvasas['88'] = canvas88\n",
    "\n",
    "# canvas89 = ROOT.TCanvas(\"c_further_muon_loose_tight_pf_iso_id\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_loose_tight_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_loose_tight_pf_iso_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_loose_tight_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas89.Draw()\n",
    "# canvasas['89'] = canvas89\n",
    "         \n",
    "# canvas90 = ROOT.TCanvas(\"c_further_muon_medium_medium_pt\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_medium_medium_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_medium_medium_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_medium_medium_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas90.Draw()\n",
    "# canvasas['90'] = canvas90\n",
    "\n",
    "# canvas91 = ROOT.TCanvas(\"c_further_muon_medium_medium_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_medium_medium_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_medium_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas91.Draw()\n",
    "# canvasas['91'] = canvas91\n",
    "\n",
    "# canvas92 = ROOT.TCanvas(\"c_further_muon_medium_medium_pf_iso_id\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_medium_medium_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_medium_medium_pf_iso_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_medium_medium_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas92.Draw()\n",
    "# canvasas['92'] = canvas92\n",
    "\n",
    "# canvas93 = ROOT.TCanvas(\"c_further_muon_loose_medium_pt\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_loose_medium_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_loose_medium_pt\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_loose_medium_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas93.Draw()\n",
    "# canvasas['93'] = canvas93\n",
    "\n",
    "# canvas94 = ROOT.TCanvas(\"c_further_muon_loose_medium_pf_rel_iso_03_all\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_loose_medium_pf_rel_iso_03_all\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_loose_medium_pf_rel_iso_03_all\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas94.Draw()\n",
    "# canvasas['94'] = canvas94\n",
    "\n",
    "# canvas95 = ROOT.TCanvas(\"c_further_muon_loose_medium_pf_iso_id\", \"\", 800, 800)\n",
    "# RealData[\"further_muon_loose_medium_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "# S[\"further_muon_loose_medium_pf_iso_id\"].Draw(\"HIST S SAME\")\n",
    "# RealData[\"further_muon_loose_medium_pf_iso_id\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "# canvas95.Draw()\n",
    "# canvasas['95'] = canvas95"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Opening PDF\n",
      "Closing PDF\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Info in <TCanvas::Print>: pdf file Gordon_Michael_July_25_2022.pdf has been created using the current canvas\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_25_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_25_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_25_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_25_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_25_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_25_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_25_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_25_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_25_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_25_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file Gordon_Michael_July_25_2022.pdf and file closed\n"
     ]
    }
   ],
   "source": [
    "for kn, k in enumerate(canvasas.keys()):\n",
    "    \n",
    "    if kn == 0:\n",
    "        print(\"Opening PDF\")\n",
    "        canvasas[k].SaveAs('Gordon_Michael_July_25_2022.pdf(')\n",
    "    \n",
    "    elif kn == len(canvasas) - 1:\n",
    "        print(\"Closing PDF\")\n",
    "        canvasas[k].SaveAs('Gordon_Michael_July_25_2022.pdf)')\n",
    "    \n",
    "    else:\n",
    "        canvasas[k].SaveAs('Gordon_Michael_July_25_2022.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "era = \"2017\"\n",
    "channel = \"Mu\"\n",
    "\n",
    "def DrawStack(MonteCarlo, Data, separator = \"___\"):\n",
    "    era, channel, sample, variable, systematic = list(MonteCarlo.values())[0].GetName().split(separator)\n",
    "    name = \"_\".join([\"stack\", era, channel, variable, systematic])\n",
    "    colors = {\"TTToSemiLeptonic\" : ROOT.kRed}\n",
    "    stack = ROOT.THStack(name, \"\")\n",
    "    \n",
    "    canvas = ROOT.TCanvas(name.replace(\"stack\", \"canvas\"), \"\", 800, 800)\n",
    "  \n",
    "    \n",
    "    for sample, hist in MonteCarlo.items():\n",
    "        hist.SetFillColor(colors.get(sample, ROOT.kMagenta))\n",
    "        hist.SetLineColor(colors.get(sample, ROOT.kMagenta))\n",
    "        stack.Add(hist)\n",
    "        \n",
    "    aggregate = None\n",
    "    \n",
    "    for sample, hist in Data.items():\n",
    "        if aggregate == None:\n",
    "            aggregate = hist.Clone(hist.GetName().replace(\"sample\", \"allData\"))\n",
    "            \n",
    "        else:\n",
    "            aggregate += hist\n",
    "    \n",
    "    maxima = []\n",
    "    minima = []\n",
    "    maxima.append(stack.GetMaximum())\n",
    "    maxima.append(aggregate.GetMaximum())\n",
    "    minima.append(stack.GetMinimum())\n",
    "    minima.append(aggregate.GetMinimum())\n",
    "    \n",
    "    stack.SetMinimum(min(minima))\n",
    "    stack.SetMaximum(max(maxima))\n",
    "    \n",
    "    stack.Draw(\"HIST S\")\n",
    "    aggregate.Draw(\"PE1 SAME\")\n",
    "    \n",
    "    canvas.BuildLegend()\n",
    "    \n",
    "    return stack, aggregate, canvas\n",
    "\n",
    "for kn, variable in enumerate(variables):\n",
    "        \n",
    "    MonteCarlo, RealData = GetHistos(f, era, channel, variable)\n",
    "    \n",
    "    stack, aggregate, canvas = DrawStack(MonteCarlo, RealData)\n",
    "       \n",
    "    if kn == 0:\n",
    "        print(\"Opening PDF\")\n",
    "        canvas.SaveAs('December2.pdf(')\n",
    "\n",
    "    elif kn == len(variables) - 1:\n",
    "        print(\"Closing PDF\")\n",
    "        canvas.SaveAs('December2.pdf)')\n",
    "\n",
    "    else:\n",
    "        canvas.SaveAs('December2.pdf')\n",
    "        \n",
    "    canvas.SaveAs(variable + 'December2.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on _Helper in module _sitebuiltins object:\n",
      "\n",
      "class _Helper(builtins.object)\n",
      " |  Define the builtin 'help'.\n",
      " |  \n",
      " |  This is a wrapper around pydoc.help that provides a helpful message\n",
      " |  when 'help' is typed at the Python interactive prompt.\n",
      " |  \n",
      " |  Calling help() at the Python prompt starts an interactive help session.\n",
      " |  Calling help(thing) prints help for the python object 'thing'.\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  __call__(self, *args, **kwds)\n",
      " |      Call self as a function.\n",
      " |  \n",
      " |  __repr__(self)\n",
      " |      Return repr(self).\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors defined here:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(help)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
