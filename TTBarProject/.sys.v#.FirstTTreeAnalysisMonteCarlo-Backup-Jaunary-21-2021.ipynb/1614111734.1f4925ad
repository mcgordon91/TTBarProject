{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.20/02\n"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "ROOT.gROOT.ProcessLine(\".L FTFunctions.cpp\")\n",
    "ROOT.gInterpreter.Declare(\"\"\"\n",
    "    const UInt_t barWidth = 60;\n",
    "    ULong64_t processed = 0, totalEvents = 0;\n",
    "    std::string progressBar;\n",
    "    std::mutex barMutex; \n",
    "    auto registerEvents = [](ULong64_t nIncrement) {totalEvents += nIncrement;};\n",
    "    ROOT::RDF::RResultPtr<ULong64_t> AddProgressBar(ROOT::RDF::RNode df, int everyN=10000, int totalN=100000) {\n",
    "        registerEvents(totalN);\n",
    "        auto c = df.Count();\n",
    "        c.OnPartialResultSlot(everyN, [everyN] (unsigned int slot, ULong64_t &cnt){\n",
    "            std::lock_guard<std::mutex> l(barMutex);\n",
    "            processed += everyN; //everyN captured by value for this lambda\n",
    "            progressBar = \"[\";\n",
    "            for(UInt_t i = 0; i < static_cast<UInt_t>(static_cast<Float_t>(processed)/totalEvents*barWidth); ++i){\n",
    "                progressBar.push_back('|');\n",
    "            }\n",
    "            // escape the '\\' when defined in python string\n",
    "            std::cout << \"\\\\r\" << std::left << std::setw(barWidth) << progressBar << \"] \" << processed << \"/\" << totalEvents << std::flush;\n",
    "        });\n",
    "        return c;\n",
    "    }\n",
    "\"\"\")\n",
    "useRange = False\n",
    "if not useRange:\n",
    "    nThreads = 8\n",
    "    ROOT.ROOT.EnableImplicitMT(nThreads)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#listOfFiles = []\n",
    "#redirector = \"root://cms-xrd-global.cern.ch/\"\n",
    "#with open(\"TTToSemiLeptonic.txt\", \"r\") as inputFile:\n",
    "#    for line in inputFile:\n",
    "#        cleanLine = line.rstrip()\n",
    "#        listOfFiles.append(redirector + cleanLine)\n",
    "#listOfFiles = listOfFiles[0:2]\n",
    "listOfFilesTToSemiLeptonic = [\"../TopMassFiles/MonteCarlo/TTToSemiLeptonic-2017-1.root\",\"../TopMassFiles/MonteCarlo/TTToSemiLeptonic-2017-2.root\",\"../TopMassFiles/MonteCarlo/TTToSemiLeptonic-2017-3.root\",\"../TopMassFiles/MonteCarlo/TTToSemiLeptonic-2017-4.root\"]\n",
    "listOfFilesWJetsToLNu = [\"../TopMassFiles/MonteCarlo/WJetsToLNu-2017-1.root\",\"../TopMassFiles/MonteCarlo/WJetsToLNu-2017-2.root\",\"../TopMassFiles/MonteCarlo/WJetsToLNu-2017-3.root\",\"../TopMassFiles/MonteCarlo/WJetsToLNu-2017-4.root\"]\n",
    "dictOfListOfFiles = {\"TTToSemiLeptonic\" : listOfFilesTToSemiLeptonic, \"WJetsToLNu\" : listOfFilesWJetsToLNu}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "../TopMassFiles/MonteCarlo/TTToSemiLeptonic-2017-1.root ../TopMassFiles/MonteCarlo/TTToSemiLeptonic-2017-2.root ../TopMassFiles/MonteCarlo/TTToSemiLeptonic-2017-3.root ../TopMassFiles/MonteCarlo/TTToSemiLeptonic-2017-4.root 1812760.0\n",
      "545211186.9143426\n",
      "../TopMassFiles/MonteCarlo/WJetsToLNu-2017-1.root ../TopMassFiles/MonteCarlo/WJetsToLNu-2017-2.root ../TopMassFiles/MonteCarlo/WJetsToLNu-2017-3.root ../TopMassFiles/MonteCarlo/WJetsToLNu-2017-4.root 6217509.0\n",
      "6211815.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TClass::Init>: no dictionary for class edm::Hash<1> is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ProcessHistory is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ProcessConfiguration is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ParameterSetBlob is available\n",
      "Warning in <TClass::Init>: no dictionary for class pair<edm::Hash<1>,edm::ParameterSetBlob> is available\n"
     ]
    }
   ],
   "source": [
    "chain = {}\n",
    "meta = {}\n",
    "rdf = {}\n",
    "mrdf = {}\n",
    "nevents = {}\n",
    "sumweight = {}\n",
    "neventsVal = {}\n",
    "rdfTriggersAndMasks = {}\n",
    "rdfOnePlusMuons = {}\n",
    "rdfJetVariables = {}\n",
    "rdfTwoPlusJets = {}\n",
    "rdfNoMuTrigger = {}\n",
    "rdfmu = {}\n",
    "hist = {}\n",
    "failTrigger = {}\n",
    "\n",
    "for sample, fileList in dictOfListOfFiles.items():\n",
    "    chain[sample] = ROOT.TChain(\"Events\")\n",
    "    meta[sample] = ROOT.TChain(\"Runs\")\n",
    "    \n",
    "    for file in fileList:\n",
    "        print(file, end=\" \")\n",
    "        \n",
    "        chain[sample].Add(file)\n",
    "        meta[sample].Add(file)\n",
    "\n",
    "    rdf[sample] = ROOT.ROOT.RDataFrame(chain[sample])\n",
    "    mrdf[sample] = ROOT.ROOT.RDataFrame(meta[sample])\n",
    "\n",
    "    if useRange:\n",
    "        rdf[sample] = rdf[sample].Range(1000)\n",
    "        \n",
    "    nevents[sample] = mrdf[sample].Sum(\"genEventCount\")\n",
    "    sumweight[sample] = mrdf[sample].Sum(\"genEventSumw\")\n",
    "    \n",
    "    print(nevents[sample].GetValue())\n",
    "    print(sumweight[sample].GetValue())\n",
    "    neventsVal[sample] = nevents[sample].GetValue()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Semileptonic ttbar xsection: 364.3109\n",
    "#Single mu trigger for 2017 (B,C,D,E,F): \"HLT_IsoMu27\"\n",
    "#\"HLT_Ele35_WPTight_Gsf\"\n",
    "#lumiDict = {\"2017\": 41.53, \"2018\": 59.97}\n",
    "wgtFormula = {}\n",
    "\n",
    "# wgtFormula used to weight each event\n",
    "# XS = Literature Cross section of the process of interest (in picobarnes; the 1000 converts to femotobarnes), lumi = presumed luminosity of the data one is normalizing against; XS * lumi = # of expected events;\n",
    "# genWeight = quantity stored in every event which comes from the Monte Carlo generator telling you what the value of the generated event is (usually close to 1); it can be + or -; it also contains matching\n",
    "#     effeciency; tells you the Monte Carlo defined value of the event\n",
    "# sW = sum of weights; normalizes the genWeight\n",
    "lumiDict = {\"2017\": 4.454466381} #  brilcalc lumi --normtag /cvmfs/cms-bril.cern.ch/cms-lumi-pog/Normtags/normtag_PHYSICS.json -u /fb --begin 302031 --end 302663 --hltpath \"HLT_IsoMu27*\"\n",
    "wgtFormula['TTToSemiLeptonic'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=364.3109, lumi=lumiDict[\"2017\"], sW=float(sumweight['TTToSemiLeptonic'].GetValue()))\n",
    "wgtFormula['WJetsToLNu'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=61526.7, lumi=lumiDict[\"2017\"], sW=float(sumweight['WJetsToLNu'].GetValue()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Object selection (masks) and cuts (filters)\n",
    "# LumiXS is lumi * xs\n",
    "for sample in dictOfListOfFiles:\n",
    "    rdfTriggersAndMasks[sample] = rdf[sample].Filter(\"HLT_IsoMu27 == true\",\"HLTTriggerSingleMuonTrigger\").Define(\"LumiXS\",wgtFormula[sample])\\\n",
    "        .Define(\"mu_mask\", \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_mediumId == true && Muon_pfIsoId >= 4\")\\\n",
    "        .Define(\"jet_mask_old\", \"Jet_pt > 30 && abs(Jet_eta) < 2.5 && Jet_jetId > 2\")\n",
    "    rdfOnePlusMuons[sample] = rdfTriggersAndMasks[sample].Filter(\"Sum(mu_mask) >= 1\", \"At Least One Good Muon\")\\\n",
    "        .Define(\"SMuon_pt\", \"Muon_pt[mu_mask]\")\\\n",
    "        .Define(\"SMuon_eta\", \"Muon_eta[mu_mask]\")\\\n",
    "        .Define(\"SMuon_phi\", \"Muon_phi[mu_mask]\")\\\n",
    "        .Define(\"SMuon_mass\", \"Muon_mass[mu_mask]\")\\\n",
    "        .Define(\"SMuon_pfRelIso03_all\", \"Muon_pfRelIso03_all[mu_mask]\")\\\n",
    "        .Define(\"SMuon_pfRelIso03_chg\", \"Muon_pfRelIso03_chg[mu_mask]\")\\\n",
    "        .Define(\"SMuon_pfRelIso04_all\", \"Muon_pfRelIso04_all[mu_mask]\")\n",
    "    rdfJetVariables[sample] = rdfOnePlusMuons[sample]\\\n",
    "        .Define(\"jet_mask\", \"ROOT::VecOps::RVec<Int_t> jmask = (Jet_pt >= 30 && abs(Jet_eta) <= 2.5 && Jet_jetId >= 2); \"\\\n",
    "                          \"for(int i=0; i < SMuon_pt.size(); ++i){\"\\\n",
    "                              \"ROOT::VecOps::RVec<Float_t> dr;\"\\\n",
    "                              \"for(int j=0; j < jmask.size(); ++j){\"\\\n",
    "                                  \"dr.push_back(ROOT::VecOps::DeltaR(Jet_eta.at(j), SMuon_eta.at(i), Jet_phi.at(j), SMuon_phi.at(i)));}\"\\\n",
    "                                  \"jmask = jmask && dr >= 0.4;\"\\\n",
    "                                  \"dr.clear();}\"\\\n",
    "                          \"return jmask;\")\\\n",
    "        .Define(\"MediumBJetMask\", \"Jet_btagDeepFlavB > 0.3033 && jet_mask\" )\\\n",
    "        .Define(\"MTofMETandMu\", \"FTA::transverseMassMET(SMuon_pt, SMuon_phi, SMuon_mass, METFixEE2017_pt, METFixEE2017_phi)\")\\\n",
    "        .Define(\"Num_Jets\", \"Jet_pt[jet_mask].size()\")\\\n",
    "        .Define(\"SJet1_pt\", \"Jet_pt[jet_mask].size() > 0 ? Jet_pt[jet_mask].at(0) : -500\")\\\n",
    "        .Define(\"SJet2_pt\", \"Jet_pt[jet_mask].size() > 1 ? Jet_pt[jet_mask].at(1) : -500\")\\\n",
    "        .Define(\"SJet1_eta\", \"Jet_eta[jet_mask].size() > 0 ? Jet_eta[jet_mask].at(0) : 500\")\\\n",
    "        .Define(\"SJet2_eta\", \"Jet_eta[jet_mask].size() > 1 ? Jet_eta[jet_mask].at(1) : 500\")\\\n",
    "        .Define(\"SJet1_phi\", \"Jet_phi[jet_mask].size() > 0 ? Jet_phi[jet_mask].at(0) : 500\")\\\n",
    "        .Define(\"SJet2_phi\", \"Jet_phi[jet_mask].size() > 1 ? Jet_phi[jet_mask].at(1) : 500\")\\\n",
    "        .Define(\"SJet_btagDeepFlavB\", \"Jet_btagDeepFlavB[jet_mask]\")\\\n",
    "        .Define(\"Num_BTaggedJets\", \"Sum(MediumBJetMask)\")\\\n",
    "        .Define(\"Ht\", \"Sum(Jet_pt[jet_mask])\")\n",
    "    rdfTwoPlusJets[sample] = rdfJetVariables[sample].Filter(\"Num_Jets >= 2\", \"At Least Two Jets\")\\\n",
    "        .Define(\"DeepJetB\", \"Jet_pt[jet_mask].size() > 0 ? Jet_btagDeepFlavB[jet_mask].at(0) : 0\")\\\n",
    "        .Define(\"Num_Muons\", \"Muon_pt[mu_mask].size()\")\n",
    "    rdfNoMuTrigger[sample] = rdf[sample].Filter(\"HLT_IsoMu27 == false\",\"Fail HLTTriggerSingleMuonTrigger\").Define(\"LumiXS\",wgtFormula[sample])\\\n",
    "        .Define(\"mu_mask\", \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_looseId == true && Muon_pfIsoId >= 4\")\\\n",
    "        .Define(\"jet_mask_old\", \"Jet_pt > 30 && abs(Jet_eta) < 2.5 && Jet_jetId > 2\")\\\n",
    "        .Filter(\"Sum(mu_mask) > 0\", \"At Least One Good Muon\")\\\n",
    "        .Define(\"SMuon_pt\", \"Muon_pt[mu_mask]\")\\\n",
    "        .Define(\"SMuon_eta\", \"Muon_eta[mu_mask]\")\\\n",
    "        .Define(\"SMuon_phi\", \"Muon_phi[mu_mask]\")\\\n",
    "        .Define(\"SMuon_mass\", \"Muon_mass[mu_mask]\")\n",
    "    rdfmu[sample] = rdfTwoPlusJets[sample].Filter(\"Num_BTaggedJets > 0\", \"At Leat One B-Tagged Jet\")\n",
    "        # 10-20-20 Creates a pointer to point to the same node as rdfTwoPlusJets; rdfNoMuTrigger creates an orthogonal set of events\n",
    "        #All SMuon added sometime in August, 2020; criteria taken from...\n",
    "        #All SJets added 9-9-20; idea was to plot transverse momentum, pseudorapidity, and jet angle for situations with at least 1 and at least 2 jets because...; criteria taken from..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "for sample in dictOfListOfFiles:\n",
    "    \n",
    "    if sample not in hist.keys():\n",
    "        hist[sample] = {}\n",
    "        \n",
    "    hist[sample][\"mu_pt\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"mu_pt\",\"Monte Carlo \" + sample + \";Pt (GeV);Events\",100,20,220),\"SMuon_pt\",\"LumiXS\")\n",
    "    hist[sample][\"mu_eta\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"mu_eta\", \"Monte Carlo \" + sample + \"; Eta; Events\",100,-3,3),\"SMuon_eta\",\"LumiXS\")\n",
    "    hist[sample][\"mu_phi\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"mu_phi\", \"Monte Carlo \" + sample + \"; Phi (Radians); Events\",100,-3.5,3.5),\"SMuon_phi\",\"LumiXS\")\n",
    "    # Jet1 and jet2 values corresponding to situations with at least 1 and at least 2 jets plotted because...; all added 9-9-20\n",
    "    hist[sample][\"jet1_pt\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet1_pt\", \"Monte Carlo \" + sample + \"; Pt (GeV); Events\", 100, 20, 200), \"SJet1_pt\", \"LumiXS\")\n",
    "    hist[sample][\"jet2_pt\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet2_pt\", \"Monte Carlo \" + sample + \"; Pt (GeV); Events\", 100, 20, 200), \"SJet2_pt\", \"LumiXS\")\n",
    "    hist[sample][\"jet1_eta\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet1_eta\", \"Monte Carlo \" + sample + \"; Eta; Events\", 100, -3, 3), \"SJet1_eta\", \"LumiXS\")\n",
    "    hist[sample][\"jet2_eta\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet2_eta\", \"Monte Carlo \" + sample +\"; Eta; Events\", 100, -3, 3), \"SJet2_eta\", \"LumiXS\")\n",
    "    hist[sample][\"jet1_phi\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet1_phi\", \"Monte Carlo \" + sample + \"; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet1_phi\", \"LumiXS\")\n",
    "    hist[sample][\"jet2_phi\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet2_phi\", \"Monte Carlo \" + sample +\"; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet2_phi\", \"LumiXS\")\n",
    "    hist[sample][\"jet_deep\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet_deep\", \"Monte Carlo \" + sample +\"; Discriminant Value; Events\", 100, 0, 1), \"DeepJetB\", \"LumiXS\")\n",
    "    hist[sample][\"number_of_jets\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"number_of_jets\", \"Monte Carlo \" + sample +\"; Number Of Jets; Events\", 20, 0, 20), \"Num_Jets\", \"LumiXS\") \n",
    "    hist[sample][\"number_of_muons\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"number_of_muons\", \"Monte Carlo \" + sample +\"; Number of Muons; Events\", 5, 0, 5), \"Num_Muons\", \"LumiXS\")\n",
    "    hist[sample][\"transverse_mass\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"transverse_mass\", \"Monte Carlo \" + sample +\"; Transverse Mass (GeV); Events\", 150, 0, 150), \"MTofMETandMu\", \"LumiXS\")\n",
    "    hist[sample][\"missing_transverse_momentum\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"missing_transverse_momentum\", \"Monte Carlo\" + sample + \"; Missing Transverse Momentum (GeV); Events\", 150, 0, 300), \"METFixEE2017_pt\", \"LumiXS\")\n",
    "    hist[sample][\"ht\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"Ht\", \"Monte Carlo \" + sample + \"; Ht; Events\", 300, 0, 1500), \"Ht\", \"LumiXS\")\n",
    "    hist[sample][\"muon_pfRelIso03_all\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"Muon Pf Rel Iso 03 (All)\", \"Monte Carlo \" + sample + \"; Muon Pf Rel Iso 03 (All); Events\", 60, 0, .3), \"SMuon_pfRelIso03_all\", \"LumiXS\")\n",
    "    hist[sample][\"muon_pfRelIso03_chg\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"Muon Pf Rel Iso 03 (Chg)\", \"Monte Carlo \" + sample + \"; Muon Pf Rel Iso 03 (Chg); Events\", 60, 0, .3), \"SMuon_pfRelIso03_chg\", \"LumiXS\")\n",
    "    hist[sample][\"muon_pfRelIso04_all\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"Muon Pf Rel Iso 04 (All)\", \"Monte Carlo \" + sample + \"; Muon Pf Rel Iso 04 (All); Events\", 60, 0, .3), \"SMuon_pfRelIso04_all\", \"LumiXS\")\n",
    "    \n",
    "\n",
    "    if sample not in failTrigger.keys():\n",
    "        failTrigger[sample] = {}\n",
    "        \n",
    "    failTrigger[sample][\"mu_pt\"] = rdfNoMuTrigger[sample].Histo1D((\"failTrigger_mu_pt\",\"Failed Trigger Muon Pt;Pt (GeV);Events\",100,20,220),\"SMuon_pt\",\"LumiXS\")\n",
    "    failTrigger[sample][\"mu_eta\"] = rdfNoMuTrigger[sample].Histo1D((\"failTrigger_mu_eta\", \"Failed Trigger Muon Pseudorapidity; Eta; Events\",100,-3,3),\"SMuon_eta\",\"LumiXS\")\n",
    "    failTrigger[sample][\"mu_phi\"] = rdfNoMuTrigger[sample].Histo1D((\"failTrigger_mu_phi\", \"Failed Trigger Muon Angle; Phi (Radians); Events\",100,-3.5,3.5),\"SMuon_phi\",\"LumiXS\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "for sample in dictOfListOfFiles:\n",
    "\n",
    "    ROOT.RDF.SaveGraph(rdf[sample], str(sample) + \".dot\")\n",
    "    #import graphviz\n",
    "    #g = graphviz.Digraph('G', filename='graph.dot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "booktrigger = {}\n",
    "\n",
    "for sample in dictOfListOfFiles:\n",
    "    booktrigger[sample] = ROOT.AddProgressBar(ROOT.RDF.AsRNode(rdf[sample]), 2000, int(neventsVal[sample]))\n",
    "\n",
    "for sample in dictOfListOfFiles:\n",
    "    _ = booktrigger[sample].GetValue()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for sample in dictOfListOfFiles:\n",
    "    era = \"2017\"\n",
    "    process = sample\n",
    "    channel = \"Mu\"\n",
    "    syst = \"nominal\"\n",
    "\n",
    "    outFile = ROOT.TFile.Open(\"{}_{}_{}.root\".format(era, channel, process), \"RECREATE\")\n",
    "    for name, hist_pointer in hist[sample].items():\n",
    "\n",
    "        hist_value = hist_pointer.GetValue()\n",
    "\n",
    "        hist_value.SetName(\"{}___{}___{}___{}___{}\".format(era, channel, process, name, syst))\n",
    "\n",
    "        hist_value.Write()\n",
    "\n",
    "    #Close the file\n",
    "\n",
    "    outFile.Close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "canvasas = {}\n",
    "failCanvasas = {}\n",
    "for k in hist.keys():\n",
    "    for l in hist[k].keys():\n",
    "        canvasas[k][l] = ROOT.TCanvas(l)\n",
    "        hist[k][l].Draw(\"HIST S\")\n",
    "        canvasas[k][l].Draw()\n",
    "#for kk in failTrigger.keys():\n",
    "#    failCanvasas[kk] = ROOT.TCanvas(\"FailedTrigger\" + kk)\n",
    "#    failTrigger[kk].Draw(\"HIST S\")\n",
    "#    failCanvasas[kk].Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Opening PDF\n",
      "Closing PDF\n"
     ]
    }
   ],
   "source": [
    "for kn, k in enumerate(canvasas.keys()):\n",
    "    \n",
    "    if kn == 0:\n",
    "        print(\"Opening PDF\")\n",
    "        canvasas[k].SaveAs('October8MonteCarlo.pdf(')\n",
    "    \n",
    "    elif kn == len(canvasas) - 1:\n",
    "        print(\"Closing PDF\")\n",
    "        canvasas[k].SaveAs('October8MonteCarlo.pdf)')\n",
    "    \n",
    "    else:\n",
    "        canvasas[k].SaveAs('October8MonteCarlo.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 229\r\n",
      "-rw-r--r--. 1 migordon 1399  15708 Aug 18 21:04 TTto2L2Nu.txt\r\n",
      "-rw-r--r--. 1 migordon 1399  41132 Aug 18 21:04 TTToSemiLeptonic.txt\r\n",
      "-rw-r--r--. 1 migordon 1399  16650 Aug 18 23:03 Untitled.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  14492 Aug 25 19:16 Plots.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399 116428 Aug 27 00:21 FirstTTreeAnalysis.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  27821 Aug 27 00:22 August26.pdf\r\n"
     ]
    }
   ],
   "source": [
    "!ls -ltr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
