{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.24/06\n"
     ]
    }
   ],
   "source": [
    "import ROOT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 21561\r\n",
      "-rw-r--r--. 1 migordon 1399   15708 Aug 18  2020 TTto2L2Nu.txt\r\n",
      "-rw-r--r--. 1 migordon 1399   41132 Aug 18  2020 TTToSemiLeptonic.txt\r\n",
      "-rw-r--r--. 1 migordon 1399   14492 Aug 25  2020 Plots.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   37773 Aug 27  2020 August26.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   34610 Sep  2  2020 FTFunctions.cpp\r\n",
      "-rw-r--r--. 1 migordon 1399    5774 Sep 21  2020 RealData\r\n",
      "-rw-r--r--. 1 migordon 1399   45563 Sep 23  2020 September9.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   45708 Sep 24  2020 September23MonteCarlo.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   46111 Sep 24  2020 September23RealData.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   48733 Oct  9  2020 October8MonteCarlo.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399     926 Oct 20  2020 graph.dot.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  145577 Oct 20  2020 October15.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   49188 Nov 11  2020 October8RealData.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  159946 Nov 23  2020 November12.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  159946 Nov 23  2020 November23.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  159946 Nov 24  2020 November24.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  114959 Dec  3  2020 December2.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  145516 Dec 10  2020 December10.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198313 Jan 19  2021 January18LooseID.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198153 Jan 21  2021 January21MediumID.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198536 Jan 21  2021 January21TightID.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198491 Jan 26  2021 January26WithVeto.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  197655 Jan 28  2021 January28WithVeto.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198647 Feb 23  2021 February16AtLeastOneVetoedMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  269832 Feb 23  2021 FirstTTreeAnalysisMonteCarlo-Backup.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  378821 Feb 23  2021 FirstTTreeAnalysisMonteCarlo-Backup-Jaunary-21-2021.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  198548 Feb 24  2021 February23ExactlyOneGoodMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198645 Feb 24  2021 February23AtLeastOneGoodMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  148905 Feb 24  2021 February23NoGoodMuons.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198461 Feb 24  2021 February24VetoedMuons.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  197977 Feb 25  2021 February25AtLeastOneGoodMuon.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  198084 Feb 25  2021 February25VetoedMuons.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  237095 Mar  7  2021 March2.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  273136 Mar  8  2021 March8.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  267119 Apr 22  2021 FirstTTreeAnalysisRealData-Backup-January-21-2021.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  277452 May  2  2021 April27.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  383603 May  3  2021 May3.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  385981 May  5  2021 May4AtLeast4JetsAtLeast1BTagged.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399    7149 May  5  2021 WJetsToLNu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   46268 May  5  2021 2017_Mu_TTToSemiLeptonic.root\r\n",
      "-rw-r--r--. 1 migordon 1399   29677 May  5  2021 2017_Mu_WJetsToLNu.root\r\n",
      "-rw-r--r--. 1 migordon 1399  382235 May  5  2021 FirstTTreeAnalysisMonteCarlo2017Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   21530 May  5  2021 2017_Mu_Data.root\r\n",
      "-rw-r--r--. 1 migordon 1399  264376 May  6  2021 FirstTTreeAnalysisRealData2017Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399    7138 May  6  2021 TTToSemiLeptonic.dot\r\n",
      "-rw-r--r--. 1 migordon 1399    7261 May  6  2021 TTTo2L2Nu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399    7219 May  6  2021 graph.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   44070 May  6  2021 2018_Mu_TTToSemiLeptonic.root\r\n",
      "-rw-r--r--. 1 migordon 1399   44250 May  6  2021 2018_Mu_TTTo2L2Nu.root\r\n",
      "-rw-r--r--. 1 migordon 1399  388482 May  6  2021 May6.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  292166 May 12  2021 FirstTTreeAnalysisMonteCarlo2018Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  322266 May 12  2021 May11.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   34610 May 26  2021 TopMassFunctions.cpp\r\n",
      "-rw-r--r--. 1 migordon 1399   24558 Aug 19  2021 FirstTTreeAnalysis2018United-Backup.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399     427 Aug 24  2021 New_Combination.root\r\n",
      "-rw-r--r--. 1 migordon 1399  152243 Aug 25  2021 August25_50K_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  253643 Aug 25  2021 August25_500K_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  268165 Aug 26  2021 August25_1M_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  288466 Aug 26  2021 August25_3M_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  293684 Aug 26  2021 August25_5M_Events.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   32517 Aug 30  2021 FirstTTreeAnalysis2018United-Backup-Copy1.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  308929 Aug 31  2021 August31.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  287815 Sep  1  2021 September1.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  165129 Sep  2  2021 FirstTTreeAnalysisRealData2018Run.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  342481 Sep  3  2021 September2.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  354661 Sep 21  2021 September21TightMedium.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  354301 Sep 21  2021 September21TightTight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  354485 Sep 21  2021 September22MediumTight.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  568715 Sep 28  2021 MasterPlots-9-27-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  366143 Oct  1  2021 September30.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399   41807 Oct  6  2021 FirstTTreeAnalysis2018United-AdditionalJPsi-10-5-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  608173 Oct  6  2021 MasterPlots-10-5-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   41567 Oct 20  2021 FirstTTreeAnalysis2018United-AdditionalJPsi-10-20-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  718643 Oct 20  2021 MasterPlots-10-20-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399  460135 Oct 21  2021 October21.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  459750 Oct 28  2021 October26.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  469993 Nov 11  2021 November11.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399  815942 Dec 20 17:02 MasterPlots.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   35815 Jan  7 10:38 FirstTTreeAnalysis2018United-AdditionalJPsi.py\r\n",
      "-rw-r--r--. 1 migordon 1399   48706 Jan  7 13:07 FirstTTreeAnalysis2018United-AdditionalJPsi.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399 5254040 Jan  9 17:33 FirstTTreeAnalysis2018United-AdditionalJPsi-OldCopy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   49408 Jan  9 17:40 FirstTTreeAnalysis2018United-AdditionalJPsi-1-9-22-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   35084 Jan 10 09:48 FirstTTreeAnalysis2018United-AdditionalJPsi-9-27-21-Copy.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   52579 Jan 10 11:44 FirstTTreeAnalysis2018United-AdditionalJPsi-Late2021Fixes.py\r\n",
      "drwxr-xr-x. 2 migordon 1399    4096 Jan 10 11:45 __pycache__\r\n",
      "-rw-r--r--. 1 migordon 1399   59068 Feb 17 20:24 Combination.root_backup\r\n",
      "-rw-r--r--. 1 migordon 1399   22036 May  9 11:57 FirstTTreeAnalysis2018United.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399    2290 May 14 11:39 Data.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   12704 May 14 11:39 Data_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399    2415 May 14 11:39 MonteCarloTTToSemiLeptonic.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   13462 May 14 11:39 MonteCarloTTToSemiLeptonic_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399    2415 May 14 11:39 MonteCarloTTTo2L2Nu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   13462 May 14 11:39 MonteCarloTTTo2L2Nu_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399    2415 May 14 11:39 MonteCarloWJetsToLNu.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   13462 May 14 11:39 MonteCarloWJetsToLNu_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399    2470 May 14 11:39 MonteCarloST_tW_top.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   13462 May 14 11:39 MonteCarloST_tW_top_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399    2470 May 14 11:39 MonteCarloST_tchannel_top.dot\r\n",
      "-rw-r--r--. 1 migordon 1399   13462 May 14 11:39 MonteCarloST_tchannel_top_graph.pdf\r\n",
      "-rw-r--r--. 1 migordon 1399    7113 May 14 11:43 2018_Mu_Data.root\r\n",
      "-rw-r--r--. 1 migordon 1399   11045 May 14 11:46 2018_Mu_MonteCarloTTToSemiLeptonic.root\r\n",
      "-rw-r--r--. 1 migordon 1399   10799 May 14 11:50 2018_Mu_MonteCarloTTTo2L2Nu.root\r\n",
      "-rw-r--r--. 1 migordon 1399   10967 May 14 11:50 2018_Mu_MonteCarloWJetsToLNu.root\r\n",
      "-rw-r--r--. 1 migordon 1399    7629 May 14 11:50 2018_Mu_MonteCarloST_tW_top.root\r\n",
      "-rw-r--r--. 1 migordon 1399    8838 May 14 11:50 2018_Mu_MonteCarloST_tchannel_top.root\r\n",
      "-rw-r--r--. 1 migordon 1399   75163 May 14 11:52 FirstTTreeAnalysis2018United-AdditionalJPsi-Late2021Fixes.ipynb\r\n",
      "-rw-r--r--. 1 migordon 1399   38794 May 14 11:59 Combination.root\r\n",
      "-rw-r--r--. 1 migordon 1399  221229 May 14 12:00 MasterPlots-Late2021Fixes.ipynb\r\n"
     ]
    }
   ],
   "source": [
    "!ls -ltr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hadd Target file: Combination.root\n",
      "hadd compression setting for all output: 1\n",
      "hadd Source file 1: 2018_Mu_Data.root\n",
      "hadd Source file 2: 2018_Mu_MonteCarloTTToSemiLeptonic.root\n",
      "hadd Source file 3: 2018_Mu_MonteCarloTTTo2L2Nu.root\n",
      "hadd Source file 4: 2018_Mu_MonteCarloWJetsToLNu.root\n",
      "hadd Source file 5: 2018_Mu_MonteCarloST_tW_top.root\n",
      "hadd Source file 6: 2018_Mu_MonteCarloST_tchannel_top.root\n",
      "hadd Target path: Combination.root:/\n"
     ]
    }
   ],
   "source": [
    "!mv Combination.root Combination.root_backup\n",
    "!hadd -f Combination.root 2018_Mu_Data.root 2018_Mu_MonteCarloTTToSemiLeptonic.root 2018_Mu_MonteCarloTTTo2L2Nu.root 2018_Mu_MonteCarloWJetsToLNu.root 2018_Mu_MonteCarloST_tW_top.root 2018_Mu_MonteCarloST_tchannel_top.root"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2018___Mu___Data___leading_muon_pt___nominal', '2018___Mu___Data___leading_muon_eta___nominal', '2018___Mu___Data___leading_muon_phi___nominal', '2018___Mu___Data___leading_muon_mass___nominal', '2018___Mu___Data___leading_muon_charge___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_mass___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_charge___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_mass___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_charge___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_muon_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_muon_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_muon_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_muon_mass___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_muon_charge___nominal', '2018___Mu___MonteCarloST_tW_top___leading_muon_pt___nominal', '2018___Mu___MonteCarloST_tW_top___leading_muon_eta___nominal', '2018___Mu___MonteCarloST_tW_top___leading_muon_phi___nominal', '2018___Mu___MonteCarloST_tW_top___leading_muon_mass___nominal', '2018___Mu___MonteCarloST_tW_top___leading_muon_charge___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_muon_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_muon_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_muon_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_muon_mass___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_muon_charge___nominal']\n"
     ]
    }
   ],
   "source": [
    "f = ROOT.TFile.Open('Combination.root', 'read')\n",
    "k = [ff.GetName() for ff in f.GetListOfKeys()]\n",
    "print(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "eras = list(set([kk.split(\"___\")[0] for kk in k]))\n",
    "channels = list(set([kk.split(\"___\")[1] for kk in k]))\n",
    "samples = list(set([kk.split(\"___\")[2] for kk in k]))\n",
    "variables = list(set([kk.split(\"___\")[3] for kk in k]))\n",
    "systematics = list(set([kk.split(\"___\")[4] for kk in k]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2018']\n",
      "['Mu']\n",
      "['Data', 'MonteCarloST_tW_top', 'MonteCarloTTTo2L2Nu', 'MonteCarloWJetsToLNu', 'MonteCarloTTToSemiLeptonic', 'MonteCarloST_tchannel_top']\n",
      "['leading_muon_phi', 'leading_muon_eta', 'leading_muon_charge', 'leading_muon_mass', 'leading_muon_pt']\n",
      "['nominal']\n"
     ]
    }
   ],
   "source": [
    "print(eras)\n",
    "print(channels)\n",
    "print(samples)\n",
    "print(variables)\n",
    "print(systematics)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def GetHistos(f, era, channel, variable, systematic = \"nominal\", separator = \"___\"):\n",
    "    \n",
    "    MC = dict()\n",
    "    Data = dict()\n",
    "    \n",
    "    k = [ff.GetName() for ff in f.GetListOfKeys()]\n",
    "    print(k)\n",
    "    k = [kk for kk in k if era == kk.split(separator)[0]]\n",
    "    k = [kk for kk in k if channel == kk.split(separator)[1]]\n",
    "    k = [kk for kk in k if variable == kk.split(separator)[3]]\n",
    "    k = [kk for kk in k if systematic == kk.split(separator)[4]]\n",
    "    \n",
    "    for kk in k:\n",
    "        sample = kk.split(separator)[2]\n",
    "        \n",
    "        if \"data\" in sample.lower():\n",
    "            Data[sample] = f.Get(kk)\n",
    "            print(\"Data\")\n",
    "            \n",
    "        else:\n",
    "            MC[sample] = f.Get(kk)\n",
    "            print(sample)\n",
    "            \n",
    "    return MC, Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2018___Mu___Data___leading_muon_pt___nominal', '2018___Mu___Data___leading_muon_eta___nominal', '2018___Mu___Data___leading_muon_phi___nominal', '2018___Mu___Data___leading_muon_mass___nominal', '2018___Mu___Data___leading_muon_charge___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_pt___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_eta___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_phi___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_mass___nominal', '2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_charge___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_pt___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_eta___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_phi___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_mass___nominal', '2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_charge___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_muon_pt___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_muon_eta___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_muon_phi___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_muon_mass___nominal', '2018___Mu___MonteCarloWJetsToLNu___leading_muon_charge___nominal', '2018___Mu___MonteCarloST_tW_top___leading_muon_pt___nominal', '2018___Mu___MonteCarloST_tW_top___leading_muon_eta___nominal', '2018___Mu___MonteCarloST_tW_top___leading_muon_phi___nominal', '2018___Mu___MonteCarloST_tW_top___leading_muon_mass___nominal', '2018___Mu___MonteCarloST_tW_top___leading_muon_charge___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_muon_pt___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_muon_eta___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_muon_phi___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_muon_mass___nominal', '2018___Mu___MonteCarloST_tchannel_top___leading_muon_charge___nominal']\n",
      "{} {}\n"
     ]
    }
   ],
   "source": [
    "x, y = GetHistos(f, \"2018\", \"Mu\", \"mu_pt\")\n",
    "print(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Load histograms from file(s)\n",
    "MonteCarlo = dict()\n",
    "RealData = dict()\n",
    "\n",
    "MonteCarlo[\"leading_isolated_muon_pt\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_eta\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_phi\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_mass\"] = dict()\n",
    "MonteCarlo[\"leading_isolated_muon_charge\"] = dict()\n",
    "#MonteCarlo[\"delta_eta\"] = dict()\n",
    "#MonteCarlo[\"delta_phi\"] = dict()\n",
    "#MonteCarlo[\"delta_r\"] = dict()\n",
    "\n",
    "RealData[\"leading_isolated_muon_pt\"] = dict()\n",
    "RealData[\"leading_isolated_muon_eta\"] = dict()\n",
    "RealData[\"leading_isolated_muon_phi\"] = dict()\n",
    "RealData[\"leading_isolated_muon_mass\"] = dict()\n",
    "RealData[\"leading_isolated_muon_charge\"] = dict()\n",
    "#RealData[\"delta_eta\"] = dict()\n",
    "#RealData[\"delta_phi\"] = dict()\n",
    "#RealData[\"delta_r\"] = dict()\n",
    "\n",
    "MonteCarlo[\"leading_muon_pt\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_muon_pt\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_muon_pt\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_muon_pt\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_muon_pt\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_muon_pt___nominal\")\n",
    "RealData[\"leading_muon_pt\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_muon_pt___nominal\")\n",
    "MonteCarlo[\"leading_muon_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_muon_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_muon_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_muon_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_muon_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_muon_eta___nominal\")\n",
    "RealData[\"leading_muon_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_muon_eta___nominal\")\n",
    "MonteCarlo[\"leading_muon_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_muon_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_muon_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_muon_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_muon_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_muon_phi___nominal\")\n",
    "RealData[\"leading_muon_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_muon_phi___nominal\")\n",
    "MonteCarlo[\"leading_muon_mass\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_muon_mass\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_muon_mass\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_muon_mass\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_muon_mass___nominal\")\n",
    "MonteCarlo[\"leading_muon_mass\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_muon_mass___nominal\")\n",
    "RealData[\"leading_muon_mass\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_muon_mass___nominal\") \n",
    "MonteCarlo[\"leading_muon_charge\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___leading_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_muon_charge\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___leading_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_muon_charge\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___leading_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_muon_charge\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___leading_muon_charge___nominal\")\n",
    "MonteCarlo[\"leading_muon_charge\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___leading_muon_charge___nominal\")\n",
    "RealData[\"leading_muon_charge\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___leading_muon_charge___nominal\")\n",
    "#MonteCarlo[\"delta_eta\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_eta___nominal\")\n",
    "#MonteCarlo[\"delta_eta\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_eta___nominal\")\n",
    "#MonteCarlo[\"delta_eta\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_eta___nominal\")\n",
    "#MonteCarlo[\"delta_eta\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_eta___nominal\")\n",
    "#MonteCarlo[\"delta_eta\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_eta___nominal\")\n",
    "#RealData[\"delta_eta\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_eta___nominal\")\n",
    "#MonteCarlo[\"delta_phi\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_phi___nominal\")\n",
    "#MonteCarlo[\"delta_phi\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_phi___nominal\")\n",
    "#MonteCarlo[\"delta_phi\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_phi___nominal\")\n",
    "#MonteCarlo[\"delta_phi\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_phi___nominal\")\n",
    "#MonteCarlo[\"delta_phi\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_phi___nominal\")\n",
    "#RealData[\"delta_phi\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_phi___nominal\")\n",
    "#MonteCarlo[\"delta_r\"][\"TTToSemiLeptonic\"] = f.Get(\"2018___Mu___MonteCarloTTToSemiLeptonic___delta_r___nominal\")\n",
    "#MonteCarlo[\"delta_r\"][\"TTTo2L2Nu\"] = f.Get(\"2018___Mu___MonteCarloTTTo2L2Nu___delta_r___nominal\")\n",
    "#MonteCarlo[\"delta_r\"][\"WJetsToLNu\"] = f.Get(\"2018___Mu___MonteCarloWJetsToLNu___delta_r___nominal\")\n",
    "#MonteCarlo[\"delta_r\"][\"ST_tW_top\"] = f.Get(\"2018___Mu___MonteCarloST_tW_top___delta_r___nominal\")\n",
    "#MonteCarlo[\"delta_r\"][\"ST_tchannel_top\"] = f.Get(\"2018___Mu___MonteCarloST_tchannel_top___delta_r___nominal\")\n",
    "#RealData[\"delta_r\"][\"SingleMuon2018\"] = f.Get(\"2018___Mu___Data___delta_r___nominal\")\n",
    "\n",
    "S = dict()\n",
    "S[\"leading_muon_pt\"] = ROOT.THStack(\"s_leading_muon_pt\", \"Leading Muon Transverse Momentum; Pt (GeV);Events\")\n",
    "S[\"leading_muon_eta\"] = ROOT.THStack(\"s_leading_muon_eta\", \"Leading Muon Pseudorapidity; Eta; Events\")\n",
    "S[\"leading_muon_phi\"] = ROOT.THStack(\"s_leading_muon_phi\", \"Leading Muon Angle; Phi (Radians); Events\")\n",
    "S[\"leading_muon_mass\"] = ROOT.THStack(\"s_leading_muon_mass\", \"Leading Muon Mass; Mass(Gev); Events\")\n",
    "S[\"leading_muon_charge\"] = ROOT.THStack(\"s_leading_muon_charge\", \"Leading Muon Charge; Charge; Events\")\n",
    "#S[\"delta_eta\"] = ROOT.THStack(\"s_delta_eta\", \"Delta Eta; Delta Eta; Events\")\n",
    "#S[\"delta_phi\"] = ROOT.THStack(\"s_delta_phi\", \"Delta Phi; Delta Phi; Events\")\n",
    "#S[\"delta_r\"] = ROOT.THStack(\"s_delta_r\", \"Delta R; Delta R; Events\")\n",
    "\n",
    "for item in MonteCarlo:\n",
    "    \n",
    "    for sample, color in {\"TTToSemiLeptonic\" : ROOT.kRed, \"TTTo2L2Nu\" : ROOT.kGreen, \"WJetsToLNu\" : ROOT.kBlue, \"ST_tW_top\" : ROOT.kMagenta, \"ST_tchannel_top\" : ROOT.kOrange}.items():\n",
    "        MonteCarlo[item][sample].SetFillColor(color)\n",
    "        MonteCarlo[item][sample].SetLineColor(color)\n",
    "        S[item].Add(MonteCarlo[item][sample])\n",
    "\n",
    "canvasas = dict()\n",
    "\n",
    "canvas0 = ROOT.TCanvas(\"c_leading_muon_pt\", \"\", 800, 800)\n",
    "RealData[\"leading_muon_pt\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_muon_pt\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_muon_pt\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas0.Draw()\n",
    "canvasas['0'] = canvas0\n",
    "\n",
    "canvas1 = ROOT.TCanvas(\"c_leading_muon_eta\", \"\", 800, 800)\n",
    "RealData[\"leading_muon_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_muon_eta\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_muon_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas1.Draw()\n",
    "canvasas['1'] = canvas1\n",
    "\n",
    "canvas2 = ROOT.TCanvas(\"c_leading_muon_phi\", \"\", 800, 800)\n",
    "RealData[\"leading_muon_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_muon_phi\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_muon_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas2.Draw()\n",
    "canvasas['2'] = canvas2\n",
    "\n",
    "canvas3 = ROOT.TCanvas(\"c_leading_muon_mass\", \"\", 800, 800)\n",
    "RealData[\"leading_muon_mass\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_muon_mass\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_muon_mass\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas3.Draw()\n",
    "canvasas['3'] = canvas3\n",
    "\n",
    "canvas4 = ROOT.TCanvas(\"c_leading_muon_charge\", \"\", 800, 800)\n",
    "RealData[\"leading_muon_charge\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "S[\"leading_muon_charge\"].Draw(\"HIST S SAME\")\n",
    "RealData[\"leading_muon_charge\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "canvas4.Draw()\n",
    "canvasas['4'] = canvas4\n",
    "\n",
    "#canvas5 = ROOT.TCanvas(\"c_delta_eta\", \"\", 800, 800)\n",
    "#RealData[\"delta_eta\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "#S[\"delta_eta\"].Draw(\"HIST S SAME\")\n",
    "#RealData[\"delta_eta\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "#canvas5.Draw()\n",
    "#canvasas['5'] = canvas5\n",
    "\n",
    "#canvas6 = ROOT.TCanvas(\"c_delta_phi\", \"\", 800, 800)\n",
    "#RealData[\"delta_phi\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "#S[\"delta_phi\"].Draw(\"HIST S SAME\")\n",
    "#RealData[\"delta_phi\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "#canvas6.Draw()\n",
    "#canvasas['6'] = canvas6\n",
    "\n",
    "#canvas7 = ROOT.TCanvas(\"c_delta_r\", \"\", 800, 800)\n",
    "#RealData[\"delta_r\"][\"SingleMuon2018\"].Draw(\"PE1\")\n",
    "#S[\"delta_r\"].Draw(\"HIST S SAME\")\n",
    "#RealData[\"delta_r\"][\"SingleMuon2018\"].Draw(\"PE1 SAME\")\n",
    "#canvas7.Draw()\n",
    "#canvasas['7'] = canvas7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Opening PDF\n",
      "Closing PDF\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Info in <TCanvas::Print>: pdf file May14_2022.pdf has been created using the current canvas\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file May14_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file May14_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file May14_2022.pdf\n",
      "Info in <TCanvas::Print>: Current canvas added to pdf file May14_2022.pdf and file closed\n"
     ]
    }
   ],
   "source": [
    "for kn, k in enumerate(canvasas.keys()):\n",
    "    \n",
    "    if kn == 0:\n",
    "        print(\"Opening PDF\")\n",
    "        canvasas[k].SaveAs('May14_2022.pdf(')\n",
    "    \n",
    "    elif kn == len(canvasas) - 1:\n",
    "        print(\"Closing PDF\")\n",
    "        canvasas[k].SaveAs('May14_2022.pdf)')\n",
    "    \n",
    "    else:\n",
    "        canvasas[k].SaveAs('May14_2022.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "era = \"2017\"\n",
    "channel = \"Mu\"\n",
    "\n",
    "def DrawStack(MonteCarlo, Data, separator = \"___\"):\n",
    "    era, channel, sample, variable, systematic = list(MonteCarlo.values())[0].GetName().split(separator)\n",
    "    name = \"_\".join([\"stack\", era, channel, variable, systematic])\n",
    "    colors = {\"TTToSemiLeptonic\" : ROOT.kRed}\n",
    "    stack = ROOT.THStack(name, \"\")\n",
    "    \n",
    "    canvas = ROOT.TCanvas(name.replace(\"stack\", \"canvas\"), \"\", 800, 800)\n",
    "  \n",
    "    \n",
    "    for sample, hist in MonteCarlo.items():\n",
    "        hist.SetFillColor(colors.get(sample, ROOT.kMagenta))\n",
    "        hist.SetLineColor(colors.get(sample, ROOT.kMagenta))\n",
    "        stack.Add(hist)\n",
    "        \n",
    "    aggregate = None\n",
    "    \n",
    "    for sample, hist in Data.items():\n",
    "        if aggregate == None:\n",
    "            aggregate = hist.Clone(hist.GetName().replace(\"sample\", \"allData\"))\n",
    "            \n",
    "        else:\n",
    "            aggregate += hist\n",
    "    \n",
    "    maxima = []\n",
    "    minima = []\n",
    "    maxima.append(stack.GetMaximum())\n",
    "    maxima.append(aggregate.GetMaximum())\n",
    "    minima.append(stack.GetMinimum())\n",
    "    minima.append(aggregate.GetMinimum())\n",
    "    \n",
    "    stack.SetMinimum(min(minima))\n",
    "    stack.SetMaximum(max(maxima))\n",
    "    \n",
    "    stack.Draw(\"HIST S\")\n",
    "    aggregate.Draw(\"PE1 SAME\")\n",
    "    \n",
    "    canvas.BuildLegend()\n",
    "    \n",
    "    return stack, aggregate, canvas\n",
    "\n",
    "for kn, variable in enumerate(variables):\n",
    "        \n",
    "    MonteCarlo, RealData = GetHistos(f, era, channel, variable)\n",
    "    \n",
    "    stack, aggregate, canvas = DrawStack(MonteCarlo, RealData)\n",
    "       \n",
    "    if kn == 0:\n",
    "        print(\"Opening PDF\")\n",
    "        canvas.SaveAs('December2.pdf(')\n",
    "\n",
    "    elif kn == len(variables) - 1:\n",
    "        print(\"Closing PDF\")\n",
    "        canvas.SaveAs('December2.pdf)')\n",
    "\n",
    "    else:\n",
    "        canvas.SaveAs('December2.pdf')\n",
    "        \n",
    "    canvas.SaveAs(variable + 'December2.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on _Helper in module _sitebuiltins object:\n",
      "\n",
      "class _Helper(builtins.object)\n",
      " |  Define the builtin 'help'.\n",
      " |  \n",
      " |  This is a wrapper around pydoc.help that provides a helpful message\n",
      " |  when 'help' is typed at the Python interactive prompt.\n",
      " |  \n",
      " |  Calling help() at the Python prompt starts an interactive help session.\n",
      " |  Calling help(thing) prints help for the python object 'thing'.\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  __call__(self, *args, **kwds)\n",
      " |      Call self as a function.\n",
      " |  \n",
      " |  __repr__(self)\n",
      " |      Return repr(self).\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors defined here:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(help)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
