{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "hawaiian-importance",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.24/00\n"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "import glob\n",
    "import numpy as np\n",
    "ROOT.gROOT.ProcessLine(\".L FTFunctions.cpp\")\n",
    "ROOT.gInterpreter.Declare(\"\"\"\n",
    "    const UInt_t barWidth = 60;\n",
    "    ULong64_t processed = 0, totalEvents = 0;\n",
    "    std::string progressBar;\n",
    "    std::mutex barMutex; \n",
    "    auto registerEvents = [](ULong64_t nIncrement) {totalEvents += nIncrement;};\n",
    "    ROOT::RDF::RResultPtr<ULong64_t> AddProgressBar(ROOT::RDF::RNode df, int everyN=10000, int totalN=100000) {\n",
    "        registerEvents(totalN);\n",
    "        auto c = df.Count();\n",
    "        c.OnPartialResultSlot(everyN, [everyN] (unsigned int slot, ULong64_t &cnt){\n",
    "            std::lock_guard<std::mutex> l(barMutex);\n",
    "            processed += everyN; //everyN captured by value for this lambda\n",
    "            progressBar = \"[\";\n",
    "            for(UInt_t i = 0; i < static_cast<UInt_t>(static_cast<Float_t>(processed)/totalEvents*barWidth); ++i){\n",
    "                progressBar.push_back('|');\n",
    "            }\n",
    "            // escape the '\\' when defined in python string\n",
    "            std::cout << \"\\\\r\" << std::left << std::setw(barWidth) << progressBar << \"] \" << processed << \"/\" << totalEvents << std::flush;\n",
    "        });\n",
    "        return c;\n",
    "    }\n",
    "\"\"\")\n",
    "# Enables multithreading\n",
    "useRange = False\n",
    "if not useRange:\n",
    "    nThreads = 8\n",
    "    ROOT.ROOT.EnableImplicitMT(nThreads)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "nominated-resource",
   "metadata": {},
   "outputs": [],
   "source": [
    "listOfFilesData = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/SingleMuon/*/*.root\")\n",
    "listOfFilesMonteCarloTTToSemiLeptonic = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/*/*.root\")\n",
    "listOfFilesMonteCarloTTTo2L2Nu = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/*/*.root\")\n",
    "listOfFilesMonteCarloWJetsToLNu = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/WJetsToLNu_TuneCP5_13TeV-madgraphMLM-pythia8/*/*.root\")\n",
    "\n",
    "listOfFilesMonteCarloTTToSemiLeptonic = listOfFilesMonteCarloTTToSemiLeptonic[0:1]\n",
    "listOfFilesMonteCarloTTTo2L2Nu = listOfFilesMonteCarloTTTo2L2Nu[0:1]\n",
    "listOfFilesMonteCarloWJetsToLNu = listOfFilesMonteCarloWJetsToLNu[0:1]\n",
    "\n",
    "dictOfListOfFiles = {\"Data\" : listOfFilesData, \"MonteCarloTTToSemiLeptonic\" : listOfFilesMonteCarloTTToSemiLeptonic, \"MonteCarloTTTo2L2Nu\" : listOfFilesMonteCarloTTTo2L2Nu, \"MonteCarloWJetsToLNu\" : listOfFilesMonteCarloWJetsToLNu} "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "international-panic",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RCutFlowReport> object at 0xbaa32e0>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TClass::Init>: no dictionary for class edm::Hash<1> is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ProcessHistory is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ProcessConfiguration is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ParameterSetBlob is available\n",
      "Warning in <TClass::Init>: no dictionary for class __pair_base<edm::Hash<1>,edm::ParameterSetBlob> is available\n",
      "Warning in <TClass::Init>: no dictionary for class pair<edm::Hash<1>,edm::ParameterSetBlob> is available\n"
     ]
    }
   ],
   "source": [
    "chain = {}\n",
    "meta = {}\n",
    "rdf = {}\n",
    "mrdf = {}\n",
    "nevents = {}\n",
    "sumweight = {}\n",
    "neventsVal = {}\n",
    "rdfTriggersAndMasks = {}\n",
    "rdfOnePlusMuons = {}\n",
    "rdfJetVariables = {}\n",
    "rdfTwoPlusJets = {}\n",
    "rdfNoMuTrigger = {}\n",
    "rdfmuOneBTaggedJet = {}\n",
    "rdfmu = {}\n",
    "rdfOtherMuons = {}\n",
    "hist = {}\n",
    "report = {}\n",
    "stats = {}\n",
    "\n",
    "npArrays = {}\n",
    "\n",
    "for sample, fileList in dictOfListOfFiles.items():\n",
    "    \n",
    "    if sample == 'Data':\n",
    "        vecList = ROOT.std.vector(str)()\n",
    "\n",
    "        for element in dictOfListOfFiles['Data']:\n",
    "            vecList.push_back(element)\n",
    "\n",
    "        rdf['Data'] = ROOT.ROOT.RDataFrame(\"Events\", vecList)    \n",
    "        #mureport['Data'] = rdf['Data'].Report()\n",
    "        print(rdf['Data'].Report())\n",
    "        mrdf['Data'] = ROOT.ROOT.RDataFrame(\"Runs\", vecList)\n",
    "        \n",
    "        if useRange:\n",
    "            rdf['Data'] = rdf['Data'].Range(5000)\n",
    "            nrange = 5000\n",
    "            printcode = ' if(rdfentry_ % 5000 == 0) { std::cout << \"Processed entry \" << rdfentry_ << \"/' + str(nrange) + '\" << std::endl; } return rdfentry_;'\n",
    "            print(\"Data run\")\n",
    "            rdf['Data'] = rdf['Data'].Define(\"my_rdfentry\", printcode)\n",
    "            \n",
    "        #s = rdf['Data'].Min('my_rdfentry')\n",
    "                         \n",
    "        #c = rdf['Data'].Count()\n",
    "            \n",
    "\n",
    "        \n",
    "    else:\n",
    "        chain[sample] = ROOT.TChain(\"Events\")\n",
    "        meta[sample] = ROOT.TChain(\"Runs\")\n",
    "\n",
    "        for file in fileList:\n",
    "            #print(file, end=\" \")\n",
    "            \n",
    "            chain[sample].Add(file)\n",
    "            meta[sample].Add(file)\n",
    "\n",
    "        rdf[sample] = ROOT.ROOT.RDataFrame(chain[sample])\n",
    "        mrdf[sample] = ROOT.ROOT.RDataFrame(meta[sample])\n",
    "        \n",
    "        if useRange:\n",
    "            rdf[sample] = rdf[sample].Range(5000)\n",
    "            \n",
    "            printcode = ' if(rdfentry_ % 5000 == 0) { std::cout << \"Processed entry \" << rdfentry_ << \" \" << rdfslot_ << std::endl; } return rdfentry_;'\n",
    "            print(\"MC run\")\n",
    "            rdf[sample] = rdf[sample].Define(\"my_rdfentry\", printcode)\n",
    "        \n",
    "        nevents[sample] = mrdf[sample].Sum(\"genEventCount\")\n",
    "        sumweight[sample] = mrdf[sample].Sum(\"genEventSumw\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "paperback-video",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Semileptonic ttbar xsection: 364.3109\n",
    "#Single mu trigger for 2017 (B,C,D,E,F): \"HLT_IsoMu27\"\n",
    "#\"HLT_Ele35_WPTight_Gsf\"\n",
    "#lumiDict = {\"2017\": 41.53, \"2018\": 59.97}\n",
    "wgtFormula = {}\n",
    "\n",
    "# wgtFormula used to weight each event\n",
    "# XS = Literature Cross section of the process of interest (in picobarnes; the 1000 converts to femotobarnes), lumi = presumed luminosity of the data one is normalizing against; XS * lumi = # of expected events;\n",
    "# genWeight = quantity stored in every event which comes from the Monte Carlo generator telling you what the value of the generated event is (usually close to 1); it can be + or -; it also contains matching\n",
    "#     effeciency; tells you the Monte Carlo defined value of the event\n",
    "# sW = sum of weights; normalizes the genWeight\n",
    "lumiDict = {\"2018\": 59.97} #  brilcalc lumi --normtag /cvmfs/cms-bril.cern.ch/cms-lumi-pog/Normtags/normtag_PHYSICS.json -u /fb --begin 302031 --end 302663 --hltpath \"HLT_IsoMu27*\"\n",
    "wgtFormula['Data'] = \"1\"\n",
    "wgtFormula['MonteCarloTTToSemiLeptonic'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=364.31, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloTTToSemiLeptonic'].GetValue()))\n",
    "wgtFormula['MonteCarloTTTo2L2Nu'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=87.33, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloTTTo2L2Nu'].GetValue()))\n",
    "wgtFormula['MonteCarloWJetsToLNu'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=61526.7, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloWJetsToLNu'].GetValue()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "better-deputy",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cpp_code = \"\"\"\n",
    "typedef ROOT::VecOps::RVec<Float_t>                        RVec_f;\n",
    "typedef ROOT::VecOps::RVec<Int_t>                          RVec_i;\n",
    "typedef ROOT::VecOps::RVec<Long_t>                         RVec_l;\n",
    "\n",
    "class MatchOppositelyChargedMuons\n",
    "{\n",
    "    private:\n",
    "        RVec_f Muon_pt;\n",
    "        RVec_f Muon_eta;\n",
    "        RVec_f Muon_phi;\n",
    "        RVec_f Muon_mass;\n",
    "        RVec_i Muon_charge;\n",
    "        long EventNumber;\n",
    "        int FlagPair;\n",
    "\n",
    "\n",
    "    public:\n",
    "        MatchOppositelyChargedMuons(RVec_f Muon_pt, RVec_f Muon_eta, RVec_f Muon_phi, RVec_f Muon_mass, RVec_i Muon_charge, long EventNumber, int FlagPair);\n",
    "        RVec_f InvariantMassCalculator();\n",
    "        int ReturnFlagPair();\n",
    "};\n",
    "\n",
    "MatchOppositelyChargedMuons::MatchOppositelyChargedMuons(RVec_f Muon_pt, RVec_f Muon_eta, RVec_f Muon_phi, RVec_f Muon_mass, RVec_i Muon_charge, long EventNumber, int FlagPair)\n",
    "{\n",
    "    this->Muon_pt = Muon_pt;\n",
    "    this->Muon_eta = Muon_eta;\n",
    "    this->Muon_phi = Muon_phi;\n",
    "    this->Muon_mass = Muon_mass;\n",
    "    this->Muon_charge = Muon_charge;\n",
    "    this->EventNumber = EventNumber;\n",
    "    this->FlagPair = FlagPair;\n",
    "}\n",
    "\n",
    "\n",
    "/* This function matches each muon with oppositely charged muons. */\n",
    "RVec_f MatchOppositelyChargedMuons::InvariantMassCalculator()\n",
    "{ \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f InvariantMasses {};\n",
    "    \n",
    "    float im = 0;\n",
    " \n",
    "    /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "    for(int i = 0; i < this->Muon_charge.size(); i++)\n",
    "    {    \n",
    "\n",
    "        FirstMuonCharge = this->Muon_charge[i];\n",
    "        \n",
    "        /* If charges are opposite, calculate the invariant mass of them */\n",
    "        for(int j = i+1; j < this->Muon_charge.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {\n",
    "                pt.push_back(Muon_pt[i]);\n",
    "                eta.push_back(Muon_eta[i]);\n",
    "                phi.push_back(Muon_phi[i]);\n",
    "                mass.push_back(Muon_mass[i]);\n",
    "                    \n",
    "                pt.push_back(Muon_pt[j]);\n",
    "                eta.push_back(Muon_eta[j]);\n",
    "                phi.push_back(Muon_phi[j]);\n",
    "                mass.push_back(Muon_mass[j]);\n",
    "                    \n",
    "                im = ROOT::VecOps::InvariantMass(pt, eta, phi, mass);\n",
    "                \n",
    "                InvariantMasses.push_back(im);\n",
    "                \n",
    "                this->FlagPair = 1;\n",
    "                    \n",
    "                pt.clear();\n",
    "                eta.clear();\n",
    "                phi.clear();\n",
    "                mass.clear();\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return InvariantMasses;\n",
    "}\n",
    "\n",
    "int MatchOppositelyChargedMuons::ReturnFlagPair()\n",
    "{\n",
    "    return this->FlagPair;\n",
    "}\n",
    "\"\"\"\n",
    "\n",
    "ROOT.gInterpreter.Declare(cpp_code)\n",
    "\n",
    "#rvf = ROOT.VecOps.RVec(float)([2.71,3.14])\n",
    "#rvi = ROOT.VecOps.RVec(int)([1,-1])\n",
    "\n",
    "#x = ROOT.MatchOppositelyChargedMuons(rvf, rvf, rvf, rvf, rvi, 123456789)\n",
    "#print(x.InvariantMassCalculator())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fixed-manor",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-6-1be45ddf3086>, line 11)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-6-1be45ddf3086>\"\u001b[0;36m, line \u001b[0;32m11\u001b[0m\n\u001b[0;31m    rdfOnePlusMuons[sample] = rdfTriggersAndMasks[sample].Filter(\"Sum(mu_mask) == 1\", \"Exactly One Good Muon\")\\\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# Object selection (masks) and cuts (filters)\n",
    "# LumiXS is lumi * xs\n",
    "#.Define(\"Junk\", 'if(rdfentry_ % 200000 == 0){ std::cout << \"Processed \" << rdfentry_ << \" entries on slot \" << rdfslot_ << std::endl;} return rdfentry_;')\n",
    "\n",
    "# Initial cuts for finding muons, isolated or not.\n",
    "for sample in dictOfListOfFiles:\n",
    "    rdfTriggersAndMasks[sample] = rdf[sample].Filter(\"HLT_IsoMu27 == true\", \"HLTTriggerSingleMuonTrigger\").Define(\"LumiXS\",wgtFormula[sample])\\\n",
    "        .Define(\"mu_mask\", \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_tightId == true && Muon_pfIsoId >= 4\")\\\n",
    "        .Define(\"mu_veto\", \"Muon_pt > 10 && abs(Muon_eta) < 2.4 && Muon_looseId == true && Muon_pfIsoId >= 4 && mu_mask == false\")\\\n",
    "        .Define(\"jpsi_mu_candidate_mask\", \"Muon_pt > 3 && Muon_mediumId == true && mu_mask == false\")\n",
    "    rdfOnePlusMuons[sample] = rdfTriggersAndMasks[sample].Filter(\"Sum(mu_mask) == 1\", \"Exactly One Good Muon\")\\\n",
    "        .Define(\"SMuon_pt\", \"Muon_pt[mu_mask]\")\\\n",
    "        .Define(\"SMuon_eta\", \"Muon_eta[mu_mask]\")\\\n",
    "        .Define(\"SMuon_phi\", \"Muon_phi[mu_mask]\")\\\n",
    "        .Define(\"SMuon_mass\", \"Muon_mass[mu_mask]\")\\\n",
    "        .Define(\"SMuon_pfRelIso03_all\", \"Muon_pfRelIso03_all[mu_mask]\")\\\n",
    "        .Define(\"SMuon_pfRelIso03_chg\", \"Muon_pfRelIso03_chg[mu_mask]\")\\\n",
    "        .Define(\"SMuon_pfRelIso04_all\", \"Muon_pfRelIso04_all[mu_mask]\")\n",
    "    rdfJetVariables[sample] = rdfOnePlusMuons[sample]\\\n",
    "        .Define(\"jet_mask\", \"ROOT::VecOps::RVec<Int_t> jmask = (Jet_pt >= 30 && abs(Jet_eta) <= 2.5 && Jet_jetId >= 2); \"\\\n",
    "                          \"for(int i=0; i < SMuon_pt.size(); ++i){\"\\\n",
    "                              \"ROOT::VecOps::RVec<Float_t> dr;\"\\\n",
    "                              \"for(int j=0; j < jmask.size(); ++j){\"\\\n",
    "                                  \"dr.push_back(ROOT::VecOps::DeltaR(Jet_eta.at(j), SMuon_eta.at(i), Jet_phi.at(j), SMuon_phi.at(i)));}\"\\\n",
    "                                  \"jmask = jmask && dr >= 0.4;\"\\\n",
    "                                  \"dr.clear();}\"\\\n",
    "                          \"return jmask;\")\\\n",
    "        .Define(\"MediumBJetMask\", \"Jet_btagDeepFlavB > 0.3033 && jet_mask\" )\\\n",
    "        .Define(\"MTofMETandMu\", \"FTA::transverseMassMET(SMuon_pt, SMuon_phi, SMuon_mass, MET_pt, MET_phi)\")\\\n",
    "        .Define(\"Num_Jets\", \"Jet_pt[jet_mask].size()\")\\\n",
    "        .Define(\"SJet1_pt\", \"Jet_pt[jet_mask].size() > 0 ? Jet_pt[jet_mask].at(0) : -500\")\\\n",
    "        .Define(\"SJet2_pt\", \"Jet_pt[jet_mask].size() > 1 ? Jet_pt[jet_mask].at(1) : -500\")\\\n",
    "        .Define(\"SJet1_eta\", \"Jet_eta[jet_mask].size() > 0 ? Jet_eta[jet_mask].at(0) : 500\")\\\n",
    "        .Define(\"SJet2_eta\", \"Jet_eta[jet_mask].size() > 1 ? Jet_eta[jet_mask].at(1) : 500\")\\\n",
    "        .Define(\"SJet1_phi\", \"Jet_phi[jet_mask].size() > 0 ? Jet_phi[jet_mask].at(0) : 500\")\\\n",
    "        .Define(\"SJet2_phi\", \"Jet_phi[jet_mask].size() > 1 ? Jet_phi[jet_mask].at(1) : 500\")\\\n",
    "        .Define(\"SJet_btagDeepFlavB\", \"Jet_btagDeepFlavB[jet_mask]\")\\\n",
    "        .Define(\"Num_BTaggedJets\", \"Sum(MediumBJetMask)\")\\\n",
    "        .Define(\"Ht\", \"Sum(Jet_pt[jet_mask])\")\n",
    "    rdfTwoPlusJets[sample] = rdfJetVariables[sample].Filter(\"Num_Jets >= 4\", \"At Least Four Jets\")\\\n",
    "        .Define(\"DeepJetB\", \"Jet_pt[jet_mask].size() > 0 ? Jet_btagDeepFlavB[jet_mask].at(0) : 0\")\\\n",
    "        .Define(\"Num_Muons\", \"Muon_pt[mu_mask].size()\")\n",
    "    rdfmuOneBTaggedJet[sample] = rdfTwoPlusJets[sample].Filter(\"Num_BTaggedJets >= 1\", \"At Least One B-Tagged Jet\")\n",
    "    rdfmu[sample] = rdfmuOneBTaggedJet[sample].Filter(\"Sum(mu_veto) == 0\", \"No Vetoed Muons\")\n",
    "    \n",
    "    rdfOtherMuons[sample] = rdfmu[sample].Filter(\"Sum(jpsi_mu_candidate_mask) >= 1 || Sum(mu_mask) >= 1\", \"JPsi Candidate\")\\\n",
    "        .Define(\"InvariantMasses\", \"std::cout << rdfentry_ << std::endl; int FlagPair = -1; auto c = MatchOppositelyChargedMuons(Muon_pt, Muon_eta, Muon_phi, Muon_mass, Muon_charge, event, FlagPair); return c.InvariantMassCalculator()\")\\\n",
    "        .Define(\"InvariantMasses_0\", \"InvariantMasses.at(0, -1.0)\")\\\n",
    "        .Define(\"InvariantMasses_1\", \"InvariantMasses.at(1, -1.0)\")#if (FlagPair == 1) {print(\"winning\");}; if (FlagPair == 1) {return c.InvariantMassCalculator();}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "sixth-northern",
   "metadata": {},
   "outputs": [],
   "source": [
    "for sample in dictOfListOfFiles:\n",
    "    \n",
    "    if sample not in hist.keys():\n",
    "        hist[sample] = {}\n",
    "        stats[sample] = {}\n",
    "        report[sample] = rdf[sample].Report()\n",
    "        \n",
    "    #stats[sample][\"countercode\"] = rdf[sample].Min('my_rdfentry')\n",
    "        \n",
    "    if sample == 'Data':\n",
    "        \n",
    "        hist['Data'][\"mu_pt\"] = rdfmu['Data'].Histo1D((\"mu_pt\",\"Muon Transverse Momentum; Pt (GeV);Events\",100,20,220),\"SMuon_pt\")\n",
    "        hist['Data'][\"mu_eta\"] = rdfmu['Data'].Histo1D((\"mu_eta\", \"Muon Pseudorapidity; Eta; Events\",100,-3,3),\"SMuon_eta\")\n",
    "        hist['Data'][\"mu_phi\"] = rdfmu['Data'].Histo1D((\"mu_phi\", \"Muon Angle; Phi (Radians); Events\",100,-3.5,3.5),\"SMuon_phi\")\n",
    "        hist['Data'][\"jet1_pt\"] = rdfmu['Data'].Histo1D((\"jet1_pt\", \"Jet Transverse Momentum for Leading Jet; Pt (GeV); Events\", 100, 20, 200), \"SJet1_pt\")\n",
    "        hist['Data'][\"jet2_pt\"] = rdfmu['Data'].Histo1D((\"jet2_pt\", \"Jet Transverse Momentum for Subleading Jet; Pt (GeV); Events\", 100, 20, 200), \"SJet2_pt\")\n",
    "        hist['Data'][\"jet1_eta\"] = rdfmu['Data'].Histo1D((\"jet1_eta\", \"Jet Pseudorapidity for Leading Jet; Eta; Events\", 100, -3, 3), \"SJet1_eta\")\n",
    "        hist['Data'][\"jet2_eta\"] = rdfmu['Data'].Histo1D((\"jet2_eta\", \"Jet Pseudorapidity for Subleading Jet; Eta; Events\", 100, -3, 3), \"SJet2_eta\")\n",
    "        hist['Data'][\"jet1_phi\"] = rdfmu['Data'].Histo1D((\"jet1_phi\", \"Jet Angle for Leading Jet; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet1_phi\")\n",
    "        hist['Data'][\"jet2_phi\"] = rdfmu['Data'].Histo1D((\"jet2_phi\", \"Jet Angle for Subleading Jet; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet2_phi\")\n",
    "        hist['Data'][\"jet_deep\"] = rdfmu['Data'].Histo1D((\"jet_deep\", \"Deep Jet B Discriminator; Discriminant Value; Events\", 100, 0, 1), \"DeepJetB\")\n",
    "        hist['Data'][\"number_of_jets\"] = rdfmu['Data'].Histo1D((\"number_of_jets\", \"Number of Jets; Number Of Jets; Events\", 20, 0, 20), \"Num_Jets\") \n",
    "        hist['Data'][\"number_of_muons\"] = rdfmu['Data'].Histo1D((\"number_of_muons\", \"Number of Muons; Number of Muons; Events\", 5, 0, 5), \"Num_Muons\")\n",
    "        hist['Data'][\"transverse_mass\"] = rdfmu['Data'].Histo1D((\"transverse_mass\", \"Transverse Mass; Transverse Mass (GeV); Events\", 150, 0, 150), \"MTofMETandMu\")\n",
    "        hist['Data'][\"missing_transverse_momentum\"] = rdfmu['Data'].Histo1D((\"missing_transverse_momentum\", \"Missing Transverse Momentum; Missing Transverse Momentum(GeV); Events\", 150, 0, 300), \"MET_pt\")\n",
    "        hist['Data'][\"ht\"] = rdfmu['Data'].Histo1D((\"ht\", \"Ht; Ht; Events\", 300, 0, 1500), \"Ht\")\n",
    "        hist['Data'][\"muon_pfRelIso03_all\"] = rdfmu['Data'].Histo1D((\"muon_pfRelIso03_all\", \"Muon Pf Rel Iso 03 (All); Muon Pf Rel Iso 03 (All); Events\", 60, 0, .3), \"SMuon_pfRelIso03_all\")\n",
    "        hist['Data'][\"muon_pfRelIso03_chg\"] = rdfmu['Data'].Histo1D((\"muon_pfRelIso03_chg\", \"Muon Pf Rel Iso 03 (Chg); Muon Pf Rel Iso 03 (Chg); Events\", 60, 0, .3), \"SMuon_pfRelIso03_chg\")\n",
    "        hist['Data'][\"muon_pfRelIso04_all\"] = rdfmu['Data'].Histo1D((\"muon_pfRelIso04_all\", \"Muon Pf Rel Iso 04 (All); Muon Pf Rel Iso 04 (All); Events\", 60, 0, .3), \"SMuon_pfRelIso04_all\")\n",
    "        hist['Data'][\"invariant_masses\"] = rdfOtherMuons['Data'].Histo1D((\"invariant_masses\", \"Invariant Masses; Invariant Masses; Events\", 50, .5, 12), \"InvariantMasses\")        \n",
    "        hist['Data'][\"invariant_masses_zoomed\"] = rdfOtherMuons['Data'].Histo1D((\"invariant_masses_zoomed\", \"Invariant Masses; Invariant Masses; Events\", 50, 2.8, 3.4), \"InvariantMasses\")\n",
    "\n",
    "    else:\n",
    "        \n",
    "        hist[sample][\"mu_pt\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"mu_pt\",\"Monte Carlo \" + sample + \";Pt (GeV);Events\",100,20,220),\"SMuon_pt\",\"LumiXS\")\n",
    "        hist[sample][\"mu_eta\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"mu_eta\", \"Monte Carlo \" + sample + \"; Eta; Events\",100,-3,3),\"SMuon_eta\",\"LumiXS\")\n",
    "        hist[sample][\"mu_phi\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"mu_phi\", \"Monte Carlo \" + sample + \"; Phi (Radians); Events\",100,-3.5,3.5),\"SMuon_phi\",\"LumiXS\")\n",
    "        hist[sample][\"jet1_pt\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet1_pt\", \"Monte Carlo \" + sample + \"; Pt (GeV); Events\", 100, 20, 200), \"SJet1_pt\", \"LumiXS\")\n",
    "        hist[sample][\"jet2_pt\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet2_pt\", \"Monte Carlo \" + sample + \"; Pt (GeV); Events\", 100, 20, 200), \"SJet2_pt\", \"LumiXS\")\n",
    "        hist[sample][\"jet1_eta\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet1_eta\", \"Monte Carlo \" + sample + \"; Eta; Events\", 100, -3, 3), \"SJet1_eta\", \"LumiXS\")\n",
    "        hist[sample][\"jet2_eta\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet2_eta\", \"Monte Carlo \" + sample +\"; Eta; Events\", 100, -3, 3), \"SJet2_eta\", \"LumiXS\")\n",
    "        hist[sample][\"jet1_phi\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet1_phi\", \"Monte Carlo \" + sample + \"; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet1_phi\", \"LumiXS\")\n",
    "        hist[sample][\"jet2_phi\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet2_phi\", \"Monte Carlo \" + sample +\"; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet2_phi\", \"LumiXS\")\n",
    "        hist[sample][\"jet_deep\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"jet_deep\", \"Monte Carlo \" + sample +\"; Discriminant Value; Events\", 100, 0, 1), \"DeepJetB\", \"LumiXS\")\n",
    "        hist[sample][\"number_of_jets\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"number_of_jets\", \"Monte Carlo \" + sample +\"; Number Of Jets; Events\", 20, 0, 20), \"Num_Jets\", \"LumiXS\") \n",
    "        hist[sample][\"number_of_muons\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"number_of_muons\", \"Monte Carlo \" + sample +\"; Number of Muons; Events\", 5, 0, 5), \"Num_Muons\", \"LumiXS\")\n",
    "        hist[sample][\"transverse_mass\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"transverse_mass\", \"Monte Carlo \" + sample +\"; Transverse Mass (GeV); Events\", 150, 0, 150), \"MTofMETandMu\", \"LumiXS\")\n",
    "        hist[sample][\"missing_transverse_momentum\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"missing_transverse_momentum\", \"Monte Carlo\" + sample + \"; Missing Transverse Momentum(GeV); Events\", 150, 0, 300), \"MET_pt\", \"LumiXS\")\n",
    "        hist[sample][\"ht\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"ht\", \"Monte Carlo \" + sample + \"; Ht; Events\", 300, 0, 1500), \"Ht\", \"LumiXS\")\n",
    "        hist[sample][\"muon_pfRelIso03_all\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"muon_pfRelIso03_all\", \"Monte Carlo \" + sample + \"; Muon Pf Rel Iso 03 (All); Events\", 60, 0, .3), \"SMuon_pfRelIso03_all\", \"LumiXS\")\n",
    "        hist[sample][\"muon_pfRelIso03_chg\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"muon_pfRelIso03_chg\", \"Monte Carlo \" + sample + \"; Muon Pf Rel Iso 03 (Chg); Events\", 60, 0, .3), \"SMuon_pfRelIso03_chg\", \"LumiXS\")\n",
    "        hist[sample][\"muon_pfRelIso04_all\"] = rdfmu[sample].Histo1D((sample + \"_\" + \"muon_pfRelIso04_all\", \"Monte Carlo \" + sample + \"; Muon Pf Rel Iso 04 (All); Events\", 60, 0, .3), \"SMuon_pfRelIso04_all\", \"LumiXS\")\n",
    "        hist[sample][\"invariant_masses\"] = rdfOtherMuons[sample].Histo1D((sample + \"_\" + \"invariant_masses\", \"Monte Carlo \" + sample + \"; Invariant Masses; Invariant Masses; Events\", 50, .5, 12), \"InvariantMasses\", \"LumiXS\")\n",
    "        hist[sample][\"invariant_masses_zoomed\"] = rdfOtherMuons[sample].Histo1D((sample + \"_\" + \"invariant_masses_zoomed\", \"Monte Carlo \" + sample + \"; Invariant Masses; Invariant Masses; Events\", 50, 2.8, 3.4), \"InvariantMasses\", \"LumiXS\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "prospective-permission",
   "metadata": {},
   "outputs": [],
   "source": [
    "for sample in dictOfListOfFiles:\n",
    "\n",
    "    ROOT.RDF.SaveGraph(rdf[sample], str(sample) + \".dot\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "small-volleyball",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x3c534cf0>\n",
      "Name: 2018___Mu___Data___mu_pt___nominal Title: Muon Transverse Momentum NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x3c4fba10>\n",
      "Name: 2018___Mu___Data___mu_eta___nominal Title: Muon Pseudorapidity NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0xc7875d0>\n",
      "Name: 2018___Mu___Data___mu_phi___nominal Title: Muon Angle NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x3c510440>\n",
      "Name: 2018___Mu___Data___jet1_pt___nominal Title: Jet Transverse Momentum for Leading Jet NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x3c52c930>\n",
      "Name: 2018___Mu___Data___jet2_pt___nominal Title: Jet Transverse Momentum for Subleading Jet NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x3cd21680>\n",
      "Name: 2018___Mu___Data___jet1_eta___nominal Title: Jet Pseudorapidity for Leading Jet NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x3ce3fb50>\n",
      "Name: 2018___Mu___Data___jet2_eta___nominal Title: Jet Pseudorapidity for Subleading Jet NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x3cd62490>\n",
      "Name: 2018___Mu___Data___jet1_phi___nominal Title: Jet Angle for Leading Jet NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x3cd39f50>\n",
      "Name: 2018___Mu___Data___jet2_phi___nominal Title: Jet Angle for Subleading Jet NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x3c538040>\n",
      "Name: 2018___Mu___Data___jet_deep___nominal Title: Deep Jet B Discriminator NbinsX: 100\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x3cd61ab0>\n",
      "Name: 2018___Mu___Data___number_of_jets___nominal Title: Number of Jets NbinsX: 20\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x3ce0d300>\n",
      "Name: 2018___Mu___Data___number_of_muons___nominal Title: Number of Muons NbinsX: 5\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x3cd61e70>\n",
      "Name: 2018___Mu___Data___transverse_mass___nominal Title: Transverse Mass NbinsX: 150\n",
      "<cppyy.gbl.ROOT.RDF.RResultPtr<TH1D> object at 0x3c531130>\n"
     ]
    }
   ],
   "source": [
    "for sample in dictOfListOfFiles:\n",
    "    #npArrays[sample] = rdfOtherMuons[sample].AsNumpy([\"InvariantMasses_0\", \"InvariantMasses_1\"])\n",
    "            \n",
    "    cutflow = report[sample].GetValue()\n",
    "    cutflow.Print()\n",
    "    \n",
    "    era = \"2018\"\n",
    "    process = sample\n",
    "    channel = \"Mu\"\n",
    "    syst = \"nominal\"\n",
    "\n",
    "    outFile = ROOT.TFile.Open(\"{}_{}_{}.root\".format(era, channel, process), \"RECREATE\")\n",
    "    for name, hist_pointer in hist[sample].items():\n",
    "        print(hist_pointer)\n",
    "        hist_value = hist_pointer.GetValue()\n",
    "        \n",
    "        hist_value.SetName(\"{}___{}___{}___{}___{}\".format(era, channel, process, name, syst))\n",
    "        print(hist_value)\n",
    "        hist_value.Write()\n",
    "\n",
    "    outFile.Close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "premier-length",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ndarray([ 61.71116   ,  68.377846  ,  28.225574  ,  84.61656   ,\n",
       "          53.440613  ,  45.59435   ,  -1.        ,  18.694357  ,\n",
       "          -1.        ,  83.22034   ,  27.891409  ,  -1.        ,\n",
       "           8.32877   ,  -1.        ,  79.42087   ,  67.120155  ,\n",
       "          31.592312  ,  49.668148  ,  35.290867  , 237.11758   ,\n",
       "          42.00868   ,  35.02392   ,  37.864044  ,  -1.        ,\n",
       "          61.934605  ,  -1.        ,  39.686996  ,  39.550224  ,\n",
       "          90.4604    ,  40.735035  ,  32.53827   ,  43.626965  ,\n",
       "          22.088787  ,  34.23975   ,  -1.        ,  48.32408   ,\n",
       "          39.202698  ,  37.89157   ,  55.623104  ,  27.868834  ,\n",
       "          92.895     ,  49.50871   ,  75.26088   ,  38.821644  ,\n",
       "         120.04467   ,  -1.        ,  -1.        ,  49.088654  ,\n",
       "          29.089571  ,  75.9292    ,  77.2781    ,  27.073158  ,\n",
       "          75.2391    ,  -1.        ,  29.959698  ,  88.94038   ,\n",
       "          -1.        ,  -1.        ,  25.10337   ,  44.4393    ,\n",
       "          72.89539   ,  15.858577  ,  44.396847  ,  29.501387  ,\n",
       "         152.29031   ,  33.094208  ,  83.43261   ,  -1.        ,\n",
       "          19.186365  ,  -1.        , 107.819725  ,  -1.        ,\n",
       "          -1.        ,  65.44458   ,  92.48543   ,  35.890087  ,\n",
       "          49.255016  ,  -1.        ,  71.76403   ,  -1.        ,\n",
       "          91.74779   ,  71.15866   ,  48.987225  ,  31.88183   ,\n",
       "          40.800438  ,  34.84749   ,  -1.        ,  17.662804  ,\n",
       "          19.960104  ,  91.75792   ,  77.945885  ,  62.059082  ,\n",
       "         120.16386   ,  92.286705  , 126.446144  ,  62.079113  ,\n",
       "          82.876915  ,  62.22504   ,  -1.        ,   0.28470105,\n",
       "          -1.        ,  37.16139   ,  17.98806   ,  91.7401    ,\n",
       "          80.00134   ,  56.705647  ,  -1.        ,  39.893     ,\n",
       "          22.277645  ,  64.94588   ,  -1.        , 128.03574   ,\n",
       "          46.42628   ,  12.385262  ,  59.4323    ,  92.53779   ,\n",
       "         197.56479   ,  80.874245  ,  36.20099   ,  54.34029   ,\n",
       "           1.8634123 ,  64.397545  ,  98.977905  ,  50.202763  ,\n",
       "          59.89772   ,  81.389595  , 101.26669   ,  30.194971  ,\n",
       "         138.54808   ,  17.557266  ,  65.055664  ,  91.5248    ,\n",
       "          86.56001   ,  28.442856  ,  -1.        ,   8.095703  ,\n",
       "          -1.        ,  29.879265  ,  49.16686   ,  -1.        ,\n",
       "          52.36839   ,  -1.        ,  57.07518   ,  11.64027   ,\n",
       "          38.190235  ,  -1.        ,  94.71475   ,  22.349485  ,\n",
       "          -1.        ,  -1.        ,  33.03765   ,  98.981476  ,\n",
       "          31.048363  ,  67.02914   ,  -1.        ,  39.55128   ,\n",
       "           3.0712566 ,  53.942986  ,  20.82288   ,  46.661293  ,\n",
       "          34.183044  ,  50.61235   ,  26.535536  ,  35.2255    ,\n",
       "         109.32334   ,  51.46746   ,  68.92084   ,  53.483646  ,\n",
       "          90.12948   ,  34.82145   ,  57.02278   ,  -1.        ,\n",
       "          81.13607   , 112.99243   ,  28.71403   ,  31.697607  ,\n",
       "          49.862408  ,  48.181793  ,  -1.        ,  -1.        ,\n",
       "          -1.        ,  52.651047  ,  94.321754  ,  54.04375   ,\n",
       "          53.285053  ,  61.620193  ,  -1.        ,  11.372656  ,\n",
       "          79.76334   ,  -1.        ,   3.2400312 ,  20.015692  ,\n",
       "          27.140572  ,  42.501423  ,  29.750105  ,  43.999264  ],\n",
       "        dtype=float32)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "npArrays['Data']['InvariantMasses_0']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16ec3f98",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "sparkconnect": {
   "bundled_options": [],
   "list_of_options": []
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
