{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "hawaiian-importance",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.26/04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <RTaskArenaWrapper>: CPU Bandwith Control Active. Proceeding with 4 threads accordingly\n"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "import glob\n",
    "import numpy as np\n",
    "import os\n",
    "ROOT.gROOT.ProcessLine(\".L FTFunctions.cpp\")\n",
    "ROOT.gInterpreter.Declare(\"\"\"\n",
    "    const UInt_t barWidth = 60;\n",
    "    ULong64_t processed = 0, totalEvents = 0;\n",
    "    std::string progressBar;\n",
    "    std::mutex barMutex; \n",
    "    auto registerEvents = [](ULong64_t nIncrement) {totalEvents += nIncrement;};\n",
    "    ROOT::RDF::RResultPtr<ULong64_t> AddProgressBar(ROOT::RDF::RNode df, int everyN=10000, int totalN=100000) {\n",
    "        registerEvents(totalN);\n",
    "        auto c = df.Count();\n",
    "        c.OnPartialResultSlot(everyN, [everyN] (unsigned int slot, ULong64_t &cnt){\n",
    "            std::lock_guard<std::mutex> l(barMutex);\n",
    "            processed += everyN; //everyN captured by value for this lambda\n",
    "            progressBar = \"[\";\n",
    "            for(UInt_t i = 0; i < static_cast<UInt_t>(static_cast<Float_t>(processed)/totalEvents*barWidth); ++i){\n",
    "                progressBar.push_back('|');\n",
    "            }\n",
    "            // escape the '\\' when defined in python string\n",
    "            std::cout << \"\\\\r\" << std::left << std::setw(barWidth) << progressBar << \"] \" << processed << \"/\" << totalEvents << std::flush;\n",
    "        });\n",
    "        return c;\n",
    "    }\n",
    "\"\"\")\n",
    "# Enables multithreading\n",
    "useRange = False\n",
    "if not useRange:\n",
    "    nThreads = 8\n",
    "    ROOT.ROOT.EnableImplicitMT(nThreads)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "nominated-resource",
   "metadata": {},
   "outputs": [],
   "source": [
    "listOfFilesData = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/SingleMuon/*/*.root\")\n",
    "listOfFilesMonteCarloTTToSemiLeptonic = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/*/*.root\")\n",
    "listOfFilesMonteCarloTTTo2L2Nu = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/*/*.root\")\n",
    "listOfFilesMonteCarloWJetsToLNu = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/WJetsToLNu_TuneCP5_13TeV-madgraphMLM-pythia8/*/*.root\")\n",
    "listOfFilesMonteCarloST_tW_top = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/ST_tW_top_5f_inclusiveDecays_TuneCP5_13TeV-powheg-pythia8/*/*.root\")\n",
    "listOfFilesMonteCarloST_tchannel_top = glob.glob(\"/eos/user/m/migordon/SWAN_projects/JPsiSkims/ST_t-channel_top_4f_InclusiveDecays_TuneCP5_13TeV-powheg-madspin-pythia8/*/*.root\")\n",
    "\n",
    "listOfFilesMonteCarloTTToSemiLeptonic = listOfFilesMonteCarloTTToSemiLeptonic[0:1]\n",
    "listOfFilesMonteCarloTTTo2L2Nu = listOfFilesMonteCarloTTTo2L2Nu[0:1]\n",
    "listOfFilesMonteCarloWJetsToLNu = listOfFilesMonteCarloWJetsToLNu[0:1]\n",
    "listOfFilesMonteCarloST_tW_top = listOfFilesMonteCarloST_tW_top[0:1]\n",
    "listOfFilesMonteCarloST_tchannel_top = listOfFilesMonteCarloST_tchannel_top[0:1]\n",
    "\n",
    "dictOfListOfFiles = {\"Data\" : listOfFilesData, \"MonteCarloTTToSemiLeptonic\" : listOfFilesMonteCarloTTToSemiLeptonic, \"MonteCarloTTTo2L2Nu\" : listOfFilesMonteCarloTTTo2L2Nu, \"MonteCarloWJetsToLNu\" : listOfFilesMonteCarloWJetsToLNu, \"MonteCarloST_tW_top\" : listOfFilesMonteCarloST_tW_top, \"MonteCarloST_tchannel_top\" : listOfFilesMonteCarloST_tchannel_top} "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "international-panic",
   "metadata": {},
   "outputs": [],
   "source": [
    "chain = {}\n",
    "meta = {}\n",
    "rdf = {}\n",
    "mrdf = {}\n",
    "nevents = {}\n",
    "sumweight = {}\n",
    "neventsVal = {}\n",
    "\n",
    "mureport = {}\n",
    "\n",
    "rdfPassedIsolatedLeptonTrigger = {}\n",
    "rdfIsolatedLeptonNoHighWeights = {}\n",
    "rdfIsolatedMuonNoHighWeights = {}\n",
    "rdfIsolatedElectronNoHighWeights = {}\n",
    "rdfIsolatedMuonAfterMETCut = {}\n",
    "rdfIsolatedElectronAfterMETCut = {}\n",
    "\n",
    "rdfJetAndIsolatedLeptonFiltered = {}\n",
    "\n",
    "rdfJPsiMuons = {}\n",
    "\n",
    "rdfJPsisInPeak = {}\n",
    "\n",
    "rdfRemainingIsolatedMuonMuonIdMediumIsoIdTight = {}\n",
    "rdfRemainingIsolatedMuonMuonIdLooseIsoIdTight = {}\n",
    "rdfRemainingIsolatedMuonMuonIdMediumIsoIdMedium = {}\n",
    "rdfRemainingIsolatedMuonMuonIdLooseIsoIdMedium = {}\n",
    "\n",
    "hist = {}\n",
    "report = {}\n",
    "\n",
    "\n",
    "nparray = {}\n",
    "nparraynode = {}\n",
    "\n",
    "# Muon_pfIsoId is PFIso ID from miniAOD selector (1=PFIsoVeryLoose, 2=PFIsoLoose, 3=PFIsoMedium, 4=PFIsoTight, 5=PFIsoVeryTight, 6=PFIsoVeryVeryTight)\n",
    "LeadingIsolatedMuonMask = \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_mediumId == true && Muon_pfIsoId >= 4\"\n",
    "LeadingIsolatedElectronMask = \"Electron_pt > 30 && abs(Electron_eta) < 2.4 && Electron_cutBased == 4\"\n",
    "JetMask = \"ROOT::VecOps::RVec<Int_t> jmask = (Jet_pt >= 30 && abs(Jet_eta) <= 2.5 && Jet_jetId >= 2); \"\\\n",
    "                          \"for(int i=0; i < LeadingIsolatedMuon_pt.size(); ++i){\"\\\n",
    "                              \"ROOT::VecOps::RVec<Float_t> dr;\"\\\n",
    "                              \"for(int j=0; j < jmask.size(); ++j){\"\\\n",
    "                                  \"dr.push_back(ROOT::VecOps::DeltaR(Jet_eta.at(j), LeadingIsolatedMuon_eta.at(i), Jet_phi.at(j), LeadingIsolatedMuon_phi.at(i)));}\"\\\n",
    "                                  \"jmask = jmask && dr >= 0.4;\"\\\n",
    "                                  \"dr.clear();}\"\\\n",
    "                          \"return jmask;\"\n",
    "JPsiCandidateMask = \"Muon_pt > 6 && abs(Muon_eta) <= 2.4 && Muon_mediumId == true && !(leading_isolated_muon_mask)\"\n",
    "# JPsiMuonInPeakMask = \"ROOT::VecOps::RVec<Int_t> jpsipeakmask = (jpsi_mu_candidate_mask)\"\\\n",
    "#                             \"RVec_f pt {};\"\\\n",
    "#                             \"RVec_f eta {};\"\\\n",
    "#                             \"RVec_f phi {};\"\\\n",
    "#                             \"RVec_f mass {};\"\\\n",
    "#                             \"for(int i = 0; i < Muon_pt.size(); i++)\"\\\n",
    "#                                 \"{\"\\\n",
    "#                                     \"float im = ROOT::VecOps::InvariantMass(pt, eta, phi, mass)\"\\\n",
    "#                                 \"}\"\\\n",
    "#                     pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "#                     eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "#                     phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "#                     mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "\n",
    "#                     pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "#                     eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "#                     phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "#                     mass.push_back(this->JPsi_Muon_mass[j]);                                \n",
    "\n",
    "# Diagnostic Masks\n",
    "# LeadingIsolatedMuonMaskPfIsoMedium = \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_mediumId == true && Muon_pfIsoId >= 4 && !(Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_tightId == true && Muon_pfIsoId >= 4)\"\n",
    "\n",
    "# LeadingIsolatedMuonMaskMuonIdMediumIsoTight = \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_mediumId == true && Muon_pfIsoId >= 4 && !(Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_tightId == true && Muon_pfIsoId >= 4)\"\n",
    "# LeadingIsolatedMuonMaskMuonIdLooseIsoIdTight = \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_looseId == true && Muon_pfIsoId >= 4 && !(Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_tightId == true && Muon_pfIsoId >= 4)\"\n",
    "# LeadingIsolatedMuonMaskMuonIdMediumIsoIdMedium = \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_mediumId == true && Muon_pfIsoId >= 3 && !(Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_tightId == true && Muon_pfIsoId >= 4)\"\n",
    "# LeadingIsolatedMuonMaskMuonIdLooseIsoIdMedium = \"Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_looseId == true && Muon_pfIsoId >= 3 && !(Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_tightId == true && Muon_pfIsoId >= 4)\"\n",
    "\n",
    "\n",
    "# JPsiMuonPositiveCandidateMask = \"Muon_pt > 3 && abs(Muon_eta) <= 2.4 && Muon_mediumId == true && !(Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_tightId == true && Muon_pfIsoId >= 4) && Muon_charge == 1\"\n",
    "# JPsiMuonNegativeCandidateMask = \"Muon_pt > 3 && abs(Muon_eta) <= 2.4 && Muon_mediumId == true && !(Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_tightId == true && Muon_pfIsoId >= 4) && Muon_charge == -1\"\n",
    "# JPsiMuonPositiveCandidatePeakOnlyMask = \"Muon_pt > 3.0 && Muon_pt < 3.2 && abs(Muon_eta) <= 2.4 && Muon_mediumId == true && !(Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_tightId == true && Muon_pfIsoId >= 4) && Muon_charge == 1\"\n",
    "# JPsiMuonNegativeCandidatePeakOnlyMask = \"Muon_pt > 3.0 && Muon_pt < 3.2 && abs(Muon_eta) <= 2.4 && Muon_mediumId == true && !(Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_tightId == true && Muon_pfIsoId >= 4) && Muon_charge == -1\"\n",
    "# JPsiMuonPositiveCandidatePfIsoMediumMask = \"Muon_pt > 3 && abs(Muon_eta) <= 2.4 && Muon_mediumId == true && !(Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_tightId == true && Muon_pfIsoId >= 4) && Muon_charge == 1\"\n",
    "# JPsiMuonNegativeCandidatePfIsoMediumMask = \"Muon_pt > 3 && abs(Muon_eta) <= 2.4 && Muon_mediumId == true && !(Muon_pt > 30 && abs(Muon_eta) < 2.4 && Muon_tightId == true && Muon_pfIsoId >= 4) && Muon_charge == -1\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f2470268",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RCutFlowReport> object at 0x8577550>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TClass::Init>: no dictionary for class edm::Hash<1> is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ProcessHistory is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ProcessConfiguration is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ParameterSetBlob is available\n",
      "Warning in <TClass::Init>: no dictionary for class pair<edm::Hash<1>,edm::ParameterSetBlob> is available\n"
     ]
    }
   ],
   "source": [
    "for sample, fileList in dictOfListOfFiles.items():\n",
    "    \n",
    "    if sample == 'Data':\n",
    "        vecList = ROOT.std.vector(str)()\n",
    "\n",
    "        for element in dictOfListOfFiles['Data']:\n",
    "            vecList.push_back(element)\n",
    "\n",
    "        rdf['Data'] = ROOT.ROOT.RDataFrame(\"Events\", vecList)    \n",
    "        mureport['Data'] = rdf['Data'].Report()\n",
    "        \n",
    "        print(rdf['Data'].Report())\n",
    "        mrdf['Data'] = ROOT.ROOT.RDataFrame(\"Runs\", vecList)\n",
    "        \n",
    "        if useRange:\n",
    "            rdf['Data'] = rdf['Data'].Range(5000)\n",
    "            nrange = 5000\n",
    "            printcode = ' if(rdfentry_ % 5000 == 0) { std::cout << \"Processed entry \" << rdfentry_ << \"/' + str(nrange) + '\" << std::endl; } return rdfentry_;'\n",
    "            print(\"Data run\")\n",
    "            rdf['Data'] = rdf['Data'].Define(\"my_rdfentry\", printcode)\n",
    "            \n",
    "\n",
    "        \n",
    "    else:\n",
    "        chain[sample] = ROOT.TChain(\"Events\")\n",
    "        meta[sample] = ROOT.TChain(\"Runs\")\n",
    "\n",
    "        for file in fileList:\n",
    "            \n",
    "            chain[sample].Add(file)\n",
    "            meta[sample].Add(file)\n",
    "\n",
    "        rdf[sample] = ROOT.ROOT.RDataFrame(chain[sample])\n",
    "        mureport[sample] = rdf[sample].Report()\n",
    "        mrdf[sample] = ROOT.ROOT.RDataFrame(meta[sample])\n",
    "        \n",
    "        if useRange:\n",
    "            rdf[sample] = rdf[sample].Range(5000)\n",
    "            \n",
    "            printcode = ' if(rdfentry_ % 5000 == 0) { std::cout << \"Processed entry \" << rdfentry_ << \" \" << rdfslot_ << std::endl; } return rdfentry_;'\n",
    "            print(\"MC run\")\n",
    "            rdf[sample] = rdf[sample].Define(\"my_rdfentry\", printcode)\n",
    "        \n",
    "        nevents[sample] = mrdf[sample].Sum(\"genEventCount\")\n",
    "        sumweight[sample] = mrdf[sample].Sum(\"genEventSumw\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "paperback-video",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Semileptonic ttbar xsection: 364.3109\n",
    "#Single mu trigger for 2017 (B,C,D,E,F): \"HLT_IsoMu27\"\n",
    "#\"HLT_Ele35_WPTight_Gsf\"\n",
    "#lumiDict = {\"2017\": 41.53, \"2018\": 59.97}\n",
    "wgtFormula = {}\n",
    "\n",
    "# wgtFormula used to weight each event\n",
    "# XS = Literature Cross section of the process of interest (in picobarnes; the 1000 converts to femotobarnes), lumi = presumed luminosity of the data one is normalizing against; XS * lumi = # of expected events;\n",
    "# genWeight = quantity stored in every event which comes from the Monte Carlo generator telling you what the value of the generated event is (usually close to 1); it can be + or -; it also contains matching\n",
    "#     effeciency; tells you the Monte Carlo defined value of the event\n",
    "# sW = sum of weights; normalizes the genWeight\n",
    "lumiDict = {\"2018\": 59.97} #  brilcalc lumi --normtag /cvmfs/cms-bril.cern.ch/cms-lumi-pog/Normtags/normtag_PHYSICS.json -u /fb --begin 302031 --end 302663 --hltpath \"HLT_IsoMu27*\"\n",
    "wgtFormula['Data'] = \"1\"\n",
    "wgtFormula['MonteCarloTTToSemiLeptonic'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=364.31, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloTTToSemiLeptonic'].GetValue()))\n",
    "wgtFormula['MonteCarloTTTo2L2Nu'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=87.33, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloTTTo2L2Nu'].GetValue()))\n",
    "wgtFormula['MonteCarloWJetsToLNu'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=61526.7, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloWJetsToLNu'].GetValue()))\n",
    "wgtFormula['MonteCarloST_tW_top'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=71.7, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloST_tW_top'].GetValue()))\n",
    "wgtFormula['MonteCarloST_tchannel_top'] = \"{XS:f} * {lumi:f} * 1000 * genWeight / {sW:f}\".format(XS=130, lumi=lumiDict[\"2018\"], sW=float(sumweight['MonteCarloST_tchannel_top'].GetValue()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "better-deputy",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "input_line_98:1559:40: error: no matching function for call to 'DeltaR'\n",
      "                    DeltaRIndividual = ROOT::VecOps::DeltaR(this->Isolated_Muon_eta[i], FourVectorTotal.at(j).Eta(), this->Isolated_Muon_phi[i], FourVectorTotal.at(j).Phi());\n",
      "                                       ^~~~~~~~~~~~~~~~~~~~\n",
      "/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-edd28/x86_64-centos7-gcc11-opt/include/ROOT/RVec.hxx:2858:3: note: candidate template ignored: deduced conflicting types for parameter 'T' ('float' vs. 'double')\n",
      "T DeltaR(T eta1, T eta2, T phi1, T phi2, const T c = M_PI)\n",
      "  ^\n",
      "/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-edd28/x86_64-centos7-gcc11-opt/include/ROOT/RVec.hxx:2845:9: note: candidate template ignored: could not match 'RVec<type-parameter-0-0>' against 'float'\n",
      "RVec<T> DeltaR(const RVec<T>& eta1, const RVec<T>& eta2, const RVec<T>& phi1, const RVec<T>& phi2, const T c = M_PI)\n",
      "        ^\n"
     ]
    }
   ],
   "source": [
    "cpp_code = \"\"\"\n",
    "typedef ROOT::VecOps::RVec<Float_t>                        RVec_f;\n",
    "typedef ROOT::VecOps::RVec<Int_t>                          RVec_i;\n",
    "typedef ROOT::VecOps::RVec<Long_t>                         RVec_l;\n",
    "typedef ROOT::VecOps::RVec<std::tuple<Float_t, Float_t>>   RVec_ff;\n",
    "\n",
    "typedef ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double>>> RVec_FourVector;\n",
    "\n",
    "class MuonAndJPsiStatisticsAndKinematics\n",
    "{\n",
    "    private:\n",
    "        RVec_f JPsi_Muon_pt;\n",
    "        RVec_f JPsi_Muon_eta;\n",
    "        RVec_f JPsi_Muon_phi;\n",
    "        RVec_f JPsi_Muon_mass;\n",
    "        RVec_i JPsi_Muon_charge;\n",
    "        RVec_f Isolated_Muon_pt;\n",
    "        RVec_f Isolated_Muon_eta;\n",
    "        RVec_f Isolated_Muon_phi;\n",
    "        RVec_f Isolated_Muon_mass;\n",
    "        RVec_i Isolated_Muon_charge;\n",
    "        RVec_f Isolated_Muon_PfRelIso03_all;\n",
    "        RVec_f JPsi_Muon_PfRelIso03_all;\n",
    "\n",
    "\n",
    "    public:\n",
    "        MuonAndJPsiStatisticsAndKinematics(RVec_f JPsi_Muon_pt, RVec_f JPsi_Muon_eta, RVec_f JPsi_Muon_phi, RVec_f JPsi_Muon_mass, RVec_i JPsi_Muon_charge);\n",
    "        MuonAndJPsiStatisticsAndKinematics(RVec_f JPsi_Muon_pt, RVec_f JPsi_Muon_eta, RVec_f JPsi_Muon_phi, RVec_f JPsi_Muon_mass, RVec_i JPsi_Muon_charge, RVec_f Isolated_Muon_pt, RVec_f Isolated_Muon_eta, RVec_f Isolated_Muon_phi, RVec_f Isolated_Muon_mass, RVec_i Isolated_Muon_charge);\n",
    "        MuonAndJPsiStatisticsAndKinematics(RVec_f JPsi_Muon_pt, RVec_f JPsi_Muon_eta, RVec_f JPsi_Muon_phi, RVec_f JPsi_Muon_mass, RVec_i JPsi_Muon_charge, RVec_f Isolated_Muon_pt, RVec_f Isolated_Muon_eta, RVec_f Isolated_Muon_phi, RVec_f Isolated_Muon_mass, RVec_i Isolated_Muon_charge, RVec_f Isolated_Muon_PfRelIso03_all, RVec_f JPsi_Muon_PfRelIso03_all);\n",
    "        RVec_FourVector JPsiFourVectorCalculator();\n",
    "        RVec_FourVector JPsiForMuonsInPeakFourVectorCalculator();\n",
    "        RVec_FourVector TopQuarkInPeakFourVectorCalculator();\n",
    "        RVec_f ReturnJPsiPt();\n",
    "        RVec_f ReturnJPsiEta();\n",
    "        RVec_f ReturnJPsiPhi();\n",
    "        RVec_f JPsiMuonInvariantMassCalculator();\n",
    "        RVec_f IsolatedAndJPsiMuonInvariantMassCalculator();\n",
    "        RVec_f ReturnMuonPfRelIso03AllForIsolatedMuonInInvariantMass();\n",
    "        RVec_f ReturnMuonPfRelIso03AllForJPsiMuonsInInvariantMass();\n",
    "        RVec_f ReturnJPsiMassforJPsiInInvariantMass();\n",
    "        RVec_f DeltaEtaBetweenIsolatedAndJPsiMuonCalculator();\n",
    "        RVec_f DeltaPhiBetweenIsolatedAndJPsiMuonCalculator();\n",
    "        RVec_f DeltaRBetweenIsolatedAndJPsiMuonCalculator();\n",
    "        RVec_f DeltaEtaBetweenJPsiMuonsCalculator();\n",
    "        RVec_f DeltaPhiBetweenJPsiMuonsCalculator();\n",
    "        RVec_f DeltaRBetweenJPsiMuonsCalculator();\n",
    "        RVec_f ReturnDeltaEtaBetweenJPsiMuonsInPeak();\n",
    "        RVec_f ReturnDeltaPhiBetweenJPsiMuonsInPeak();\n",
    "        RVec_f ReturnDeltaRBetweenJPsiMuonsInPeak();\n",
    "        RVec_f DeltaEtaBetweenIsolatedMuonAndJPsiCalculator();\n",
    "        RVec_f DeltaPhiBetweenIsolatedMuonAndJPsiCalculator();\n",
    "        RVec_f DeltaRBetweenIsolatedMuonAndJPsiCalculator();\n",
    "        RVec_f ReturnLowDeltaRIsolatedMuonAndJPsiMuonPt(bool);\n",
    "        RVec_f ReturnJPsiInPeakMass();\n",
    "        RVec_f ReturnJPsiMuonsInPeakCharge();\n",
    "        RVec_f ReturnJPsiInPeakPt();\n",
    "        RVec_f ReturnJPsiMuonPtInPeak(bool);\n",
    "        RVec_f ReturnJPsiMuonInPeakPfRelIso03All();\n",
    "        RVec_f ReturnTopQuarkInPeakMass();\n",
    "        RVec_f DeltaEtaBetweenIsolatedMuonAndJPsiInPeakCalculator();\n",
    "        RVec_f DeltaPhiBetweenIsolatedMuonAndJPsiInPeakCalculator();\n",
    "        RVec_f DeltaRBetweenIsolatedMuonAndJPsiInPeakCalculator();\n",
    "        RVec_f IsolatedMuonAndJPsiInPeakCalculator();\n",
    "\n",
    "};\n",
    "\n",
    "MuonAndJPsiStatisticsAndKinematics::MuonAndJPsiStatisticsAndKinematics(RVec_f JPsi_Muon_pt, RVec_f JPsi_Muon_eta, RVec_f JPsi_Muon_phi, RVec_f JPsi_Muon_mass, RVec_i JPsi_Muon_charge)\n",
    "{\n",
    "    this->JPsi_Muon_pt = JPsi_Muon_pt;\n",
    "    this->JPsi_Muon_eta = JPsi_Muon_eta;\n",
    "    this->JPsi_Muon_phi = JPsi_Muon_phi;\n",
    "    this->JPsi_Muon_mass = JPsi_Muon_mass;\n",
    "    this->JPsi_Muon_charge = JPsi_Muon_charge;\n",
    "    this->Isolated_Muon_pt = {};\n",
    "    this->Isolated_Muon_eta = {};\n",
    "    this->Isolated_Muon_phi = {};\n",
    "    this->Isolated_Muon_mass = {};\n",
    "    this->Isolated_Muon_charge = {};\n",
    "    this->Isolated_Muon_PfRelIso03_all = {};\n",
    "    this->JPsi_Muon_PfRelIso03_all = {};\n",
    "}\n",
    "\n",
    "MuonAndJPsiStatisticsAndKinematics::MuonAndJPsiStatisticsAndKinematics(RVec_f JPsi_Muon_pt, RVec_f JPsi_Muon_eta, RVec_f JPsi_Muon_phi, RVec_f JPsi_Muon_mass, RVec_i JPsi_Muon_charge, RVec_f Isolated_Muon_pt, RVec_f Isolated_Muon_eta, RVec_f Isolated_Muon_phi, RVec_f Isolated_Muon_mass, RVec_i Isolated_Muon_charge)\n",
    "{\n",
    "    this->JPsi_Muon_pt = JPsi_Muon_pt;\n",
    "    this->JPsi_Muon_eta = JPsi_Muon_eta;\n",
    "    this->JPsi_Muon_phi = JPsi_Muon_phi;\n",
    "    this->JPsi_Muon_mass = JPsi_Muon_mass;\n",
    "    this->JPsi_Muon_charge = JPsi_Muon_charge;\n",
    "    this->Isolated_Muon_pt = Isolated_Muon_pt;\n",
    "    this->Isolated_Muon_eta = Isolated_Muon_eta;\n",
    "    this->Isolated_Muon_phi = Isolated_Muon_phi;\n",
    "    this->Isolated_Muon_mass = Isolated_Muon_mass;\n",
    "    this->Isolated_Muon_charge = Isolated_Muon_charge;\n",
    "    this->Isolated_Muon_PfRelIso03_all = {};\n",
    "    this->JPsi_Muon_PfRelIso03_all = {};\n",
    "}\n",
    "\n",
    "MuonAndJPsiStatisticsAndKinematics::MuonAndJPsiStatisticsAndKinematics(RVec_f JPsi_Muon_pt, RVec_f JPsi_Muon_eta, RVec_f JPsi_Muon_phi, RVec_f JPsi_Muon_mass, RVec_i JPsi_Muon_charge, RVec_f Isolated_Muon_pt, RVec_f Isolated_Muon_eta, RVec_f Isolated_Muon_phi, RVec_f Isolated_Muon_mass, RVec_i Isolated_Muon_charge, RVec_f Isolated_Muon_PfRelIso03_all, RVec_f JPsi_Muon_PfRelIso03_all)\n",
    "{\n",
    "    this->JPsi_Muon_pt = JPsi_Muon_pt;\n",
    "    this->JPsi_Muon_eta = JPsi_Muon_eta;\n",
    "    this->JPsi_Muon_phi = JPsi_Muon_phi;\n",
    "    this->JPsi_Muon_mass = JPsi_Muon_mass;\n",
    "    this->JPsi_Muon_charge = JPsi_Muon_charge;\n",
    "    this->Isolated_Muon_pt = Isolated_Muon_pt;\n",
    "    this->Isolated_Muon_eta = Isolated_Muon_eta;\n",
    "    this->Isolated_Muon_phi = Isolated_Muon_phi;\n",
    "    this->Isolated_Muon_mass = Isolated_Muon_mass;\n",
    "    this->Isolated_Muon_charge = Isolated_Muon_charge;\n",
    "    this->Isolated_Muon_PfRelIso03_all = Isolated_Muon_PfRelIso03_all;\n",
    "    this->JPsi_Muon_PfRelIso03_all = JPsi_Muon_PfRelIso03_all;\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "RVec_FourVector MuonAndJPsiStatisticsAndKinematics::JPsiFourVectorCalculator()\n",
    "{\n",
    "\n",
    "    RVec_FourVector fvt = {};\n",
    "    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "    for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "    {    \n",
    "\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        /* If charges are opposite, calculate the invariant mass of them */\n",
    "        for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {\n",
    "                auto FourVector1 = ROOT::Math::PtEtaPhiMVector (this->JPsi_Muon_pt[i], this->JPsi_Muon_eta[i], this->JPsi_Muon_phi[i], this->JPsi_Muon_mass[i]);\n",
    "                \n",
    "                auto FourVector2 = ROOT::Math::PtEtaPhiMVector (this->JPsi_Muon_pt[j], this->JPsi_Muon_eta[j], this->JPsi_Muon_phi[j], this->JPsi_Muon_mass[j]);\n",
    "                \n",
    "                fvt.push_back(FourVector1 + FourVector2);\n",
    "                    \n",
    "                FourVector1 = {};\n",
    "                FourVector2 = {};\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "    \n",
    "    return fvt;   \n",
    "}\n",
    "\n",
    "RVec_FourVector MuonAndJPsiStatisticsAndKinematics::JPsiForMuonsInPeakFourVectorCalculator()\n",
    "{\n",
    "\n",
    "    RVec_FourVector fvt = {};\n",
    "    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "    for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "    {    \n",
    "\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        /* If charges are opposite, calculate the invariant mass of them */\n",
    "        for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "            eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "            phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "            mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "\n",
    "            pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "            eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "            phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "            mass.push_back(this->JPsi_Muon_mass[j]);\n",
    "            \n",
    "            if((FirstMuonCharge * SecondMuonCharge == -1) && (ROOT::VecOps::InvariantMass(pt, eta, phi, mass) > 3.0) && (ROOT::VecOps::InvariantMass(pt, eta, phi, mass) < 3.2))\n",
    "            {\n",
    "                auto FourVector1 = ROOT::Math::PtEtaPhiMVector (this->JPsi_Muon_pt[i], this->JPsi_Muon_eta[i], this->JPsi_Muon_phi[i], this->JPsi_Muon_mass[i]);\n",
    "                \n",
    "                auto FourVector2 = ROOT::Math::PtEtaPhiMVector (this->JPsi_Muon_pt[j], this->JPsi_Muon_eta[j], this->JPsi_Muon_phi[j], this->JPsi_Muon_mass[j]);\n",
    "                \n",
    "                fvt.push_back(FourVector1 + FourVector2);\n",
    "                    \n",
    "                FourVector1 = {};\n",
    "                FourVector2 = {};\n",
    "            }\n",
    "            \n",
    "            pt.clear();\n",
    "            eta.clear();\n",
    "            phi.clear();\n",
    "            mass.clear();\n",
    "        }\n",
    "    }\n",
    "    \n",
    "    return fvt;   \n",
    "}\n",
    "\n",
    "RVec_FourVector MuonAndJPsiStatisticsAndKinematics::TopQuarkInPeakFourVectorCalculator()\n",
    "{\n",
    "\n",
    "    RVec_FourVector fvt = {};\n",
    "    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    for(int k = 0; k < this->Isolated_Muon_pt.size(); k++)\n",
    "    {\n",
    "        /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "        for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "        {    \n",
    "\n",
    "            FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "\n",
    "            /* If charges are opposite, calculate the invariant mass of them */\n",
    "            for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "            {\n",
    "                SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "\n",
    "                pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "                phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "                mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "\n",
    "                pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "                phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "                mass.push_back(this->JPsi_Muon_mass[j]);\n",
    "\n",
    "                if((FirstMuonCharge * SecondMuonCharge == -1) && (ROOT::VecOps::InvariantMass(pt, eta, phi, mass) > 3.0) && (ROOT::VecOps::InvariantMass(pt, eta, phi, mass) < 3.2))\n",
    "                {\n",
    "                    auto FourVector1 = ROOT::Math::PtEtaPhiMVector (this->JPsi_Muon_pt[i], this->JPsi_Muon_eta[i], this->JPsi_Muon_phi[i], this->JPsi_Muon_mass[i]);\n",
    "\n",
    "                    auto FourVector2 = ROOT::Math::PtEtaPhiMVector (this->JPsi_Muon_pt[j], this->JPsi_Muon_eta[j], this->JPsi_Muon_phi[j], this->JPsi_Muon_mass[j]);\n",
    "                    \n",
    "                    auto FourVector3 = ROOT::Math::PtEtaPhiMVector (this->Isolated_Muon_pt[k], this->Isolated_Muon_eta[k], this->Isolated_Muon_phi[k], this->Isolated_Muon_mass[k]);\n",
    "\n",
    "                    fvt.push_back(FourVector1 + FourVector2 + FourVector3);\n",
    "\n",
    "                    FourVector1 = {};\n",
    "                    FourVector2 = {};\n",
    "                    FourVector3 = {};\n",
    "                }\n",
    "\n",
    "                pt.clear();\n",
    "                eta.clear();\n",
    "                phi.clear();\n",
    "                mass.clear();\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "    \n",
    "    return fvt;   \n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnJPsiPt()\n",
    "{\n",
    "    RVec_f JPsiPt = {};\n",
    "    \n",
    "    RVec_FourVector FourVectorTotal = JPsiFourVectorCalculator();\n",
    "    \n",
    "    for(int i = 0; i < FourVectorTotal.size(); i++)\n",
    "    {\n",
    "        JPsiPt.push_back(FourVectorTotal.at(i).Pt());\n",
    "    }\n",
    "    \n",
    "    return JPsiPt;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnJPsiEta()\n",
    "{\n",
    "    RVec_f JPsiEta = {};\n",
    "    \n",
    "    RVec_FourVector FourVectorTotal = JPsiFourVectorCalculator();\n",
    "    \n",
    "    for(int i = 0; i < FourVectorTotal.size(); i++)\n",
    "    {\n",
    "        JPsiEta.push_back(FourVectorTotal.at(i).Eta());\n",
    "    }\n",
    "    \n",
    "    return JPsiEta;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnJPsiPhi()\n",
    "{\n",
    "    RVec_f JPsiPhi = {};\n",
    "    \n",
    "    RVec_FourVector FourVectorTotal = JPsiFourVectorCalculator();\n",
    "    \n",
    "    for(int i = 0; i < FourVectorTotal.size(); i++)\n",
    "    {\n",
    "        JPsiPhi.push_back(FourVectorTotal.at(i).Phi());\n",
    "    }\n",
    "    \n",
    "    return JPsiPhi;\n",
    "}\n",
    "\n",
    "/* This function matches each muon with oppositely charged muons. */\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::JPsiMuonInvariantMassCalculator()\n",
    "{ \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f InvariantMasses {};\n",
    "    \n",
    "    float im = 0;\n",
    " \n",
    "    /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "    for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "    {    \n",
    "\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        /* If charges are opposite, calculate the invariant mass of them */\n",
    "        for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {\n",
    "                pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "                phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "                mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "                    \n",
    "                pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "                phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "                mass.push_back(this->JPsi_Muon_mass[j]);\n",
    "                    \n",
    "                im = ROOT::VecOps::InvariantMass(pt, eta, phi, mass);\n",
    "                \n",
    "                InvariantMasses.push_back(im);\n",
    "                    \n",
    "                pt.clear();\n",
    "                eta.clear();\n",
    "                phi.clear();\n",
    "                mass.clear();\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return InvariantMasses;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::IsolatedAndJPsiMuonInvariantMassCalculator()\n",
    "{\n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f InvariantMasses {};\n",
    "    \n",
    "    float im = 0;\n",
    " \n",
    "    for(int k = 0; k < this->Isolated_Muon_pt.size(); k++)\n",
    "    {\n",
    "    \n",
    "        /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "        for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "        {    \n",
    "\n",
    "            FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "\n",
    "            /* If charges are opposite, calculate the invariant mass of them */\n",
    "            for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "            {\n",
    "                SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "\n",
    "                if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "                {\n",
    "                    pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                    eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "                    phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "                    mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "\n",
    "                    pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                    eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "                    phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "                    mass.push_back(this->JPsi_Muon_mass[j]);\n",
    "                    \n",
    "                    pt.push_back(this->Isolated_Muon_pt[k]);\n",
    "                    eta.push_back(this->Isolated_Muon_eta[k]);\n",
    "                    phi.push_back(this->Isolated_Muon_phi[k]);\n",
    "                    mass.push_back(this->Isolated_Muon_mass[k]);\n",
    "\n",
    "                    im = ROOT::VecOps::InvariantMass(pt, eta, phi, mass);\n",
    "\n",
    "                    InvariantMasses.push_back(im);\n",
    "\n",
    "                    pt.clear();\n",
    "                    eta.clear();\n",
    "                    phi.clear();\n",
    "                    mass.clear();\n",
    "                }\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return InvariantMasses;\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnMuonPfRelIso03AllForIsolatedMuonInInvariantMass()\n",
    "{\n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    float im = 0;\n",
    "    \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    RVec_f Isolations {};\n",
    "    \n",
    "    bool IsolatedMuonAlreadyAccountedFor = false;\n",
    " \n",
    "    for(int k = 0; k < this->Isolated_Muon_pt.size(); k++)\n",
    "    {\n",
    "    \n",
    "        /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "        for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "        {    \n",
    "\n",
    "            FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "\n",
    "            /* If charges are opposite, calculate the invariant mass of them */\n",
    "            for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "            {\n",
    "                SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "\n",
    "                if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "                {\n",
    "                \n",
    "                    pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                    eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "                    phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "                    mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "\n",
    "                    pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                    eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "                    phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "                    mass.push_back(this->JPsi_Muon_mass[j]);\n",
    "                    \n",
    "                    pt.push_back(this->Isolated_Muon_pt[k]);\n",
    "                    eta.push_back(this->Isolated_Muon_eta[k]);\n",
    "                    phi.push_back(this->Isolated_Muon_phi[k]);\n",
    "                    mass.push_back(this->Isolated_Muon_mass[k]);\n",
    "\n",
    "                    im = ROOT::VecOps::InvariantMass(pt, eta, phi, mass);\n",
    "                    \n",
    "                    if((im >= 90) && (im <= 120))\n",
    "                    {\n",
    "                    \n",
    "                        if(!IsolatedMuonAlreadyAccountedFor)\n",
    "                        {\n",
    "                            Isolations.push_back(this->Isolated_Muon_PfRelIso03_all[k]);\n",
    "                            \n",
    "                            IsolatedMuonAlreadyAccountedFor = true;\n",
    "                        }\n",
    "                    }\n",
    "                    \n",
    "                    pt.clear();\n",
    "                    eta.clear();\n",
    "                    phi.clear();\n",
    "                    mass.clear();\n",
    "                   \n",
    "                }\n",
    "            }\n",
    "        }\n",
    "        \n",
    "        IsolatedMuonAlreadyAccountedFor = false;\n",
    "    }\n",
    "        \n",
    "    return Isolations;\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnMuonPfRelIso03AllForJPsiMuonsInInvariantMass()\n",
    "{\n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    float im = 0;\n",
    "    \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    RVec_f Isolations {};\n",
    " \n",
    "    for(int k = 0; k < this->Isolated_Muon_pt.size(); k++)\n",
    "    {\n",
    "    \n",
    "        /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "        for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "        {    \n",
    "\n",
    "            FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "\n",
    "            /* If charges are opposite, calculate the invariant mass of them */\n",
    "            for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "            {\n",
    "                SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "\n",
    "                if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "                {\n",
    "                \n",
    "                    pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                    eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "                    phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "                    mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "\n",
    "                    pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                    eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "                    phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "                    mass.push_back(this->JPsi_Muon_mass[j]);\n",
    "                    \n",
    "                    pt.push_back(this->Isolated_Muon_pt[k]);\n",
    "                    eta.push_back(this->Isolated_Muon_eta[k]);\n",
    "                    phi.push_back(this->Isolated_Muon_phi[k]);\n",
    "                    mass.push_back(this->Isolated_Muon_mass[k]);\n",
    "\n",
    "                    im = ROOT::VecOps::InvariantMass(pt, eta, phi, mass);\n",
    "                    \n",
    "                    if((im >= 90) && (im <= 120))\n",
    "                    {\n",
    "                        Isolations.push_back(this->JPsi_Muon_PfRelIso03_all[i]);\n",
    "                        Isolations.push_back(this->JPsi_Muon_PfRelIso03_all[j]);\n",
    "                    }\n",
    "                    \n",
    "                    pt.clear();\n",
    "                    eta.clear();\n",
    "                    phi.clear();\n",
    "                    mass.clear();\n",
    "                   \n",
    "                }\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return Isolations;\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnJPsiMassforJPsiInInvariantMass()\n",
    "{\n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    float imAll = 0;\n",
    "    float imJPsi = 0;\n",
    "    \n",
    "    RVec_f ptAll {};\n",
    "    RVec_f etaAll {};\n",
    "    RVec_f phiAll {};\n",
    "    RVec_f massAll {};\n",
    "    \n",
    "    RVec_f JPsiMasses {};\n",
    " \n",
    "    for(int k = 0; k < this->Isolated_Muon_pt.size(); k++)\n",
    "    {\n",
    "    \n",
    "        /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "        for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "        {    \n",
    "\n",
    "            FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "\n",
    "            /* If charges are opposite, calculate the invariant mass of them */\n",
    "            for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "            {\n",
    "                SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "\n",
    "                if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "                {\n",
    "                \n",
    "                    ptAll.push_back(this->JPsi_Muon_pt[i]);\n",
    "                    etaAll.push_back(this->JPsi_Muon_eta[i]);\n",
    "                    phiAll.push_back(this->JPsi_Muon_phi[i]);\n",
    "                    massAll.push_back(this->JPsi_Muon_mass[i]);\n",
    "\n",
    "                    ptAll.push_back(this->JPsi_Muon_pt[j]);\n",
    "                    etaAll.push_back(this->JPsi_Muon_eta[j]);\n",
    "                    phiAll.push_back(this->JPsi_Muon_phi[j]);\n",
    "                    massAll.push_back(this->JPsi_Muon_mass[j]);\n",
    "                    \n",
    "                    ptAll.push_back(this->Isolated_Muon_pt[k]);\n",
    "                    etaAll.push_back(this->Isolated_Muon_eta[k]);\n",
    "                    phiAll.push_back(this->Isolated_Muon_phi[k]);\n",
    "                    massAll.push_back(this->Isolated_Muon_mass[k]);\n",
    "                    \n",
    "                    \n",
    "                    imAll = ROOT::VecOps::InvariantMass(ptAll, etaAll, phiAll, massAll);\n",
    "                    \n",
    "                    if((imAll >= 90) && (imAll <= 120))\n",
    "                    {\n",
    "                    \n",
    "                        auto FourVector1 = ROOT::Math::PtEtaPhiMVector (this->JPsi_Muon_pt[i], this->JPsi_Muon_eta[i], this->JPsi_Muon_phi[i], this->JPsi_Muon_mass[i]);\n",
    "\n",
    "                        auto FourVector2 = ROOT::Math::PtEtaPhiMVector (this->JPsi_Muon_pt[j], this->JPsi_Muon_eta[j], this->JPsi_Muon_phi[j], this->JPsi_Muon_mass[j]);\n",
    "\n",
    "                        auto FourVector3 = FourVector1 + FourVector2;\n",
    "                        \n",
    "                        JPsiMasses.push_back(FourVector3.M());\n",
    "\n",
    "                        FourVector1 = {};\n",
    "                        FourVector2 = {};\n",
    "                    }\n",
    "                    \n",
    "                    ptAll.clear();\n",
    "                    etaAll.clear();\n",
    "                    phiAll.clear();\n",
    "                    massAll.clear();\n",
    "                   \n",
    "                }\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return JPsiMasses;\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaEtaBetweenIsolatedAndJPsiMuonCalculator()\n",
    "{ \n",
    "    float DeltaEtaIndividual = 0;\n",
    "    \n",
    "    RVec_f DeltaEtaRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->Isolated_Muon_eta.size(); i++)\n",
    "    {\n",
    "    \n",
    "        for(int j = 0; j < this->JPsi_Muon_eta.size(); j++)\n",
    "        {    \n",
    "                    DeltaEtaIndividual = this->Isolated_Muon_eta[i] - this->JPsi_Muon_eta[j];\n",
    "\n",
    "                    DeltaEtaRVec.push_back(DeltaEtaIndividual);\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaEtaRVec;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaPhiBetweenIsolatedAndJPsiMuonCalculator()\n",
    "{ \n",
    "    float PhiIsolated = 0;\n",
    "    float PhiJPsi = 0;\n",
    "    \n",
    "    float DeltaPhiIndividual = 0;\n",
    "    \n",
    "    RVec_f DeltaPhiRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->Isolated_Muon_phi.size(); i++)\n",
    "    {\n",
    "    \n",
    "        for(int j = 0; j < this->JPsi_Muon_phi.size(); j++)\n",
    "        {    \n",
    "\n",
    "                    PhiIsolated = this->Isolated_Muon_phi[i];\n",
    "\n",
    "                    PhiJPsi = this->JPsi_Muon_phi[j];\n",
    "\n",
    "                    DeltaPhiIndividual = ROOT::VecOps::DeltaPhi(PhiIsolated, PhiJPsi);\n",
    "\n",
    "                    DeltaPhiRVec.push_back(DeltaPhiIndividual);\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaPhiRVec;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaRBetweenIsolatedAndJPsiMuonCalculator()\n",
    "{ \n",
    "    float EtaIsolated = 0;\n",
    "    float PhiIsolated = 0;\n",
    "    float EtaJPsi = 0;\n",
    "    float PhiJPsi = 0;\n",
    "    \n",
    "    float DeltaRIndividual = 0;\n",
    "    \n",
    "    RVec_f DeltaRRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->Isolated_Muon_phi.size(); i++)\n",
    "    {\n",
    "    \n",
    "        for(int j = 0; j < this->JPsi_Muon_phi.size(); j++)\n",
    "        {    \n",
    "                    EtaIsolated = this->Isolated_Muon_eta[i];\n",
    "                    PhiIsolated = this->Isolated_Muon_phi[i];\n",
    "                    \n",
    "                    EtaJPsi = this->JPsi_Muon_eta[j];\n",
    "                    PhiJPsi = this->JPsi_Muon_phi[j];\n",
    "\n",
    "                    DeltaRIndividual = ROOT::VecOps::DeltaR(EtaIsolated, EtaJPsi, PhiIsolated, PhiJPsi);\n",
    "\n",
    "                    DeltaRRVec.push_back(DeltaRIndividual);\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaRRVec;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaEtaBetweenJPsiMuonsCalculator()\n",
    "{\n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    float DeltaEtaIndividual = 0;\n",
    "    \n",
    "    RVec_f DeltaEtaRVec {};\n",
    "    \n",
    "    /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "    for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "    {    \n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        /* If charges are opposite, calculate the invariant mass of them */\n",
    "        for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {                \n",
    "                DeltaEtaIndividual = this->JPsi_Muon_eta[i] - this->JPsi_Muon_eta[j];\n",
    "\n",
    "                DeltaEtaRVec.push_back(DeltaEtaIndividual);\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaEtaRVec;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaPhiBetweenJPsiMuonsCalculator()\n",
    "{ \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    float PhiJPsi1 = 0;\n",
    "    float PhiJPsi2 = 0;\n",
    "    \n",
    "    float DeltaPhiIndividual = 0;\n",
    "    \n",
    "    RVec_f DeltaPhiRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->JPsi_Muon_phi.size(); i++)\n",
    "    {\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        for(int j = i+1; j < this->JPsi_Muon_phi.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {                \n",
    "                PhiJPsi1 = this->JPsi_Muon_phi[i];\n",
    "\n",
    "                PhiJPsi2 = this->JPsi_Muon_phi[j];\n",
    "\n",
    "                DeltaPhiIndividual = ROOT::VecOps::DeltaPhi(PhiJPsi1, PhiJPsi2);\n",
    "\n",
    "                DeltaPhiRVec.push_back(DeltaPhiIndividual);\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaPhiRVec;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaRBetweenJPsiMuonsCalculator()\n",
    "{ \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    float EtaJPsi1 = 0;\n",
    "    float PhiJPsi1 = 0;\n",
    "    float EtaJPsi2 = 0;\n",
    "    float PhiJPsi2 = 0;\n",
    "    \n",
    "    float DeltaRIndividual = 0;\n",
    "    \n",
    "    RVec_f DeltaRRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->JPsi_Muon_phi.size(); i++)\n",
    "    {\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "\n",
    "            for(int j = i+1; j < this->JPsi_Muon_phi.size(); j++)\n",
    "            {\n",
    "                SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "\n",
    "                if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "                {                \n",
    "                    EtaJPsi1 = this->JPsi_Muon_eta[i];\n",
    "                    PhiJPsi1 = this->JPsi_Muon_phi[i];\n",
    "                    \n",
    "                    EtaJPsi2 = this->JPsi_Muon_eta[j];\n",
    "                    PhiJPsi2 = this->JPsi_Muon_phi[j];\n",
    "\n",
    "                    DeltaRIndividual = ROOT::VecOps::DeltaR(EtaJPsi1, EtaJPsi2, PhiJPsi1, PhiJPsi2);\n",
    "\n",
    "                    DeltaRRVec.push_back(DeltaRIndividual);\n",
    "                }\n",
    "            }\n",
    "        }\n",
    "        \n",
    "    return DeltaRRVec;\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnDeltaEtaBetweenJPsiMuonsInPeak()\n",
    "{\n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    float DeltaEtaIndividual = 0;\n",
    "    \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    RVec_f DeltaEtaRVec {};\n",
    "    \n",
    "    /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "    for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "    {    \n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        /* If charges are opposite, calculate the invariant mass of them */\n",
    "        for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {\n",
    "                pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "                phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "                mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "\n",
    "                pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "                phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "                mass.push_back(this->JPsi_Muon_mass[j]);\n",
    "                \n",
    "                if((ROOT::VecOps::InvariantMass(pt, eta, phi, mass) > 3.0) && (ROOT::VecOps::InvariantMass(pt, eta, phi, mass) < 3.2))\n",
    "                {            \n",
    "                    DeltaEtaIndividual = this->JPsi_Muon_eta[i] - this->JPsi_Muon_eta[j];\n",
    "\n",
    "                    DeltaEtaRVec.push_back(DeltaEtaIndividual);\n",
    "                }\n",
    "            }\n",
    "            \n",
    "            pt.clear();\n",
    "            eta.clear();\n",
    "            phi.clear();\n",
    "            mass.clear();\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaEtaRVec;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnDeltaPhiBetweenJPsiMuonsInPeak()\n",
    "{ \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    float PhiJPsi1 = 0;\n",
    "    float PhiJPsi2 = 0;\n",
    "    \n",
    "    float DeltaPhiIndividual = 0;\n",
    "    \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    RVec_f DeltaPhiRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->JPsi_Muon_phi.size(); i++)\n",
    "    {\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "        \n",
    "        for(int j = i+1; j < this->JPsi_Muon_phi.size(); j++)\n",
    "        {\n",
    "            SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "            \n",
    "            if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "            {\n",
    "                pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "                phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "                mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "\n",
    "                pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "                phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "                mass.push_back(this->JPsi_Muon_mass[j]);\n",
    "                \n",
    "                if((ROOT::VecOps::InvariantMass(pt, eta, phi, mass) > 3.0) && (ROOT::VecOps::InvariantMass(pt, eta, phi, mass) < 3.2))\n",
    "                {\n",
    "                    PhiJPsi1 = this->JPsi_Muon_phi[i];\n",
    "\n",
    "                    PhiJPsi2 = this->JPsi_Muon_phi[j];\n",
    "\n",
    "                    DeltaPhiIndividual = ROOT::VecOps::DeltaPhi(PhiJPsi1, PhiJPsi2);\n",
    "\n",
    "                    DeltaPhiRVec.push_back(DeltaPhiIndividual);\n",
    "                }\n",
    "            }\n",
    "            \n",
    "            pt.clear();\n",
    "            eta.clear();\n",
    "            phi.clear();\n",
    "            mass.clear();\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaPhiRVec;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnDeltaRBetweenJPsiMuonsInPeak()\n",
    "{ \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    float EtaJPsi1 = 0;\n",
    "    float PhiJPsi1 = 0;\n",
    "    float EtaJPsi2 = 0;\n",
    "    float PhiJPsi2 = 0;\n",
    "    \n",
    "    float DeltaRIndividual = 0;\n",
    "    \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    RVec_f DeltaRRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->JPsi_Muon_phi.size(); i++)\n",
    "    {\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "\n",
    "            for(int j = i+1; j < this->JPsi_Muon_phi.size(); j++)\n",
    "            {\n",
    "                SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "\n",
    "                if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "                {                \n",
    "                    EtaJPsi1 = this->JPsi_Muon_eta[i];\n",
    "                    PhiJPsi1 = this->JPsi_Muon_phi[i];\n",
    "                    \n",
    "                    EtaJPsi2 = this->JPsi_Muon_eta[j];\n",
    "                    PhiJPsi2 = this->JPsi_Muon_phi[j];\n",
    "\n",
    "                    DeltaRIndividual = ROOT::VecOps::DeltaR(EtaJPsi1, EtaJPsi2, PhiJPsi1, PhiJPsi2);\n",
    "                    \n",
    "                    pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                    eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "                    phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "                    mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "\n",
    "                    pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                    eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "                    phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "                    mass.push_back(this->JPsi_Muon_mass[j]);\n",
    "\n",
    "                    if((ROOT::VecOps::InvariantMass(pt, eta, phi, mass) > 3.0) && (ROOT::VecOps::InvariantMass(pt, eta, phi, mass) < 3.2))\n",
    "                    {\n",
    "                        DeltaRRVec.push_back(DeltaRIndividual);\n",
    "                    }\n",
    "                }\n",
    "                \n",
    "                pt.clear();\n",
    "                eta.clear();\n",
    "                phi.clear();\n",
    "                mass.clear();\n",
    "            }\n",
    "        }\n",
    "        \n",
    "    return DeltaRRVec;\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaEtaBetweenIsolatedMuonAndJPsiCalculator()\n",
    "{\n",
    "    RVec_FourVector FourVectorTotal = JPsiFourVectorCalculator();\n",
    "    \n",
    "    float DeltaEtaIndividual = 0;\n",
    "    \n",
    "    RVec_f DeltaEtaRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->Isolated_Muon_eta.size(); i++)\n",
    "    {\n",
    "    \n",
    "        for(int j = 0; j < FourVectorTotal.size(); j++)\n",
    "        {    \n",
    "                    DeltaEtaIndividual = this->Isolated_Muon_eta[i] - FourVectorTotal.at(j).Eta();\n",
    "\n",
    "                    DeltaEtaRVec.push_back(DeltaEtaIndividual);\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaEtaRVec;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaPhiBetweenIsolatedMuonAndJPsiCalculator()\n",
    "{\n",
    "    RVec_FourVector FourVectorTotal = JPsiFourVectorCalculator();\n",
    "    \n",
    "    float PhiIsolated = 0;\n",
    "    float PhiJPsi = 0;\n",
    "    \n",
    "    float DeltaPhiIndividual = 0;\n",
    "    \n",
    "    RVec_f DeltaPhiRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->Isolated_Muon_phi.size(); i++)\n",
    "    {\n",
    "    \n",
    "        for(int j = 0; j < FourVectorTotal.size(); j++)\n",
    "        {    \n",
    "                    PhiIsolated = this->Isolated_Muon_phi[i];\n",
    "\n",
    "                    PhiJPsi = FourVectorTotal.at(j).Phi();\n",
    "\n",
    "                    DeltaPhiIndividual = ROOT::VecOps::DeltaPhi(PhiIsolated, PhiJPsi);\n",
    "\n",
    "                    DeltaPhiRVec.push_back(DeltaPhiIndividual);\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaPhiRVec;   \n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaRBetweenIsolatedMuonAndJPsiCalculator()\n",
    "{\n",
    "    RVec_FourVector FourVectorTotal = JPsiFourVectorCalculator();\n",
    "    \n",
    "    float EtaIsolated = 0;\n",
    "    float PhiIsolated = 0;\n",
    "    float EtaJPsi = 0;\n",
    "    float PhiJPsi = 0;\n",
    "    \n",
    "    float DeltaRIndividual = 0;\n",
    "    \n",
    "    RVec_f DeltaRRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->Isolated_Muon_phi.size(); i++)\n",
    "    {\n",
    "    \n",
    "        for(int j = 0; j < FourVectorTotal.size(); j++)\n",
    "        {    \n",
    "                    EtaIsolated = this->Isolated_Muon_eta[i];\n",
    "                    PhiIsolated = this->Isolated_Muon_phi[i];\n",
    "                    \n",
    "                    EtaJPsi = FourVectorTotal.at(j).Eta();\n",
    "                    PhiJPsi = FourVectorTotal.at(j).Phi();\n",
    "\n",
    "                    DeltaRIndividual = ROOT::VecOps::DeltaR(EtaIsolated, EtaJPsi, PhiIsolated, PhiJPsi);\n",
    "                    \n",
    "                    DeltaRRVec.push_back(DeltaRIndividual);\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaRRVec;\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnLowDeltaRIsolatedMuonAndJPsiMuonPt(bool ReturnJPsiMuon)\n",
    "{\n",
    "    float EtaIsolated = 0;\n",
    "    float PhiIsolated = 0;\n",
    "    float EtaJPsiMuon = 0;\n",
    "    float PhiJPsiMuon = 0;\n",
    "    \n",
    "    float DeltaRIndividual = 0;\n",
    "    \n",
    "    RVec_ff IsolatedMuonAndJPsiMuonPt {};\n",
    "    \n",
    "    RVec_f IsolatedMuonPt {};\n",
    "    RVec_f JPsiMuonPt {};\n",
    "    \n",
    "    for(int i = 0; i < this->Isolated_Muon_pt.size(); i++)\n",
    "    {    \n",
    "\n",
    "        for(int j = 0; j < this->JPsi_Muon_pt.size(); j++)\n",
    "        {\n",
    "                    EtaIsolated = this->Isolated_Muon_eta[i];\n",
    "                    PhiIsolated = this->Isolated_Muon_phi[i];\n",
    "                    \n",
    "                    EtaJPsiMuon = this->JPsi_Muon_eta[j];\n",
    "                    PhiJPsiMuon = this->JPsi_Muon_phi[j];\n",
    "\n",
    "                    DeltaRIndividual = ROOT::VecOps::DeltaR(EtaIsolated, EtaJPsiMuon, PhiIsolated, PhiJPsiMuon);\n",
    "\n",
    "                    if(DeltaRIndividual < 0.3)\n",
    "                    {\n",
    "                        IsolatedMuonAndJPsiMuonPt.push_back(std::tuple(this->Isolated_Muon_pt[i], this->JPsi_Muon_pt[j]));\n",
    "                    }\n",
    "        }\n",
    "    }\n",
    "    \n",
    "    if(!ReturnJPsiMuon)\n",
    "    {\n",
    "        for(int m = 0; m < IsolatedMuonAndJPsiMuonPt.size(); m++)\n",
    "        {\n",
    "            IsolatedMuonPt.push_back(std::get<0>(IsolatedMuonAndJPsiMuonPt[m]));\n",
    "        }\n",
    "        \n",
    "        return IsolatedMuonPt;\n",
    "    }\n",
    "    \n",
    "    else\n",
    "    {\n",
    "        for(int m = 0; m < IsolatedMuonAndJPsiMuonPt.size(); m++)\n",
    "        {\n",
    "            JPsiMuonPt.push_back(std::get<1>(IsolatedMuonAndJPsiMuonPt[m]));\n",
    "        }\n",
    "        \n",
    "        return JPsiMuonPt;\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnJPsiInPeakMass()\n",
    "{\n",
    "    RVec_f JPsiInPeakMass = {};\n",
    "    \n",
    "    RVec_FourVector FourVectorTotal = JPsiForMuonsInPeakFourVectorCalculator();\n",
    "    \n",
    "    for(int i = 0; i < FourVectorTotal.size(); i++)\n",
    "    {\n",
    "        JPsiInPeakMass.push_back(FourVectorTotal.at(i).M());\n",
    "    }\n",
    "    \n",
    "    return JPsiInPeakMass;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnJPsiMuonsInPeakCharge()\n",
    "{\n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    RVec_f JPsiMuonChargeRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->JPsi_Muon_phi.size(); i++)\n",
    "    {\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "\n",
    "            for(int j = i+1; j < this->JPsi_Muon_phi.size(); j++)\n",
    "            {\n",
    "                SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "\n",
    "                if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "                {             \n",
    "                    pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                    eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "                    phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "                    mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "\n",
    "                    pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                    eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "                    phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "                    mass.push_back(this->JPsi_Muon_mass[j]);\n",
    "\n",
    "                    if((ROOT::VecOps::InvariantMass(pt, eta, phi, mass) > 3.0) && (ROOT::VecOps::InvariantMass(pt, eta, phi, mass) < 3.2))\n",
    "                    {\n",
    "                        JPsiMuonChargeRVec.push_back(FirstMuonCharge);\n",
    "                        JPsiMuonChargeRVec.push_back(SecondMuonCharge);\n",
    "                    }\n",
    "                }\n",
    "                \n",
    "                pt.clear();\n",
    "                eta.clear();\n",
    "                phi.clear();\n",
    "                mass.clear();\n",
    "            }\n",
    "    }\n",
    "    \n",
    "    return JPsiMuonChargeRVec;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnJPsiInPeakPt()\n",
    "{\n",
    "    RVec_f JPsiPt = {};\n",
    "    \n",
    "    RVec_FourVector FourVectorTotal = JPsiForMuonsInPeakFourVectorCalculator();\n",
    "    \n",
    "    for(int i = 0; i < FourVectorTotal.size(); i++)\n",
    "    {\n",
    "        JPsiPt.push_back(FourVectorTotal.at(i).Pt());\n",
    "    }\n",
    "    \n",
    "    return JPsiPt;\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnJPsiMuonPtInPeak(bool ReturnPositiveMuon)\n",
    "{\n",
    "    float EtaIsolated = 0;\n",
    "    float PhiIsolated = 0;\n",
    "    float EtaJPsiMuon = 0;\n",
    "    float PhiJPsiMuon = 0;\n",
    "    \n",
    "    float DeltaRIndividual = 0;\n",
    "    \n",
    "    RVec_ff IsolatedMuonAndJPsiMuonPt {};\n",
    "    \n",
    "    RVec_f JPsiMuonPositivePt {};\n",
    "    RVec_f JPsiMuonNegativePt {};\n",
    "    \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "    {\n",
    "        FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "\n",
    "        for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "        {\n",
    "                SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "                \n",
    "                pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "                phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "                mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "                    \n",
    "                pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "                phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "                mass.push_back(this->JPsi_Muon_mass[j]);\n",
    "\n",
    "                if((ROOT::VecOps::InvariantMass(pt, eta, phi, mass) > 3.0) && (ROOT::VecOps::InvariantMass(pt, eta, phi, mass) < 3.2))\n",
    "                {\n",
    "                    if(FirstMuonCharge < 0)\n",
    "                    {\n",
    "                        JPsiMuonPositivePt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                        JPsiMuonNegativePt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                    }\n",
    "                    \n",
    "                    else\n",
    "                    {\n",
    "                        JPsiMuonPositivePt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                        JPsiMuonNegativePt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                    }\n",
    "                }\n",
    "                \n",
    "                pt.clear();\n",
    "                eta.clear();\n",
    "                phi.clear();\n",
    "                mass.clear();\n",
    "        }\n",
    "    }\n",
    "    \n",
    "    if(ReturnPositiveMuon)\n",
    "    {        \n",
    "        return JPsiMuonPositivePt;\n",
    "    }\n",
    "    \n",
    "    else\n",
    "    {        \n",
    "        return JPsiMuonNegativePt;\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnJPsiMuonInPeakPfRelIso03All()\n",
    "{\n",
    "    int FirstMuonCharge = 0;\n",
    "    int SecondMuonCharge = 0;\n",
    "    \n",
    "    float im = 0;\n",
    "    \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    RVec_f Isolations {};\n",
    " \n",
    "        /* Loop over the set of muons to determine which muons have +1 charge, then match them with all the ones with -1 charge. */\n",
    "        for(int i = 0; i < this->JPsi_Muon_charge.size(); i++)\n",
    "        {    \n",
    "\n",
    "            FirstMuonCharge = this->JPsi_Muon_charge[i];\n",
    "\n",
    "            /* If charges are opposite, calculate the invariant mass of them */\n",
    "            for(int j = i+1; j < this->JPsi_Muon_charge.size(); j++)\n",
    "            {\n",
    "                SecondMuonCharge = this->JPsi_Muon_charge[j];\n",
    "\n",
    "                if(FirstMuonCharge * SecondMuonCharge == -1)\n",
    "                {\n",
    "                \n",
    "                    pt.push_back(this->JPsi_Muon_pt[i]);\n",
    "                    eta.push_back(this->JPsi_Muon_eta[i]);\n",
    "                    phi.push_back(this->JPsi_Muon_phi[i]);\n",
    "                    mass.push_back(this->JPsi_Muon_mass[i]);\n",
    "\n",
    "                    pt.push_back(this->JPsi_Muon_pt[j]);\n",
    "                    eta.push_back(this->JPsi_Muon_eta[j]);\n",
    "                    phi.push_back(this->JPsi_Muon_phi[j]);\n",
    "                    mass.push_back(this->JPsi_Muon_mass[j]);\n",
    "\n",
    "                    im = ROOT::VecOps::InvariantMass(pt, eta, phi, mass);\n",
    "                    \n",
    "                    if((im >= 3.0) && (im <= 3.2))\n",
    "                    {\n",
    "                        Isolations.push_back(this->JPsi_Muon_PfRelIso03_all[i]);\n",
    "                        Isolations.push_back(this->JPsi_Muon_PfRelIso03_all[j]);\n",
    "                    }\n",
    "                    \n",
    "                    pt.clear();\n",
    "                    eta.clear();\n",
    "                    phi.clear();\n",
    "                    mass.clear();\n",
    "                   \n",
    "                }\n",
    "            }\n",
    "        }\n",
    "        \n",
    "    return Isolations;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::ReturnTopQuarkInPeakMass()\n",
    "{\n",
    "    RVec_f TopQuarkInPeakMass = {};\n",
    "    \n",
    "    RVec_FourVector FourVectorTotal = TopQuarkInPeakFourVectorCalculator();\n",
    "    \n",
    "    for(int i = 0; i < FourVectorTotal.size(); i++)\n",
    "    {\n",
    "        TopQuarkInPeakMass.push_back(FourVectorTotal.at(i).M());\n",
    "    }\n",
    "    \n",
    "    return TopQuarkInPeakMass;\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaEtaBetweenIsolatedMuonAndJPsiInPeakCalculator()\n",
    "{\n",
    "    RVec_FourVector FourVectorTotal = JPsiForMuonsInPeakFourVectorCalculator();\n",
    "    \n",
    "    float DeltaEtaIndividual = 0;\n",
    "    \n",
    "    RVec_f DeltaEtaRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->Isolated_Muon_eta.size(); i++)\n",
    "    {\n",
    "    \n",
    "        for(int j = 0; j < FourVectorTotal.size(); j++)\n",
    "        {    \n",
    "                    DeltaEtaIndividual = this->Isolated_Muon_eta[i] - FourVectorTotal.at(j).Eta();\n",
    "\n",
    "                    DeltaEtaRVec.push_back(DeltaEtaIndividual);\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaEtaRVec;\n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaPhiBetweenIsolatedMuonAndJPsiInPeakCalculator()\n",
    "{\n",
    "    RVec_FourVector FourVectorTotal = JPsiForMuonsInPeakFourVectorCalculator();\n",
    "    \n",
    "    float PhiIsolated = 0;\n",
    "    float PhiJPsi = 0;\n",
    "    \n",
    "    float DeltaPhiIndividual = 0;\n",
    "    \n",
    "    RVec_f DeltaPhiRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->Isolated_Muon_phi.size(); i++)\n",
    "    {\n",
    "    \n",
    "        for(int j = 0; j < FourVectorTotal.size(); j++)\n",
    "        {    \n",
    "                    PhiIsolated = this->Isolated_Muon_phi[i];\n",
    "\n",
    "                    PhiJPsi = FourVectorTotal.at(j).Phi();\n",
    "\n",
    "                    DeltaPhiIndividual = ROOT::VecOps::DeltaPhi(PhiIsolated, PhiJPsi);\n",
    "\n",
    "                    DeltaPhiRVec.push_back(DeltaPhiIndividual);\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaPhiRVec;   \n",
    "}\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::DeltaRBetweenIsolatedMuonAndJPsiInPeakCalculator()\n",
    "{\n",
    "    RVec_FourVector FourVectorTotal = JPsiForMuonsInPeakFourVectorCalculator();\n",
    "    \n",
    "    float EtaIsolated = 0;\n",
    "    float PhiIsolated = 0;\n",
    "    float EtaJPsi = 0;\n",
    "    float PhiJPsi = 0;\n",
    "    \n",
    "    float DeltaRIndividual = 0;\n",
    "    \n",
    "    RVec_f DeltaRRVec {};\n",
    "    \n",
    "    for(int i = 0; i < this->Isolated_Muon_phi.size(); i++)\n",
    "    {\n",
    "    \n",
    "        for(int j = 0; j < FourVectorTotal.size(); j++)\n",
    "        {    \n",
    "                    EtaIsolated = this->Isolated_Muon_eta[i];\n",
    "                    PhiIsolated = this->Isolated_Muon_phi[i];\n",
    "                    \n",
    "                    EtaJPsi = FourVectorTotal.at(j).Eta();\n",
    "                    PhiJPsi = FourVectorTotal.at(j).Phi();\n",
    "\n",
    "                    DeltaRIndividual = ROOT::VecOps::DeltaR(EtaIsolated, EtaJPsi, PhiIsolated, PhiJPsi);\n",
    "                    \n",
    "                    DeltaRRVec.push_back(DeltaRIndividual);\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return DeltaRRVec;\n",
    "}\n",
    "\n",
    "\n",
    "RVec_f MuonAndJPsiStatisticsAndKinematics::IsolatedMuonAndJPsiInPeakCalculator()\n",
    "{\n",
    "    RVec_FourVector FourVectorTotal = JPsiForMuonsInPeakFourVectorCalculator();\n",
    "    \n",
    "    RVec_f pt {};\n",
    "    RVec_f eta {};\n",
    "    RVec_f phi {};\n",
    "    RVec_f mass {};\n",
    "    \n",
    "    float EtaIsolated = 0;\n",
    "    float PhiIsolated = 0;\n",
    "    float EtaJPsi = 0;\n",
    "    float PhiJPsi = 0;\n",
    "    \n",
    "    float DeltaRIndividual = 0;\n",
    "    \n",
    "    RVec_f InvariantMasses {};\n",
    "    \n",
    "    for(int i = 0; i < this->Isolated_Muon_phi.size(); i++)\n",
    "    {\n",
    "    \n",
    "        for(int j = 0; j < FourVectorTotal.size(); j++)\n",
    "        {    \n",
    "                    pt.push_back(this->Isolated_Muon_pt[i]);\n",
    "                    eta.push_back(this->Isolated_Muon_eta[i]);\n",
    "                    phi.push_back(this->Isolated_Muon_phi[i]);\n",
    "                    mass.push_back(this->Isolated_Muon_mass[i]);\n",
    "                    \n",
    "                    pt.push_back(FourVectorTotal.at(j).Pt());\n",
    "                    eta.push_back(FourVectorTotal.at(j).Eta());\n",
    "                    phi.push_back(FourVectorTotal.at(j).Phi());\n",
    "                    mass.push_back(FourVectorTotal.at(j).M());\n",
    "                    \n",
    "                    EtaIsolated = this->Isolated_Muon_eta[i];\n",
    "                    PhiIsolated = this->Isolated_Muon_phi[i];\n",
    "                    \n",
    "                    EtaJPsi = FourVectorTotal.at(j).Eta();\n",
    "                    PhiJPsi = FourVectorTotal.at(j).Phi();\n",
    "\n",
    "                    DeltaRIndividual = ROOT::VecOps::DeltaR(EtaIsolated, EtaJPsi, PhiIsolated, PhiJPsi);\n",
    "                    \n",
    "                    if(DeltaRIndividual < 2)\n",
    "                    {\n",
    "                        InvariantMasses.push_back(ROOT::VecOps::InvariantMass(pt, eta, phi, mass));\n",
    "                    }\n",
    "                    \n",
    "                    pt.clear();\n",
    "                    eta.clear();\n",
    "                    phi.clear();\n",
    "                    mass.clear();\n",
    "        }\n",
    "    }\n",
    "        \n",
    "    return InvariantMasses;\n",
    "}\n",
    "\n",
    "\"\"\"\n",
    "ROOT.gInterpreter.Declare(cpp_code)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ce5dd994",
   "metadata": {},
   "outputs": [],
   "source": [
    "def IsolatedLeptonSelection():\n",
    "\n",
    "    for sample in dictOfListOfFiles:       \n",
    "\n",
    "        rdfPassedIsolatedLeptonTrigger[sample] = rdf[sample].Filter(\"HLT_IsoMu24 == true ^ HLT_Ele32_WPTight_Gsf == true\", \"HLTLeptonTrigger\")\\\n",
    "            .Define(\"LumiXS\",wgtFormula[sample])\\\n",
    "            .Define(\"leading_isolated_muon_mask\", LeadingIsolatedMuonMask)\\\n",
    "            .Define(\"leading_isolated_electron_mask\", LeadingIsolatedElectronMask)\n",
    "\n",
    "        if sample == 'Data':\n",
    "            rdfIsolatedMuonNoHighWeights[sample] = rdfPassedIsolatedLeptonTrigger[sample].Filter(\"Sum(leading_isolated_muon_mask) == 1 && Sum(leading_isolated_electron_mask) == 0\", \"Exactly one isolated muon and exactly zero isolated electrons\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_pt\", \"Muon_pt[leading_isolated_muon_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_eta\", \"Muon_eta[leading_isolated_muon_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_phi\", \"Muon_phi[leading_isolated_muon_mask].at(0, -5)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_mass\", \"Muon_mass[leading_isolated_muon_mask].at(0, -2.71)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_charge\", \"Muon_charge[leading_isolated_muon_mask].at(0, -5)\")\\\n",
    "                .Define(\"IsolatedMuon_pt\", \"Muon_pt[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_eta\", \"Muon_eta[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_phi\", \"Muon_phi[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_mass\", \"Muon_mass[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_charge\", \"Muon_charge[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_pdgId\", \"Muon_pdgId[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pt\", \"Electron_pt[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_eta\", \"Electron_eta[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_phi\", \"Electron_phi[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_mass\", \"Electron_mass[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_charge\", \"Electron_charge[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pdgId\", \"Electron_pdgId[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedLepton_pt\", \"Concatenate(IsolatedMuon_pt, IsolatedElectron_pt)\")\\\n",
    "                .Define(\"IsolatedLepton_eta\", \"Concatenate(IsolatedMuon_eta, IsolatedElectron_eta)\")\\\n",
    "                .Define(\"IsolatedLepton_phi\", \"Concatenate(IsolatedMuon_phi, IsolatedElectron_phi)\")\\\n",
    "                .Define(\"IsolatedLepton_mass\", \"Concatenate(IsolatedMuon_mass, IsolatedElectron_mass)\")\\\n",
    "                .Define(\"IsolatedLepton_charge\", \"Concatenate(IsolatedMuon_charge, IsolatedElectron_charge)\")\\\n",
    "                .Define(\"IsolatedLepton_pdgid\", \"Concatenate(IsolatedMuon_pdgId, IsolatedElectron_pdgId)\")\\\n",
    "                .Define(\"METBeforeMETCut\", \"MET_pt\")\n",
    "            \n",
    "            rdfIsolatedElectronNoHighWeights[sample] = rdfPassedIsolatedLeptonTrigger[sample].Filter(\"Sum(leading_isolated_electron_mask) == 1 && Sum(leading_isolated_muon_mask) == 0\", \"Exactly one isolated electron and exactly zero isolated muon\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_pt\", \"Electron_pt[leading_isolated_electron_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_eta\", \"Electron_eta[leading_isolated_electron_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_phi\", \"Electron_phi[leading_isolated_electron_mask].at(0, -5)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_mass\", \"Electron_mass[leading_isolated_electron_mask].at(0, -2.71)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_charge\", \"Electron_charge[leading_isolated_electron_mask].at(0, -5)\")\\\n",
    "                .Define(\"IsolatedMuon_pt\", \"Muon_pt[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_eta\", \"Muon_eta[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_phi\", \"Muon_phi[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_mass\", \"Muon_mass[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_charge\", \"Muon_charge[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_pdgId\", \"Muon_pdgId[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pt\", \"Electron_pt[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_eta\", \"Electron_eta[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_phi\", \"Electron_phi[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_mass\", \"Electron_mass[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_charge\", \"Electron_charge[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pdgId\", \"Electron_pdgId[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedLepton_pt\", \"Concatenate(IsolatedMuon_pt, IsolatedElectron_pt)\")\\\n",
    "                .Define(\"IsolatedLepton_eta\", \"Concatenate(IsolatedMuon_eta, IsolatedElectron_eta)\")\\\n",
    "                .Define(\"IsolatedLepton_phi\", \"Concatenate(IsolatedMuon_phi, IsolatedElectron_phi)\")\\\n",
    "                .Define(\"IsolatedLepton_mass\", \"Concatenate(IsolatedMuon_mass, IsolatedElectron_mass)\")\\\n",
    "                .Define(\"IsolatedLepton_charge\", \"Concatenate(IsolatedMuon_charge, IsolatedElectron_charge)\")\\\n",
    "                .Define(\"IsolatedLepton_pdgid\", \"Concatenate(IsolatedMuon_pdgId, IsolatedElectron_pdgId)\")\\\n",
    "                .Define(\"METBeforeMETCut\", \"MET_pt\")\n",
    "\n",
    "\n",
    "        # Change criteria to nothing below or above 4 standard deviations from the mean\n",
    "        else:\n",
    "            rdfIsolatedMuonNoHighWeights[sample] = rdfPassedIsolatedLeptonTrigger[sample].Filter(\"genWeight < 1000 && Sum(leading_isolated_muon_mask) == 1 && Sum(leading_isolated_electron_mask) == 0\", \"Exactly one isolated muon and exactly zero isolated electrons\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_pt\", \"Muon_pt[leading_isolated_muon_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_eta\", \"Muon_eta[leading_isolated_muon_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_phi\", \"Muon_phi[leading_isolated_muon_mask].at(0, -5)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_mass\", \"Muon_mass[leading_isolated_muon_mask].at(0, -2.71)\")\\\n",
    "                .Define(\"LeadingIsolatedMuon_charge\", \"Muon_charge[leading_isolated_muon_mask].at(0, -5)\")\\\n",
    "                .Define(\"IsolatedMuon_pt\", \"Muon_pt[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_eta\", \"Muon_eta[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_phi\", \"Muon_phi[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_mass\", \"Muon_mass[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_charge\", \"Muon_charge[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_pdgId\", \"Muon_pdgId[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pt\", \"Electron_pt[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_eta\", \"Electron_eta[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_phi\", \"Electron_phi[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_mass\", \"Electron_mass[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_charge\", \"Electron_charge[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pdgId\", \"Electron_pdgId[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedLepton_pt\", \"Concatenate(IsolatedMuon_pt, IsolatedElectron_pt)\")\\\n",
    "                .Define(\"IsolatedLepton_eta\", \"Concatenate(IsolatedMuon_eta, IsolatedElectron_eta)\")\\\n",
    "                .Define(\"IsolatedLepton_phi\", \"Concatenate(IsolatedMuon_phi, IsolatedElectron_phi)\")\\\n",
    "                .Define(\"IsolatedLepton_mass\", \"Concatenate(IsolatedMuon_mass, IsolatedElectron_mass)\")\\\n",
    "                .Define(\"IsolatedLepton_charge\", \"Concatenate(IsolatedMuon_charge, IsolatedElectron_charge)\")\\\n",
    "                .Define(\"IsolatedLepton_pdgid\", \"Concatenate(IsolatedMuon_pdgId, IsolatedElectron_pdgId)\")\\\n",
    "                .Define(\"METBeforeMETCut\", \"MET_pt\")\n",
    "\n",
    "            rdfIsolatedElectronNoHighWeights[sample] = rdfPassedIsolatedLeptonTrigger[sample].Filter(\"genWeight < 1000 && Sum(leading_isolated_electron_mask) == 1 && Sum(leading_isolated_muon_mask) == 0\", \"Exactly one isolated electron and exactly zero isolated muon\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_pt\", \"Electron_pt[leading_isolated_electron_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_eta\", \"Electron_eta[leading_isolated_electron_mask].at(0, -10)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_phi\", \"Electron_phi[leading_isolated_electron_mask].at(0, -5)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_mass\", \"Electron_mass[leading_isolated_electron_mask].at(0, -2.71)\")\\\n",
    "                .Define(\"LeadingIsolatedElectron_charge\", \"Electron_charge[leading_isolated_electron_mask].at(0, -5)\")\\\n",
    "                .Define(\"IsolatedMuon_pt\", \"Muon_pt[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_eta\", \"Muon_eta[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_phi\", \"Muon_phi[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_mass\", \"Muon_mass[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_charge\", \"Muon_charge[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedMuon_pdgId\", \"Muon_pdgId[leading_isolated_muon_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pt\", \"Electron_pt[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_eta\", \"Electron_eta[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_phi\", \"Electron_phi[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_mass\", \"Electron_mass[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_charge\", \"Electron_charge[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedElectron_pdgId\", \"Electron_pdgId[leading_isolated_electron_mask]\")\\\n",
    "                .Define(\"IsolatedLepton_pt\", \"Concatenate(IsolatedMuon_pt, IsolatedElectron_pt)\")\\\n",
    "                .Define(\"IsolatedLepton_eta\", \"Concatenate(IsolatedMuon_eta, IsolatedElectron_eta)\")\\\n",
    "                .Define(\"IsolatedLepton_phi\", \"Concatenate(IsolatedMuon_phi, IsolatedElectron_phi)\")\\\n",
    "                .Define(\"IsolatedLepton_mass\", \"Concatenate(IsolatedMuon_mass, IsolatedElectron_mass)\")\\\n",
    "                .Define(\"IsolatedLepton_charge\", \"Concatenate(IsolatedMuon_charge, IsolatedElectron_charge)\")\\\n",
    "                .Define(\"IsolatedLepton_pdgid\", \"Concatenate(IsolatedMuon_pdgId, IsolatedElectron_pdgId)\")\\\n",
    "                .Define(\"METBeforeMETCut\", \"MET_pt\")\n",
    "\n",
    "        rdfIsolatedMuonAfterMETCut[sample] = rdfIsolatedMuonNoHighWeights[sample].Filter(\"MET_pt > 30\", \"Muon MET Greater than 30 GeV\")\\\n",
    "            .Define(\"METAfterMETCut\", \"MET_pt\")\\\n",
    "            .Define(\"jet_mask\", \"ROOT::VecOps::RVec<Int_t> jmask = (Jet_pt >= 30 && abs(Jet_eta) <= 2.5 && Jet_jetId >= 2); \"\\\n",
    "                        \"for(int i=0; i < IsolatedLepton_pt.size(); ++i){\"\\\n",
    "                            \"ROOT::VecOps::RVec<Float_t> dr;\"\\\n",
    "                            \"for(int j=0; j < jmask.size(); ++j){\"\\\n",
    "                                \"dr.push_back(ROOT::VecOps::DeltaR(Jet_eta.at(j), IsolatedLepton_eta.at(i), Jet_phi.at(j), IsolatedLepton_phi.at(i)));}\"\\\n",
    "                                \"jmask = jmask && dr >= 0.4;\"\\\n",
    "                                \"dr.clear();}\"\\\n",
    "                        \"return jmask;\")\\\n",
    "            .Define(\"jpsi_mu_candidate_mask\", JPsiCandidateMask)\\\n",
    "            .Define(\"Num_Jets\", \"Jet_pt[jet_mask].size()\")\\\n",
    "            .Define(\"Num_JPsi_Muons\", \"Muon_pt[jpsi_mu_candidate_mask].size()\")\n",
    "#             .Define(\"jpsi_muon_positive_candidate_mask\", JPsiMuonPositiveCandidateMask)\\\n",
    "#             .Define(\"jpsi_muon_negative_candidate_mask\", JPsiMuonNegativeCandidateMask)\\\n",
    "#             .Define(\"leading_isolated_muon_mask_pfisoid_medium_mask\", LeadingIsolatedMuonMaskPfIsoMedium)\\\n",
    "#             .Define(\"leading_isolated_muon_mask_muon_id_medium_iso_tight\", LeadingIsolatedMuonMaskMuonIdMediumIsoTight)\\\n",
    "#             .Define(\"leading_isolated_muon_mask_muon_id_loose_iso_tight\", LeadingIsolatedMuonMaskMuonIdLooseIsoIdTight)\\\n",
    "#             .Define(\"leading_isolated_muon_mask_muon_id_medium_iso_medium\", LeadingIsolatedMuonMaskMuonIdMediumIsoIdMedium)\\\n",
    "#             .Define(\"leading_isolated_muon_mask_muon_id_loose_iso_medium\", LeadingIsolatedMuonMaskMuonIdLooseIsoIdMedium)\\\n",
    "#             .Define(\"jpsi_muon_positive_candidate_peak_only_mask\", JPsiMuonPositiveCandidatePeakOnlyMask)\\\n",
    "#             .Define(\"jpsi_muon_negative_candidate_peak_only_mask\", JPsiMuonNegativeCandidatePeakOnlyMask)\\\n",
    "#             .Define(\"jpsi_muon_positive_candidate_pfisoid_medium_mask\", JPsiMuonPositiveCandidatePfIsoMediumMask)\\\n",
    "#             .Define(\"jpsi_muon_negative_candidate_pfisoid_medium_mask\", JPsiMuonNegativeCandidatePfIsoMediumMask)\\\n",
    "\n",
    "            \n",
    "        \n",
    "        rdfIsolatedElectronAfterMETCut[sample] = rdfIsolatedElectronNoHighWeights[sample].Filter(\"MET_pt > 30\", \"Electron MET Greater than 30 GeV\")\\\n",
    "            .Define(\"METAfterMETCut\", \"MET_pt\")\n",
    "        \n",
    "    return rdfIsolatedMuonAfterMETCut, rdfIsolatedElectronAfterMETCut"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "54881930",
   "metadata": {},
   "outputs": [],
   "source": [
    "rdfIsolatedMuonAfterMETCut, rdfIsolatedElectronAfterMETCut = IsolatedLeptonSelection()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0ea54eba",
   "metadata": {},
   "outputs": [],
   "source": [
    "def JetSelection():\n",
    "\n",
    "    for sample in dictOfListOfFiles:\n",
    "        \n",
    "        rdfJetAndIsolatedLeptonFiltered[sample] = rdfIsolatedMuonAfterMETCut[sample].Filter(\"Num_Jets >= 2\", \"At Least Two Jets\")\\\n",
    "            .Define(\"SJet1_pt\", \"Jet_pt[jet_mask].size() > 0 ? Jet_pt[jet_mask].at(0) : -500\")\\\n",
    "            .Define(\"SJet2_pt\", \"Jet_pt[jet_mask].size() > 1 ? Jet_pt[jet_mask].at(1) : -500\")\\\n",
    "            .Define(\"SJet1_eta\", \"Jet_eta[jet_mask].size() > 0 ? Jet_eta[jet_mask].at(0) : 500\")\\\n",
    "            .Define(\"SJet2_eta\", \"Jet_eta[jet_mask].size() > 1 ? Jet_eta[jet_mask].at(1) : 500\")\\\n",
    "            .Define(\"SJet1_phi\", \"Jet_phi[jet_mask].size() > 0 ? Jet_phi[jet_mask].at(0) : 500\")\\\n",
    "            .Define(\"SJet2_phi\", \"Jet_phi[jet_mask].size() > 1 ? Jet_phi[jet_mask].at(1) : 500\")\\\n",
    "            .Define(\"MTofMETandMu\", \"FTA::transverseMassMET(IsolatedMuon_pt, IsolatedMuon_phi, IsolatedMuon_mass, MET_pt, MET_phi)\")\\\n",
    "            .Define(\"Ht\", \"Sum(Jet_pt[jet_mask])\")\n",
    "        \n",
    "    return rdfJetAndIsolatedLeptonFiltered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4c8da657",
   "metadata": {},
   "outputs": [],
   "source": [
    "rdfJetAndIsolatedLeptonFiltered = JetSelection()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "30a9ba45",
   "metadata": {},
   "outputs": [],
   "source": [
    "def JPsiSelection():\n",
    "\n",
    "    for sample in dictOfListOfFiles:\n",
    "\n",
    "        rdfJPsiMuons[sample] = rdfJetAndIsolatedLeptonFiltered[sample].Filter(\"Sum(jpsi_mu_candidate_mask) >= 2\", \"At Least Two JPsi Candidates\")\\\n",
    "            .Define(\"JPsiCandidate_pt\", \"Muon_pt[jpsi_mu_candidate_mask]\")\\\n",
    "            .Define(\"JPsiCandidate_eta\", \"Muon_eta[jpsi_mu_candidate_mask]\")\\\n",
    "            .Define(\"JPsiCandidate_phi\", \"Muon_phi[jpsi_mu_candidate_mask]\")\\\n",
    "            .Define(\"JPsiCandidate_mass\", \"Muon_mass[jpsi_mu_candidate_mask]\")\\\n",
    "            .Define(\"JPsiCandidate_charge\", \"Muon_charge[jpsi_mu_candidate_mask]\")\\\n",
    "            .Define(\"InvariantMassJPsiMuons\", \"std::cout << rdfentry_ << std::endl; auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.JPsiMuonInvariantMassCalculator();\")\\\n",
    "            .Define(\"InvariantMassJPsiMuonsAndIsolatedMuons\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.IsolatedMuonAndJPsiInPeakCalculator();\")\\\n",
    "            .Define(\"DeltaEtaBetweenIsolatedAndJPsiMuon\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaEtaBetweenIsolatedAndJPsiMuonCalculator();\")\\\n",
    "            .Define(\"DeltaPhiBetweenIsolatedAndJPsiMuon\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaPhiBetweenIsolatedAndJPsiMuonCalculator();\")\\\n",
    "            .Define(\"DeltaRBetweenIsolatedAndJPsiMuon\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaRBetweenIsolatedAndJPsiMuonCalculator();\")\\\n",
    "            .Define(\"JPsi_pt\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.ReturnJPsiPt();\")\\\n",
    "            .Define(\"JPsi_eta\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.ReturnJPsiEta();\")\\\n",
    "            .Define(\"JPsi_phi\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.ReturnJPsiPhi();\")\\\n",
    "            .Define(\"DeltaEtaBetweenJPsiMuons\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.DeltaEtaBetweenJPsiMuonsCalculator();\")\\\n",
    "            .Define(\"DeltaPhiBetweenJPsiMuons\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.DeltaPhiBetweenJPsiMuonsCalculator();\")\\\n",
    "            .Define(\"DeltaRBetweenJPsiMuons\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.DeltaRBetweenJPsiMuonsCalculator();\")\\\n",
    "            .Define(\"DeltaRBetweenJPsiMuonsInPeak\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge); return c.ReturnDeltaRBetweenJPsiMuonsInPeak();\")\\\n",
    "            .Define(\"DeltaEtaBetweenIsolatedMuonAndJPsi\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaEtaBetweenIsolatedMuonAndJPsiCalculator();\")\\\n",
    "            .Define(\"DeltaPhiBetweenIsolatedMuonAndJPsi\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaPhiBetweenIsolatedMuonAndJPsiCalculator();\")\\\n",
    "            .Define(\"DeltaRBetweenIsolatedMuonAndJPsi\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaRBetweenIsolatedMuonAndJPsiCalculator();\")\\\n",
    "            .Define(\"JPsiMuon_pt\", \"Muon_pt[jpsi_mu_candidate_mask]\")\\\n",
    "            .Define(\"JPsiMuon_pfRelIso03_all\", \"Muon_pfRelIso03_all[jpsi_mu_candidate_mask]\")\\\n",
    "            .Define(\"JPsiMuon_pfIsoid\", \"Muon_pfIsoId[jpsi_mu_candidate_mask]\")\\\n",
    "            .Define(\"IsolatedMuonsInRangeInvariantMassPlot_pfRelIso03_all\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge, Muon_pfRelIso03_all[leading_isolated_muon_mask], Muon_pfRelIso03_all[jpsi_mu_candidate_mask]); return c.ReturnMuonPfRelIso03AllForIsolatedMuonInInvariantMass();\")\\\n",
    "            .Define(\"JPsiMuonsInRangeInvariantMassPlot_pfRelIso03_all\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge, Muon_pfRelIso03_all[leading_isolated_muon_mask], Muon_pfRelIso03_all[jpsi_mu_candidate_mask]); return c.ReturnMuonPfRelIso03AllForJPsiMuonsInInvariantMass();\")\\\n",
    "            .Define(\"JPsiMassesInRangeInvariantMassPlot\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.ReturnJPsiMassforJPsiInInvariantMass()\")\\\n",
    "            .Define(\"IsolatedMuonPtAtLowDeltaR\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.ReturnLowDeltaRIsolatedMuonAndJPsiMuonPt(false)\")\\\n",
    "            .Define(\"JPsiMuonPtAtLowDeltaR\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.ReturnLowDeltaRIsolatedMuonAndJPsiMuonPt(true)\")\\\n",
    "            .Define(\"JPsiMassInPeak\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.ReturnJPsiInPeakMass();\")\\\n",
    "            .Define(\"DeltaEtaForJPsiMuonsInPeak\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.ReturnDeltaEtaBetweenJPsiMuonsInPeak();\")\\\n",
    "            .Define(\"DeltaPhiForJPsiMuonsInPeak\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.ReturnDeltaPhiBetweenJPsiMuonsInPeak();\")\\\n",
    "            .Define(\"DeltaRForJPsiMuonsInPeak\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.ReturnDeltaRBetweenJPsiMuonsInPeak();\")\\\n",
    "            .Define(\"JPsiMuonsChargeInPeak\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.ReturnJPsiMuonsInPeakCharge();\")\\\n",
    "            .Define(\"JPsiPtWithMuonInPeak\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.ReturnJPsiInPeakPt();\")\\\n",
    "            .Define(\"JPsiMuonPositivePt\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.ReturnJPsiMuonPtInPeak(true);\")\\\n",
    "            .Define(\"JPsiMuonNegativePt\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.ReturnJPsiMuonPtInPeak(false);\")\\\n",
    "            .Define(\"JPsiMuonIsolationInPeak\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge, Muon_pfRelIso03_all[leading_isolated_muon_mask], Muon_pfRelIso03_all[jpsi_mu_candidate_mask]); return c.ReturnJPsiMuonInPeakPfRelIso03All();\")\\\n",
    "            .Define(\"TopMassInPeak\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.ReturnTopQuarkInPeakMass();\")\\\n",
    "            .Define(\"DeltaEtaBetweenIsolatedMuonAndJPsiInPeak\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaEtaBetweenIsolatedMuonAndJPsiInPeakCalculator();\")\\\n",
    "            .Define(\"DeltaPhiBetweenIsolatedMuonAndJPsiInPeak\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaPhiBetweenIsolatedMuonAndJPsiInPeakCalculator();\")\\\n",
    "            .Define(\"DeltaRBetweenIsolatedMuonAndJPsiInPeak\", \"auto c = MuonAndJPsiStatisticsAndKinematics(JPsiCandidate_pt, JPsiCandidate_eta, JPsiCandidate_phi, JPsiCandidate_mass, JPsiCandidate_charge, IsolatedMuon_pt, IsolatedMuon_eta, IsolatedMuon_phi, IsolatedMuon_mass, IsolatedMuon_charge); return c.DeltaRBetweenIsolatedMuonAndJPsiInPeakCalculator();\")\\\n",
    "            .Define(\"IsolatedMuon_pfRelIso03_all\", \"Muon_pfRelIso03_all[leading_isolated_muon_mask]\")\n",
    "#             .Define(\"IsolatedMuon_pfRelIso03_chg\", \"Muon_pfRelIso03_chg[leading_isolated_muon_mask]\")\\\n",
    "#             .Define(\"JPsiMuon_pfRelIso03_all\", \"Muon_pfRelIso03_all[jpsi_mu_candidate_mask]\")\\\n",
    "#             .Define(\"JPsiMuonPositive_pfRelIso03_all\", \"Muon_pfRelIso03_all[jpsi_muon_positive_candidate_mask]\")\\\n",
    "#             .Define(\"JPsiMuonPositive_pfRelIso03_chg\", \"Muon_pfRelIso03_chg[jpsi_muon_positive_candidate_mask]\")\\\n",
    "#             .Define(\"JPsiMuonNegative_pfRelIso03_all\", \"Muon_pfRelIso03_all[jpsi_muon_negative_candidate_mask]\")\\\n",
    "#             .Define(\"JPsiMuonNegative_pfRelIso03_chg\", \"Muon_pfRelIso03_chg[jpsi_muon_negative_candidate_mask]\")\\\n",
    "#             .Define(\"IsolatedMuon_pfRelIso03_all_mediumID\", \"Muon_pfRelIso03_all[leading_isolated_muon_mask_pfisoid_medium_mask]\")\\\n",
    "#             .Define(\"IsolatedMuon_pfRelIso03_chg_mediumID\", \"Muon_pfRelIso03_chg[leading_isolated_muon_mask_pfisoid_medium_mask]\")\\\n",
    "#             .Define(\"JPsiMuonPositive_pfRelIso03_all_mediumID\", \"Muon_pfRelIso03_all[jpsi_muon_positive_candidate_pfisoid_medium_mask]\")\\\n",
    "#             .Define(\"JPsiMuonPositive_pfRelIso03_chg_mediumID\", \"Muon_pfRelIso03_chg[jpsi_muon_positive_candidate_pfisoid_medium_mask]\")\\\n",
    "#             .Define(\"JPsiMuonNegative_pfRelIso03_all_mediumID\", \"Muon_pfRelIso03_all[jpsi_muon_negative_candidate_pfisoid_medium_mask]\")\\\n",
    "#             .Define(\"JPsiMuonNegative_pfRelIso03_chg_mediumID\", \"Muon_pfRelIso03_chg[jpsi_muon_negative_candidate_pfisoid_medium_mask]\")\\\n",
    "#             .Define(\"JPsiMuonPositive_peak_only_pfRelIso03_all\", \"Muon_pfRelIso03_all[jpsi_muon_positive_candidate_peak_only_mask]\")\\\n",
    "#             .Define(\"JPsiMuonPositive_peak_only_pfRelIso03_chg\", \"Muon_pfRelIso03_chg[jpsi_muon_positive_candidate_peak_only_mask]\")\\\n",
    "#             .Define(\"JPsiMuonNegative_peak_only_pfRelIso03_all\", \"Muon_pfRelIso03_all[jpsi_muon_negative_candidate_peak_only_mask]\")\\\n",
    "#             .Define(\"JPsiMuonNegative_peak_only_pfRelIso03_chg\", \"Muon_pfRelIso03_chg[jpsi_muon_negative_candidate_peak_only_mask]\")\n",
    "\n",
    "        \n",
    "    return rdfJPsiMuons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bf6a961e",
   "metadata": {},
   "outputs": [
    {
     "ename": "runtime_error",
     "evalue": "Template method resolution failed:\n  ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>::Define(basic_string_view<char,char_traits<char> > name, basic_string_view<char,char_traits<char> > expression) =>\n    runtime_error: \nRDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of the crash\n All RDF objects that have not run an event loop yet should be considered in an invalid state.\n\n  ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>::Define(basic_string_view<char,char_traits<char> > name, basic_string_view<char,char_traits<char> > expression) =>\n    runtime_error: \nRDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of the crash\n All RDF objects that have not run an event loop yet should be considered in an invalid state.\n\n  ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>::Define(basic_string_view<char,char_traits<char> > name, basic_string_view<char,char_traits<char> > expression) =>\n    runtime_error: \nRDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of the crash\n All RDF objects that have not run an event loop yet should be considered in an invalid state.\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mruntime_error\u001b[0m                             Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_2384/590251768.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrdfJPsiMuon\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mJPsiSelection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/tmp/ipykernel_2384/2582089166.py\u001b[0m in \u001b[0;36mJPsiSelection\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msample\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdictOfListOfFiles\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m         \u001b[0mrdfJPsiMuons\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrdfJetAndIsolatedLeptonFiltered\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Sum(jpsi_mu_candidate_mask) >= 2\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"At Least Two JPsi Candidates\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m             \u001b[0;34m.\u001b[0m\u001b[0mDefine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"JPsiCandidate_pt\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Muon_pt[jpsi_mu_candidate_mask]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m             \u001b[0;34m.\u001b[0m\u001b[0mDefine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"JPsiCandidate_eta\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Muon_eta[jpsi_mu_candidate_mask]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mruntime_error\u001b[0m: Template method resolution failed:\n  ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>::Define(basic_string_view<char,char_traits<char> > name, basic_string_view<char,char_traits<char> > expression) =>\n    runtime_error: \nRDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of the crash\n All RDF objects that have not run an event loop yet should be considered in an invalid state.\n\n  ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>::Define(basic_string_view<char,char_traits<char> > name, basic_string_view<char,char_traits<char> > expression) =>\n    runtime_error: \nRDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of the crash\n All RDF objects that have not run an event loop yet should be considered in an invalid state.\n\n  ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>::Define(basic_string_view<char,char_traits<char> > name, basic_string_view<char,char_traits<char> > expression) =>\n    runtime_error: \nRDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of the crash\n All RDF objects that have not run an event loop yet should be considered in an invalid state.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "input_line_135:2:246: error: use of undeclared identifier 'MuonAndJPsiStatisticsAndKinematics'\n",
      "auto lambda32 = [](const ULong64_t var0, ROOT::VecOps::RVec<float>& var1, ROOT::VecOps::RVec<float>& var2, ROOT::VecOps::RVec<float>& var3, ROOT::VecOps::RVec<float>& var4, ROOT::VecOps::RVec<int>& var5){std::cout << var0 << std::endl; auto c = MuonAndJPsiStatisticsAndKinematics(var1, var2, var3, var4, var5); return c.JPsiMuonInvariantMassCalculator();\n",
      "                                                                                                                                                                                                                                                     ^\n",
      "input_line_139:2:246: error: use of undeclared identifier 'MuonAndJPsiStatisticsAndKinematics'\n",
      "auto lambda32 = [](const ULong64_t var0, ROOT::VecOps::RVec<float>& var1, ROOT::VecOps::RVec<float>& var2, ROOT::VecOps::RVec<float>& var3, ROOT::VecOps::RVec<float>& var4, ROOT::VecOps::RVec<int>& var5){std::cout << var0 << std::endl; auto c = MuonAndJPsiStatisticsAndKinematics(var1, var2, var3, var4, var5); return c.JPsiMuonInvariantMassCalculator();\n",
      "                                                                                                                                                                                                                                                     ^\n",
      "input_line_140:2:246: error: use of undeclared identifier 'MuonAndJPsiStatisticsAndKinematics'\n",
      "auto lambda32 = [](const ULong64_t var0, ROOT::VecOps::RVec<float>& var1, ROOT::VecOps::RVec<float>& var2, ROOT::VecOps::RVec<float>& var3, ROOT::VecOps::RVec<float>& var4, ROOT::VecOps::RVec<int>& var5){std::cout << var0 << std::endl; auto c = MuonAndJPsiStatisticsAndKinematics(var1, var2, var3, var4, var5); return c.JPsiMuonInvariantMassCalculator();\n",
      "                                                                                                                                                                                                                                                     ^\n"
     ]
    }
   ],
   "source": [
    "rdfJPsiMuon = JPsiSelection()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59716c33",
   "metadata": {},
   "outputs": [],
   "source": [
    "# def FurtherCuts():\n",
    "    \n",
    "#     for sample in dictOfListOfFiles:\n",
    "        \n",
    "#         rdfRemainingIsolatedMuonMuonIdMediumIsoIdTight[sample] = rdfJPsiMuons[sample].Filter(\"Sum(leading_isolated_muon_mask_muon_id_medium_iso_tight) >= 1\", \"At Least One Further Muon - Id Medium Iso Id Tight\")\\\n",
    "#             .Define(\"FurtherMuonMediumTight_pt\", \"Muon_pt[leading_isolated_muon_mask_muon_id_medium_iso_tight]\")\\\n",
    "#             .Define(\"FurtherMuonMediumTight_pfRelIso03_all\", \"Muon_pfRelIso03_all[leading_isolated_muon_mask_muon_id_medium_iso_tight]\")\\\n",
    "#             .Define(\"FurtherMuonMediumTight_pfIsoid\", \"Muon_pfIsoId[leading_isolated_muon_mask_muon_id_medium_iso_tight]\")\n",
    "\n",
    "#         rdfRemainingIsolatedMuonMuonIdLooseIsoIdTight[sample] = rdfJPsiMuons[sample].Filter(\"Sum(leading_isolated_muon_mask_muon_id_loose_iso_tight) >= 1\", \"At Least One Further Muon - Id Loose Iso Id Tight\")\\\n",
    "#             .Define(\"FurtherMuonLooseTight_pt\", \"Muon_pt[leading_isolated_muon_mask_muon_id_loose_iso_tight]\")\\\n",
    "#             .Define(\"FurtherMuonLooseTight_pfRelIso03_all\", \"Muon_pfRelIso03_all[leading_isolated_muon_mask_muon_id_loose_iso_tight]\")\\\n",
    "#             .Define(\"FurtherMuonLooseTight_pfIsoid\", \"Muon_pfIsoId[leading_isolated_muon_mask_muon_id_loose_iso_tight]\")\n",
    "\n",
    "#         rdfRemainingIsolatedMuonMuonIdMediumIsoIdMedium[sample] = rdfJPsiMuons[sample].Filter(\"Sum(leading_isolated_muon_mask_muon_id_medium_iso_medium) >= 1\", \"At Least One Further Muon - Id Medium Iso Id Medium\")\\\n",
    "#             .Define(\"FurtherMuonMediumMedium_pt\", \"Muon_pt[leading_isolated_muon_mask_muon_id_medium_iso_medium]\")\\\n",
    "#             .Define(\"FurtherMuonMediumMedium_pfRelIso03_all\", \"Muon_pfRelIso03_all[leading_isolated_muon_mask_muon_id_medium_iso_medium]\")\\\n",
    "#             .Define(\"FurtherMuonMediumMedium_pfIsoid\", \"Muon_pfIsoId[leading_isolated_muon_mask_muon_id_medium_iso_medium]\")\n",
    "\n",
    "#         rdfRemainingIsolatedMuonMuonIdLooseIsoIdMedium[sample] = rdfJPsiMuons[sample].Filter(\"Sum(leading_isolated_muon_mask_muon_id_loose_iso_medium) >= 1\", \"At Least One Further Muon - Id Loose Iso Id Medium\")\\\n",
    "#             .Define(\"FurtherMuonLooseMedium_pt\", \"Muon_pt[leading_isolated_muon_mask_muon_id_loose_iso_medium]\")\\\n",
    "#             .Define(\"FurtherMuonLooseMedium_pfRelIso03_all\", \"Muon_pfRelIso03_all[leading_isolated_muon_mask_muon_id_loose_iso_medium]\")\\\n",
    "#             .Define(\"FurtherMuonLooseMedium_pfIsoid\", \"Muon_pfIsoId[leading_isolated_muon_mask_muon_id_loose_iso_medium]\")\n",
    "    \n",
    "#     return rdfRemainingIsolatedMuonMuonIdMediumIsoIdTight, rdfRemainingIsolatedMuonMuonIdLooseIsoIdTight, rdfRemainingIsolatedMuonMuonIdMediumIsoIdMedium, rdfRemainingIsolatedMuonMuonIdLooseIsoIdMedium"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e85201e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# rdfRemainingIsolatedMuonMuonIdMediumIsoIdTight, rdfRemainingIsolatedMuonMuonIdLooseIsoIdTight, rdfRemainingIsolatedMuonMuonIdMediumIsoIdMedium, rdfRemainingIsolatedMuonMuonIdLooseIsoIdMedium = FurtherCuts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "352c067b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make this block a function with the inputs as the nodes we want to attach histograms to (2-17-22)\n",
    "# rdfWithFourMomentum needs to be changed to whatever our final RDataFrame is (5-23-22)\n",
    "\n",
    "for sample in dictOfListOfFiles:\n",
    "    \n",
    "    if sample not in hist.keys():\n",
    "        hist[sample] = {}\n",
    "        report[sample] = rdf[sample].Report()\n",
    "        #nparraynode[sample] = rdfLeadingMuon[sample]\n",
    "        \n",
    "    if sample == 'Data':\n",
    "        \n",
    "        hist['Data'][\"leading_isolated_muon_pt_initial\"] = rdfIsolatedMuonNoHighWeights['Data'].Histo1D((\"leading_isolated_muon_pt_initial\",\"Leading Isolated Muon Transverse Momentum (One Muon, No Electrons); Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\")\n",
    "        hist['Data'][\"leading_isolated_muon_eta_initial\"] = rdfIsolatedMuonNoHighWeights['Data'].Histo1D((\"leading_isolated_muon_eta_initial\", \"Leading Isolated Muon Pseudorapidity (One Muon, No Electrons); Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\")\n",
    "        hist['Data'][\"leading_isolated_muon_phi_initial\"] = rdfIsolatedMuonNoHighWeights['Data'].Histo1D((\"leading_isolated_muon_phi_initial\", \"Leading Isolated Muon Angle (One Muon, No Electrons); Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\")\n",
    "        hist['Data'][\"leading_isolated_muon_mass_initial\"] = rdfIsolatedMuonNoHighWeights['Data'].Histo1D((\"leading_isolated_muon_mass_initial\", \"Leading Isolated Muon Mass (One Muon, No Electrons); Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\")\n",
    "        hist['Data'][\"leading_isolated_muon_charge_initial\"] = rdfIsolatedMuonNoHighWeights['Data'].Histo1D((\"leading_isolated_muon_charge_initial\", \"Leading Isolated Muon Charge (One Muon, No Electrons); Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\")\n",
    "        hist['Data'][\"leading_isolated_electron_pt_initial\"] = rdfIsolatedElectronNoHighWeights['Data'].Histo1D((\"leading_isolated_electron_pt_initial\",\"Leading Isolated Electron Transverse Momentum (One Electron, No Muons); Pt (GeV);Events\",100,20,220),\"LeadingIsolatedElectron_pt\")\n",
    "        hist['Data'][\"leading_isolated_electron_eta_initial\"] = rdfIsolatedElectronNoHighWeights['Data'].Histo1D((\"leading_isolated_electron_eta_initial\", \"Leading Isolated Electron Pseudorapidity (One Electron, No Muons); Eta; Events\",100,-3,3),\"LeadingIsolatedElectron_eta\")\n",
    "        hist['Data'][\"leading_isolated_electron_phi_initial\"] = rdfIsolatedElectronNoHighWeights['Data'].Histo1D((\"leading_isolated_electron_phi_initial\", \"Leading Isolated Electron Angle (One Electron, No Muons); Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedElectron_phi\")\n",
    "        hist['Data'][\"leading_isolated_electron_mass_initial\"] = rdfIsolatedElectronNoHighWeights['Data'].Histo1D((\"leading_isolated_electron_mass_initial\", \"Leading Isolated Electron Mass (One Electron, No Muons); Mass(Gev); Events\",10,.0001,.001),\"LeadingIsolatedElectron_mass\")\n",
    "        hist['Data'][\"leading_isolated_electron_charge_initial\"] = rdfIsolatedElectronNoHighWeights['Data'].Histo1D((\"leading_isolated_electron_charge_initial\", \"Leading Isolated Electron Charge (One Electron, No Muons); Charge; Events\",5,-2,2),\"LeadingIsolatedElectron_charge\")\n",
    "        \n",
    "        hist['Data'][\"met_before_met_cut\"] = rdfIsolatedMuonNoHighWeights['Data'].Histo1D((\"met_before_met_cut\", \"MET Before MET Cut; Pt (GeV); Events\",100,0,250),\"METBeforeMETCut\")\n",
    "        hist['Data'][\"met_after_met_cut\"] = rdfIsolatedMuonAfterMETCut['Data'].Histo1D((\"met_after_met_cut\", \"MET After MET Cut; Pt (GeV); Events\",100,0,250),\"METAfterMETCut\")\n",
    "        hist['Data'][\"leading_isolated_muon_pt_after_met_cut\"] = rdfIsolatedMuonAfterMETCut['Data'].Histo1D((\"leading_isolated_muon_pt_after_met_cut\",\"Leading Isolated Muon Transverse Momentum After MET Cut; Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\")\n",
    "        hist['Data'][\"leading_isolated_muon_eta_after_met_cut\"] = rdfIsolatedMuonAfterMETCut['Data'].Histo1D((\"leading_isolated_muon_eta_after_met_cut\", \"Leading Isolated Muon Pseudorapidity After MET Cut; Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\")\n",
    "        hist['Data'][\"leading_isolated_muon_phi_after_met_cut\"] = rdfIsolatedMuonAfterMETCut['Data'].Histo1D((\"leading_isolated_muon_phi_after_met_cut\", \"Leading Isolated Muon Angle After MET Cut; Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\")\n",
    "        hist['Data'][\"leading_isolated_muon_mass_after_met_cut\"] = rdfIsolatedMuonAfterMETCut['Data'].Histo1D((\"leading_isolated_muon_mass_after_met_cut\", \"Leading Isolated Muon Mass After MET Cut; Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\")\n",
    "        hist['Data'][\"leading_isolated_muon_charge_after_met_cut\"] = rdfIsolatedMuonAfterMETCut['Data'].Histo1D((\"leading_isolated_muon_charge_after_met_cut\", \"Leading Isolated Muon Charge After MET Cut; Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\")\n",
    "        hist['Data'][\"leading_isolated_electron_pt_after_met_cut\"] = rdfIsolatedElectronAfterMETCut['Data'].Histo1D((\"leading_isolated_electron_pt_after_met_cut\",\"Leading Isolated Electron Transverse Momentum After MET Cut; Pt (GeV);Events\",100,20,220),\"LeadingIsolatedElectron_pt\")\n",
    "        hist['Data'][\"leading_isolated_electron_eta_after_met_cut\"] = rdfIsolatedElectronAfterMETCut['Data'].Histo1D((\"leading_isolated_electron_eta_after_met_cut\", \"Leading Isolated Electron Pseudorapidity After MET Cut; Eta; Events\",100,-3,3),\"LeadingIsolatedElectron_eta\")\n",
    "        hist['Data'][\"leading_isolated_electron_phi_after_met_cut\"] = rdfIsolatedElectronAfterMETCut['Data'].Histo1D((\"leading_isolated_electron_phi_after_met_cut\", \"Leading Isolated Electron Angle After MET Cut; Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedElectron_phi\")\n",
    "        hist['Data'][\"leading_isolated_electron_mass_after_met_cut\"] = rdfIsolatedElectronAfterMETCut['Data'].Histo1D((\"leading_isolated_electron_mass_after_met_cut\", \"Leading Isolated Electron Mass After MET Cut; Mass(Gev); Events\",10,.0001,.001),\"LeadingIsolatedElectron_mass\")\n",
    "        hist['Data'][\"leading_isolated_electron_charge_after_met_cut\"] = rdfIsolatedElectronAfterMETCut['Data'].Histo1D((\"leading_isolated_electron_charge_after_met_cut\", \"Leading Isolated Electron Charge After MET Cut; Charge; Events\",5,-2,2),\"LeadingIsolatedElectron_charge\")\n",
    "        \n",
    "        hist['Data'][\"number_of_jets_initial\"] = rdfIsolatedMuonAfterMETCut['Data'].Histo1D((\"number_of_jets_initial\", \"Number of Jets Before Jet Cut; Number Of Jets; Events\", 20, 0, 20), \"Num_Jets\")\n",
    "        hist['Data'][\"number_of_jets\"] = rdfJPsiMuons['Data'].Histo1D((\"number_of_jets\", \"Number Of Jets; Number Of Jets; Events\", 20, 0, 20), \"Num_Jets\")\n",
    "        hist['Data'][\"leading_isolated_muon_pt_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered['Data'].Histo1D((\"leading_isolated_muon_pt_after_jet_cut\",\"Leading Isolated Muon Transverse Momentum After Jet Cut; Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\")\n",
    "        hist['Data'][\"leading_isolated_muon_eta_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered['Data'].Histo1D((\"leading_isolated_muon_eta_after_jet_cut\", \"Leading Isolated Muon Pseudorapidity After Jet Cut; Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\")\n",
    "        hist['Data'][\"leading_isolated_muon_phi_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered['Data'].Histo1D((\"leading_isolated_muon_phi_after_jet_cut\", \"Leading Isolated Muon Angle After Jet Cut; Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\")\n",
    "        hist['Data'][\"leading_isolated_muon_mass_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered['Data'].Histo1D((\"leading_isolated_muon_mass_after_jet_cut\", \"Leading Isolated Muon Mass After Jet Cut; Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\")\n",
    "        hist['Data'][\"leading_isolated_muon_charge_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered['Data'].Histo1D((\"leading_isolated_muon_charge_after_jet_cut\", \"Leading Isolated Muon Charge After Jet Cut; Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\")\n",
    "        \n",
    "        hist['Data'][\"number_of_jpsi_muons_initial\"] = rdfJetAndIsolatedLeptonFiltered['Data'].Histo1D((\"number_of_jpsi_muons_initial\", \"Number of JPsi Muons Before JPsi Muon Cut; Number of Muons; Events\",10,0,9), \"Num_JPsi_Muons\")\n",
    "        hist['Data'][\"number_of_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"number_of_jpsi_muons\", \"Number of JPsi Muons; Number of Muons; Events\",10,0,9), \"Num_JPsi_Muons\")\n",
    "\n",
    "        \n",
    "        # Final Results\n",
    "        hist['Data'][\"leading_isolated_muon_pt\"] = rdfJPsiMuons['Data'].Histo1D((\"leading_isolated_muon_pt\",\"Leading Isolated Muon Transverse Momentum; Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\")\n",
    "        hist['Data'][\"leading_isolated_muon_eta\"] = rdfJPsiMuons['Data'].Histo1D((\"leading_isolated_muon_eta\", \"Leading Isolated Muon Pseudorapidity; Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\")\n",
    "        hist['Data'][\"leading_isolated_muon_phi\"] = rdfJPsiMuons['Data'].Histo1D((\"leading_isolated_muon_phi\", \"Leading Isolated Muon Angle; Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\")\n",
    "        hist['Data'][\"leading_isolated_muon_mass\"] = rdfJPsiMuons['Data'].Histo1D((\"leading_isolated_muon_mass\", \"Leading Isolated Muon Mass; Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\")\n",
    "        hist['Data'][\"leading_isolated_muon_charge\"] = rdfJPsiMuons['Data'].Histo1D((\"leading_isolated_muon_charge\", \"Leading Isolated Muon Charge; Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\")\n",
    "        hist['Data'][\"isolated_muon_pf_rel_iso_03_all\"] = rdfJPsiMuons['Data'].Histo1D(( \"isolated_muon_pf_rel_iso_03_all\", \"Isolated Muon PfRelIso03_All; Isolated Muon PfRelIso03_All; Events\", 50, 0, .5), \"IsolatedMuon_pfRelIso03_all\")\n",
    "        \n",
    "        hist['Data'][\"jet1_pt\"] = rdfJPsiMuons['Data'].Histo1D((\"jet1_pt\", \"Jet Transverse Momentum for Leading Jet; Pt (GeV); Events\", 100, 20, 200), \"SJet1_pt\")         \n",
    "        hist['Data'][\"jet2_pt\"] = rdfJPsiMuons['Data'].Histo1D((\"jet2_pt\", \"Jet Transverse Momentum for Subleading Jet; Pt (GeV); Events\", 100, 20, 200), \"SJet2_pt\")\n",
    "        hist['Data'][\"jet1_eta\"] = rdfJPsiMuons['Data'].Histo1D((\"jet1_eta\", \"Jet Pseudorapidity for Leading Jet; Eta; Events\", 100, -3, 3), \"SJet1_eta\")\n",
    "        hist['Data'][\"jet2_eta\"] = rdfJPsiMuons['Data'].Histo1D((\"jet2_eta\", \"Jet Pseudorapidity for Subleading Jet; Eta; Events\", 100, -3, 3), \"SJet2_eta\")\n",
    "        hist['Data'][\"jet1_phi\"] = rdfJPsiMuons['Data'].Histo1D((\"jet1_phi\", \"Jet Angle for Leading Jet; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet1_phi\")\n",
    "        hist['Data'][\"jet2_phi\"] = rdfJPsiMuons['Data'].Histo1D((\"jet2_phi\", \"Jet Angle for Subleading Jet; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet2_phi\")\n",
    "        hist['Data'][\"transverse_mass\"] = rdfJPsiMuons['Data'].Histo1D((\"transverse_mass\", \"Transverse Mass; Transverse Mass (GeV); Events\", 150, 0, 150), \"MTofMETandMu\")  \n",
    "        hist['Data'][\"ht\"] = rdfJPsiMuons['Data'].Histo1D((\"ht\", \"Ht; Ht; Events\", 300, 0, 1500), \"Ht\")\n",
    "               \n",
    "        hist['Data'][\"jpsi_muons_pt\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muons_pt\", \"Transverse Momentum for JPsi Muons; Pt; Events\", 150, 0, 50), \"JPsiCandidate_pt\")\n",
    "        hist['Data'][\"jpsi_muons_eta\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muons_eta\", \"Pseudorapidity for JPsi Muons; Eta; Events\", 50, -3, 3), \"JPsiCandidate_eta\")\n",
    "        hist['Data'][\"jpsi_muons_phi\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muons_phi\", \"Angle for JPsi Muons; Phi; Events\", 50, -3.5, 3.5), \"JPsiCandidate_phi\")\n",
    "        hist['Data'][\"jpsi_muons_charge\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muons_charge\", \"Charge of JPsi Muons; Charge; Events\", 5, -2, 2), \"JPsiCandidate_charge\")\n",
    "        hist['Data'][\"invariant_mass_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"invariant_mass_jpsi_muons\", \"Invariant Masses for J/Psi Candidate Muons (Oppositely Charged); Invariant Masses; Events\", 100, .5, 12), \"InvariantMassJPsiMuons\")\n",
    "        hist['Data'][\"invariant_masses_zoomed\"] = rdfJPsiMuons['Data'].Histo1D((\"invariant_masses_zoomed\", \"Invariant Masses for J/Psi Candidate Muons (Oppositely Charged); Invariant Masses; Events\", 50, 2.8, 3.4), \"InvariantMassJPsiMuons\")\n",
    "        hist['Data'][\"invariant_mass_jpsi_muons_and_isolated_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"invariant_mass_jpsi_and_isolated_muons\", \"Invariant Masses for J/Psi Candidate And Isolated Muons (dR < 2); Invariant Masses; Events\", 100, 0, 200), \"InvariantMassJPsiMuonsAndIsolatedMuons\")\n",
    "        hist['Data'][\"delta_eta_between_isolated_and_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_eta_between_isolated_and_jpsi_muons\", \"Delta Eta for Isolated Muon - JPsi Muons; Delta Eta; Events\", 50, 0, 6), \"DeltaEtaBetweenIsolatedAndJPsiMuon\")\n",
    "        hist['Data'][\"delta_phi_between_isolated_and_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_phi_between_isolated_and_jpsi_muons\", \"Delta Phi for Isolated Muon - JPsi Muons; Delta Phi; Events\", 50, -3.5, 3.5), \"DeltaPhiBetweenIsolatedAndJPsiMuon\")\n",
    "        hist['Data'][\"delta_r_between_isolated_and_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_r_between_isolated_and_jpsi_muons\", \"Delta R for Isolated and JPsi Muons; Delta R; Events\", 50, 0, 6), \"DeltaRBetweenIsolatedAndJPsiMuon\")\n",
    "        hist['Data'][\"jpsi_pt\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_pt\", \"Transverse Momentum for JPsi; Pt; Events\", 240, 0, 120), \"JPsi_pt\")\n",
    "        hist['Data'][\"jpsi_eta\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_eta\", \"Pseudorapidity for JPsi; Eta; Events\", 50, -3, 3), \"JPsi_eta\")\n",
    "        hist['Data'][\"jpsi_phi\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_phi\", \"Angle for JPsi; Phi; Events\", 50, -3.5, 3.5), \"JPsi_phi\")\n",
    "        hist['Data'][\"delta_eta_between_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_eta_between_jpsi_muons\", \"Delta Eta for JPsi Muons; Delta Eta; Events\", 50, 0, 6), \"DeltaEtaBetweenJPsiMuons\")\n",
    "        hist['Data'][\"delta_phi_between_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_phi_between_jpsi_muons\", \"Delta Phi for JPsi Muons; Delta Phi; Events\", 50, -3.5, 3.5), \"DeltaPhiBetweenJPsiMuons\")\n",
    "        hist['Data'][\"delta_r_between_jpsi_muons\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_r_between_jpsi_muons\", \"Delta R for JPsi Muons; Delta R; Events\", 50, 0, 6), \"DeltaRBetweenJPsiMuons\")\n",
    "        hist['Data'][\"delta_r_between_jpsi_muons_in_peak\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_r_between_jpsi_muons_in_peak\", \"Delta R for JPsi Muons In Peak; Delta R; Events\", 50, 0, 1), \"DeltaRBetweenJPsiMuonsInPeak\")\n",
    "        hist['Data'][\"delta_eta_between_isolated_muon_and_jpsi\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_eta_between_isolated_muon_and_jpsi\", \"Delta Eta for Isolated Muon And JPsi; Delta Eta; Events\", 50, 0, 6), \"DeltaEtaBetweenIsolatedMuonAndJPsi\")\n",
    "        hist['Data'][\"delta_phi_between_isolated_muon_and_jpsi\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_phi_between_isolated_muon_and_jpsi\", \"Delta Phi for Isolated Muon And JPsi; Delta Phi; Events\", 50, -3.5, 3.5), \"DeltaPhiBetweenIsolatedMuonAndJPsi\")\n",
    "        hist['Data'][\"delta_r_between_isolated_muon_and_jpsi\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_r_between_isolated_muon_and_jpsi\", \"Delta R for Isolated Muon And JPsi; Delta R; Events\", 50, 0, 6), \"DeltaRBetweenIsolatedMuonAndJPsi\")\n",
    "        \n",
    "\n",
    "        hist['Data'][\"jpsi_muon_pt\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_pt\", \"JPsi Muon Pt - Muon Id Medium, Iso Id Tight; JPsi Muon Pt; Events\", 100, 0, 100), \"JPsiMuon_pt\")\n",
    "        hist['Data'][\"jpsi_muon_pf_rel_iso_03_all\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_pf_rel_iso_03_all\", \"JPsi Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Tight; JPsi Muon Pf Rel Iso 03 All; Events\", 50, 0, .5), \"JPsiMuon_pfRelIso03_all\")\n",
    "        hist['Data'][\"jpsi_muon_pf_iso_id\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_pf_iso_id\", \"JPsi Muon Pf Iso Id - Muon Id Medium, Iso Id Tight; JPsi Muon Pf Iso Id; Events\", 6, .5, 6.5), \"JPsiMuon_pfIsoid\")\n",
    "        hist['Data'][\"isolated_muons_in_range_pfRelIso03_all\"] = rdfJPsiMuons['Data'].Histo1D((\"isolated_muons_in_range_pfRelIso03_all\", \"PfRelIso03_All For Isolated Muons In 90-120 GeV Range; PfRelIso03_All; Events\", 50, 0, .5), \"IsolatedMuonsInRangeInvariantMassPlot_pfRelIso03_all\")\n",
    "        hist['Data'][\"jpsi_muons_in_range_pfRelIso03_all\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muons_in_range_pfRelIso03_all\", \"PfRelIso03_All For JPsi Muons In 90-120 GeV Range; PfRelIso03_All; Events\", 50, 0, .5), \"JPsiMuonsInRangeInvariantMassPlot_pfRelIso03_all\")\n",
    "        hist['Data'][\"jpsi_mass_muons_in_range\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_mass_muons_in_range\", \"JPsi Mass For JPsis In 90-120 GeV Range; JPsi Mass; Events\", 200, 0, 100), \"JPsiMassesInRangeInvariantMassPlot\")\n",
    "        hist['Data'][\"pt_at_low_delta_r\"] = rdfJPsiMuons['Data'].Histo2D((\"pt_at_low_delta_r\", \"Isolated Muon and JPsi Muon Pt at Delta R < 0.3; Isolated Muon Pt; JPsi Muon Pt; Events\", 100, 20, 220, 100, 0, 100), \"IsolatedMuonPtAtLowDeltaR\", \"JPsiMuonPtAtLowDeltaR\")\n",
    "        \n",
    "        \n",
    "        hist['Data'][\"jpsi_mass_in_peak\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_mass_in_peak\", \"J/Psi Mass Made from Muons In Peak; J/Psi Mass; Events\", 80, 2.9, 3.3), \"JPsiMassInPeak\")\n",
    "        hist['Data'][\"delta_eta_for_jpsi_muons_in_peak\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_eta_for_jpsi_muons_in_peak\", \"Delta Eta For J/Psi Muons In Peak; Delta Eta; Events\", 50, 0, 6), \"DeltaEtaForJPsiMuonsInPeak\")\n",
    "        hist['Data'][\"delta_phi_for_jpsi_muons_in_peak\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_phi_for_jpsi_muons_in_peak\", \"Delta Phi For J/Psi Muons In Peak; Delta Phi; Events\", 50, -3.5, 3.5), \"DeltaPhiForJPsiMuonsInPeak\")\n",
    "        hist['Data'][\"delta_r_for_jpsi_muons_in_peak\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_r_for_jpsi_muons_in_peak\", \"Delta R For J/Psi Muons In Peak; Delta R; Events\", 50, 0, 6), \"DeltaRForJPsiMuonsInPeak\")\n",
    "        hist['Data'][\"jpsi_muons_charge_in_peak\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muons_charge_in_peak\", \"J/Psi Muons In Peak Charge; Charge; Events\", 5, -2, 2), \"JPsiMuonsChargeInPeak\")\n",
    "        hist['Data'][\"jpsi_pt_with_muon_in_peak\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_pt_with_muon_in_peak\", \"J/Psi Pt With Muons In Peak; Pt; Events\", 40, 0, 200), \"JPsiPtWithMuonInPeak\")\n",
    "        hist['Data'][\"jpsi_muon_pts_in_peak\"] = rdfJPsiMuons['Data'].Histo2D((\"jpsi_muon_pts_in_peak\", \"J/Psi Muon Pts In Peak; Positive Muon Pt; Negative Muon Pt; Events\", 100, 0, 100, 100, 0, 100), \"JPsiMuonPositivePt\", \"JPsiMuonNegativePt\")\n",
    "        hist['Data'][\"jpsi_muon_isolation_in_peak\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_isolation_in_peak\", \"J/Psi Pf Rel Iso 03 All Made From Muons In Peak; Pf Rel Iso 03 All; Events\", 50, 0, .5), \"JPsiMuonIsolationInPeak\")\n",
    "        hist['Data'][\"top_mass_in_peak\"] = rdfJPsiMuons['Data'].Histo1D((\"top_mass_in_peak\", \"Top Quark Mass Made From Muons In Peak; Mass; Events\", 60, 0, 300), \"TopMassInPeak\")\n",
    "        hist['Data'][\"delta_eta_between_isolated_muon_and_jpsi_in_peak\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_eta_between_isolated_muon_and_jpsi_in_peak\", \"Delta Eta Between Isolated Muon And J/Psi; Delta Eta; Events\", 50, 0, 6), \"DeltaEtaBetweenIsolatedMuonAndJPsiInPeak\")\n",
    "        hist['Data'][\"delta_phi_between_isolated_muon_and_jpsi_in_peak\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_phi_between_isolated_muon_and_jpsi_in_peak\", \"Delta Phi Between Isolated Muon And J/Psi; Delta Phi; Events\", 50, -3.5, 3.5), \"DeltaPhiBetweenIsolatedMuonAndJPsiInPeak\")\n",
    "        hist['Data'][\"delta_r_between_isolated_muon_and_jpsi_in_peak\"] = rdfJPsiMuons['Data'].Histo1D((\"delta_r_between_isolated_and_jpsi_in_peak\", \"Delta R Between Isolated Muon And J/Psi; Delta R; Events\", 50, 0, 6), \"DeltaRBetweenIsolatedMuonAndJPsiInPeak\")\n",
    "#         hist['Data'][\"isolated_muon_pf_rel_iso_03_all_zoomed\"] = rdfJPsiMuons['Data'].Histo1D((\"isolated_muon_pf_rel_iso_03_all_zoomed\", \"Isolated Muon PfRelIso03_All Zoomed; Isolated Muon PfRelIso03_All; Events\", 30, 0, .15), \"IsolatedMuon_pfRelIso03_all\")\n",
    "#         hist['Data'][\"isolated_muon_pf_rel_iso_03_chg\"] = rdfJPsiMuons['Data'].Histo1D((\"isolated_muon_pf_rel_iso_03_chg\", \"Isolated Muon PfRelIso03_Chg; Isolated Muon PfRelIso03_Chg; Events\", 50, 0, .5), \"IsolatedMuon_pfRelIso03_chg\")\n",
    "#         hist['Data'][\"jpsi_muon_positive_pf_rel_iso_03_all\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_positive_pf_rel_iso_03_all\", \"JPsi Muon Positive PfRelIso03_All; JPsi Muon Positive PfRelIso03_All; Events\", 50, 0, .5), \"JPsiMuonPositive_pfRelIso03_all\")\n",
    "#         hist['Data'][\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\", \"JPsi Muon Positive PfRelIso03_All Zoomed; JPsi Muon Positive PfRelIso03_All; Events\", 30, 0, .15), \"JPsiMuonPositive_pfRelIso03_all\")\n",
    "#         hist['Data'][\"jpsi_muon_positive_pf_rel_iso_03_chg\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_positive_pf_rel_iso_03_chg\", \"JPsi Muon Positive PfRelIso03_Chg; JPsi Muon Positive PfRelIso03_Chg; Events\", 50, 0, .5), \"JPsiMuonPositive_pfRelIso03_chg\")\n",
    "#         hist['Data'][\"jpsi_muon_negative_pf_rel_iso_03_all\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_negative_pf_rel_iso_03_all\", \"JPsi Muon Negative PfRelIso03_All; JPsi Muon Negative PfRelIso03_All; Events\", 50, 0, .5), \"JPsiMuonNegative_pfRelIso03_all\")\n",
    "#         hist['Data'][\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\", \"JPsi Muon Negative PfRelIso03_All Zoomed; JPsi Muon Negative PfRelIso03_All; Events\", 30, 0, .15), \"JPsiMuonNegative_pfRelIso03_all\")\n",
    "#         hist['Data'][\"jpsi_muon_negative_pf_rel_iso_03_chg\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_negative_pf_rel_iso_03_chg\", \"JPsi Muon Negative PfRelIso03_Chg; JPsi Muon Negative PfRelIso03_Chg; Events\", 50, 0, .5), \"JPsiMuonNegative_pfRelIso03_chg\")\n",
    "        \n",
    "#         # Medium ID means Medium Muon ID, but still tight or higher Iso ID\n",
    "#         hist['Data'][\"isolated_muon_pf_rel_iso_03_all_medium_id\"] = rdfJPsiMuons['Data'].Histo1D((\"isolated_muon_pf_rel_iso_03_all_medium_id\", \"Isolated Muon PfRelIso03_All Medium ID; Isolated Muon PfRelIso03_All Medium ID; Events\", 50, 0, .5), \"IsolatedMuon_pfRelIso03_all_mediumID\")\n",
    "#         hist['Data'][\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"] = rdfJPsiMuons['Data'].Histo1D((\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\", \"Isolated Muon PfRelIso03_All Medium ID Zoomed; Isolated Muon PfRelIso03_All Medium ID; Events\", 30, 0, .15), \"IsolatedMuon_pfRelIso03_all_mediumID\")\n",
    "#         hist['Data'][\"isolated_muon_pf_rel_iso_03_chg_medium_id\"] = rdfJPsiMuons['Data'].Histo1D((\"isolated_muon_pf_rel_iso_03_chg_medium_id\", \"Isolated Muon PfRelIso03_Chg Medium ID; Isolated Muon PfRelIso03_Chg Medium ID; Events\", 50, 0, .5), \"IsolatedMuon_pfRelIso03_chg_mediumID\")\n",
    "#         hist['Data'][\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\", \"JPsi Muon Positive PfRelIso03_All Medium ID; JPsi Muon Positive PfRelIso03_All Medium ID; Events\", 50, 0, .5), \"JPsiMuonPositive_pfRelIso03_all_mediumID\")\n",
    "#         hist['Data'][\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\", \"JPsi Muon Positive PfRelIso03_All Zoomed Medium ID; JPsi Muon Positive PfRelIso03_All Medium ID; Events\", 30, 0, .15), \"JPsiMuonPositive_pfRelIso03_all_mediumID\")\n",
    "#         hist['Data'][\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\", \"JPsi Muon Positive PfRelIso03_Chg Medium ID; JPsi Muon Positive PfRelIso03_Chg Medium ID; Events\", 50, 0, .5), \"JPsiMuonPositive_pfRelIso03_chg_mediumID\")\n",
    "#         hist['Data'][\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\", \"JPsi Muon Negative PfRelIso03_All Medium ID; JPsi Muon Negative PfRelIso03_All Medium ID; Events\", 50, 0, .5), \"JPsiMuonNegative_pfRelIso03_all_mediumID\")\n",
    "#         hist['Data'][\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\", \"JPsi Muon Negative PfRelIso03_All Zoomed Medium ID; JPsi Muon Negative PfRelIso03_All Medium ID; Events\", 30, 0, .15), \"JPsiMuonNegative_pfRelIso03_all_mediumID\")\n",
    "#         hist['Data'][\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\", \"JPsi Muon Negative PfRelIso03_Chg Medium ID; JPsi Muon Negative PfRelIso03_Chg Medium ID; Events\", 50, 0, .5), \"JPsiMuonNegative_pfRelIso03_chg_mediumID\")\n",
    "    \n",
    "    \n",
    "#         hist['Data'][\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\", \"JPsi Muon Positive Peak Only PfRelIso03_All; JPsi Muon Positive Peak Only PfRelIso03_All; Events\", 50, 0, .5), \"JPsiMuonPositive_peak_only_pfRelIso03_all\")\n",
    "#         hist['Data'][\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\", \"JPsi Muon Positive Peak Only PfRelIso03_Chg; JPsi Muon Positive Peak Only PfRelIso03_Chg; Events\", 50, 0, .5), \"JPsiMuonPositive_peak_only_pfRelIso03_chg\")\n",
    "#         hist['Data'][\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\", \"JPsi Muon Negative Peak Only PfRelIso03_All; JPsi Muon Negative Peak Only PfRelIso03_All; Events\", 50, 0, .5), \"JPsiMuonNegative_peak_only_pfRelIso03_all\")\n",
    "#         hist['Data'][\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"] = rdfJPsiMuons['Data'].Histo1D((\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\", \"JPsi Muon Negative Peak Only PfRelIso03_Chg; JPsi Muon Negative Peak Only PfRelIso03_Chg; Events\", 50, 0, .5), \"JPsiMuonNegative_peak_only_pfRelIso03_chg\")\n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "\n",
    "#         hist['Data'][\"further_muon_medium_tight_pt\"] = rdfRemainingIsolatedMuonMuonIdMediumIsoIdTight['Data'].Histo1D((\"further_muon_medium_tight_pt\", \"Further Muon Pt - Muon Id Medium, Iso Id Tight; Further Muon Pt - Muon Id Medium, Iso Id Tight; Events\", 100, 20, 220), \"FurtherMuonMediumTight_pt\")\n",
    "#         hist['Data'][\"further_muon_medium_tight_pf_rel_iso_03_all\"] = rdfRemainingIsolatedMuonMuonIdMediumIsoIdTight['Data'].Histo1D((\"further_muon_medium_tight_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Tight; Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Tight; Events\", 50, 0, .5), \"FurtherMuonMediumTight_pfRelIso03_all\")\n",
    "#         hist['Data'][\"further_muon_medium_tight_pf_iso_id\"] = rdfRemainingIsolatedMuonMuonIdMediumIsoIdTight['Data'].Histo1D((\"further_muon_medium_tight_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Medium, Iso Id Tight; Further Muon Pf Iso Id - Muon Id Medium, Iso Id Tight; Events\", 6, 1, 6), \"FurtherMuonMediumTight_pfIsoid\")\n",
    "        \n",
    "#         hist['Data'][\"further_muon_loose_tight_pt\"] = rdfRemainingIsolatedMuonMuonIdLooseIsoIdTight['Data'].Histo1D((\"further_muon_loose_tight_pt\", \"Further Muon Pt - Muon Id Loose Iso Id Tight; Further Muon Pt - Muon Id Loose, Iso Id Tight; Events\", 100, 20, 220), \"FurtherMuonLooseTight_pt\")\n",
    "#         hist['Data'][\"further_muon_loose_tight_pf_rel_iso_03_all\"] = rdfRemainingIsolatedMuonMuonIdLooseIsoIdTight['Data'].Histo1D((\"further_muon_loose_tight_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Tight; Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Tight; Events\", 50, 0, .5), \"FurtherMuonLooseTight_pfRelIso03_all\")\n",
    "#         hist['Data'][\"further_muon_loose_tight_pf_iso_id\"] = rdfRemainingIsolatedMuonMuonIdLooseIsoIdTight['Data'].Histo1D((\"further_muon_loose_tight_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Loose, Iso Id Tight; Further Muon Pf Iso Id - Muon Id Loose, Iso Id Tight; Events\", 6, 1, 6), \"FurtherMuonLooseTight_pfIsoid\")\n",
    "        \n",
    "#         hist['Data'][\"further_muon_medium_medium_pt\"] = rdfRemainingIsolatedMuonMuonIdMediumIsoIdMedium['Data'].Histo1D((\"further_muon_medium_medium_pt\", \"Further Muon Pt - Muon Id Medium, Iso Id Medium; Further Muon Pt - Muon Id Medium, Iso Id Medium; Events\", 100, 20, 220), \"FurtherMuonMediumMedium_pt\")\n",
    "#         hist['Data'][\"further_muon_medium_medium_pf_rel_iso_03_all\"] = rdfRemainingIsolatedMuonMuonIdMediumIsoIdMedium['Data'].Histo1D((\"further_muon_medium_medium_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Medium; Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Medium; Events\", 50, 0, .5), \"FurtherMuonMediumMedium_pfRelIso03_all\")\n",
    "#         hist['Data'][\"further_muon_medium_medium_pf_iso_id\"] = rdfRemainingIsolatedMuonMuonIdMediumIsoIdMedium['Data'].Histo1D((\"further_muon_medium_medium_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Medium, Iso Id Medium; Further Muon Pf Iso Id - Muon Id Medium, Iso Id Medium; Events\", 6, 1, 6), \"FurtherMuonMediumMedium_pfIsoid\")\n",
    "        \n",
    "#         hist['Data'][\"further_muon_loose_medium_pt\"] = rdfRemainingIsolatedMuonMuonIdLooseIsoIdMedium['Data'].Histo1D((\"further_muon_loose_medium_pt\", \"Further Muon Pt - Muon Id Loose, Iso Id Medium; Further Muon Pt - Muon Id Loose, Iso Id Medium; Events\", 100, 20, 220), \"FurtherMuonLooseMedium_pt\")\n",
    "#         hist['Data'][\"further_muon_loose_medium_pf_rel_iso_03_all\"] = rdfRemainingIsolatedMuonMuonIdLooseIsoIdMedium['Data'].Histo1D((\"further_muon_loose_medium_pf_rel_iso_03_all\", \"Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Medium; Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Medium; Events\", 50, 0, .5), \"FurtherMuonLooseMedium_pfRelIso03_all\")\n",
    "#         hist['Data'][\"further_muon_loose_medium_pf_iso_id\"] = rdfRemainingIsolatedMuonMuonIdLooseIsoIdMedium['Data'].Histo1D((\"further_muon_loose_medium_pf_iso_id\", \"Further Muon Pf Iso Id - Muon Id Loose, Iso Id Medium; Further Muon Pf Iso Id - Muon Id Loose, Iso Id Medium; Events\", 6, 1, 6), \"FurtherMuonLooseMedium_pfIsoid\")\n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "\n",
    "    else:\n",
    "        \n",
    "        hist[sample][\"leading_isolated_muon_pt_initial\"] = rdfIsolatedMuonNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_pt_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Transverse Momentum (One Muon, No Electrons); Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_eta_initial\"] = rdfIsolatedMuonNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_eta_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Pseudorapidity (One Muon, No Electrons); Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_phi_initial\"] = rdfIsolatedMuonNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_phi_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Angle (One Muon, No Electrons); Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_mass_initial\"] = rdfIsolatedMuonNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_mass_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Mass (One Muon, No Electrons); Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_charge_initial\"] = rdfIsolatedMuonNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_charge_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Charge (One Muon, No Electrons); Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_pt_initial\"] = rdfIsolatedElectronNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_pt_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Transverse Momentum (One Electron, No Muons); Pt (GeV);Events\",100,20,220),\"LeadingIsolatedElectron_pt\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_eta_initial\"] = rdfIsolatedElectronNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_eta_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Pseudorapidity (One Electron, No Muons); Eta; Events\",100,-3,3),\"LeadingIsolatedElectron_eta\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_phi_initial\"] = rdfIsolatedElectronNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_phi_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Angle (One Electron, No Muons); Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedElectron_phi\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_mass_initial\"] = rdfIsolatedElectronNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_mass_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Mass (One Electron, No Muons); Mass(Gev); Events\",10,.0001,.001),\"LeadingIsolatedElectron_mass\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_charge_initial\"] = rdfIsolatedElectronNoHighWeights[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_charge_initial\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Charge (One Electron, No Muons); Charge; Events\",5,-2,2),\"LeadingIsolatedElectron_charge\",\"LumiXS\")\n",
    "        \n",
    "        hist[sample][\"met_before_met_cut\"] = rdfIsolatedMuonNoHighWeights[sample].Histo1D((sample + \"_\" + \"met_before_met_cut\", \"Monte Carlo \" + sample + \"; MET Before MET Cut; Pt (GeV); Events\",100,0,250), \"METBeforeMETCut\", \"LumiXS\")\n",
    "        hist[sample][\"met_after_met_cut\"] = rdfIsolatedMuonAfterMETCut[sample].Histo1D((sample + \"_\" + \"met_after_met_cut\", \"Monte Carlo \" + sample + \"; MET After MET Cut; Pt (GeV); Events\",100,0,250), \"METAfterMETCut\", \"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_pt_after_met_cut\"] = rdfIsolatedMuonAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_pt_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Transverse Momentum After MET Cut; Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_eta_after_met_cut\"] = rdfIsolatedMuonAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_eta_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Pseudorapidity After MET Cut; Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_phi_after_met_cut\"] = rdfIsolatedMuonAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_phi_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Angle After MET Cut; Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_mass_after_met_cut\"] = rdfIsolatedMuonAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_mass_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Mass After MET Cut; Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_charge_after_met_cut\"] = rdfIsolatedMuonAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_charge_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Charge After MET Cut; Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_pt_after_met_cut\"] = rdfIsolatedElectronAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_pt_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Transverse Momentum After MET Cut; Pt (GeV);Events\",100,20,220),\"LeadingIsolatedElectron_pt\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_eta_after_met_cut\"] = rdfIsolatedElectronAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_eta_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Pseudorapidity After MET Cut; Eta; Events\",100,-3,3),\"LeadingIsolatedElectron_eta\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_phi_after_met_cut\"] = rdfIsolatedElectronAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_phi_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Angle After MET Cut; Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedElectron_phi\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_mass_after_met_cut\"] = rdfIsolatedElectronAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_mass_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Mass After MET Cut; Mass(Gev); Events\",10,.0001,.001),\"LeadingIsolatedElectron_mass\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_electron_charge_after_met_cut\"] = rdfIsolatedElectronAfterMETCut[sample].Histo1D((sample + \"_\" + \"leading_isolated_electron_charge_after_met_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Electron Charge After MET Cut; Charge; Events\",5,-2,2),\"LeadingIsolatedElectron_charge\",\"LumiXS\")\n",
    "        \n",
    "        hist[sample][\"number_of_jets_initial\"] = rdfIsolatedMuonAfterMETCut[sample].Histo1D((sample + \"_\" + \"number_of_jets_initial\", \"Monte Carlo \" + sample +\"; Number Of Jets Before Jet Cut; Number Of Jets; Events\", 20, 0, 20), \"Num_Jets\", \"LumiXS\")\n",
    "        hist[sample][\"number_of_jets\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"number_of_jets\", \"Monte Carlo \" + sample +\"; Number Of Jets; Number Of Jets; Events\", 20, 0, 20), \"Num_Jets\", \"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_pt_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_pt_after_jet_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Transverse Momentum After Jet Cut; Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_eta_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_eta_after_jet_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Pseudorapidity After Jet Cut; Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_phi_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_phi_after_jet_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Angle After Jet Cut; Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_mass_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_mass_after_jet_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Mass After Jet Cut; Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_charge_after_jet_cut\"] = rdfJetAndIsolatedLeptonFiltered[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_charge_after_jet_cut\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Charge After Jet Cut; Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\",\"LumiXS\")\n",
    "        \n",
    "        hist[sample][\"number_of_jpsi_muons_initial\"] = rdfJetAndIsolatedLeptonFiltered[sample].Histo1D((sample + \"_\" + \"number_of_jpsi_muons_initial\", \"Monte Carlo \" + sample +\"; Number Of JPsi Muons Before JPsi Muon Cut; Number Of Muons; Events\", 10, 0, 9), \"Num_JPsi_Muons\", \"LumiXS\")\n",
    "        hist[sample][\"number_of_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"number_of_jpsi_muons\", \"Monte Carlo \" + sample +\"; Number Of JPsi Muons; Number Of Muons; Events\", 10, 0, 9), \"Num_JPsi_Muons\", \"LumiXS\")\n",
    "        \n",
    "        \n",
    "        \n",
    "        # Final Results\n",
    "        hist[sample][\"leading_isolated_muon_pt\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_pt\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Transverse Momentum (One Muon, No Electrons); Pt (GeV);Events\",100,20,220),\"LeadingIsolatedMuon_pt\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_eta\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_eta\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Pseudorapidity (One Muon, No Electrons); Eta; Events\",100,-3,3),\"LeadingIsolatedMuon_eta\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_phi\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_phi\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Angle (One Muon, No Electrons); Phi (Radians); Events\",100,-3.5,3.5),\"LeadingIsolatedMuon_phi\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_mass\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_mass\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Mass (One Muon, No Electrons); Mass(Gev); Events\",10,.1,.2),\"LeadingIsolatedMuon_mass\",\"LumiXS\")\n",
    "        hist[sample][\"leading_isolated_muon_charge\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"leading_isolated_muon_charge\", \"Monte Carlo \" + sample + \";Leading Isolated Muon Charge (One Muon, No Electrons); Charge; Events\",5,-2,2),\"LeadingIsolatedMuon_charge\",\"LumiXS\")\n",
    "        hist[sample][\"isolated_muon_pf_rel_iso_03_all\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"isolated_muon_pf_rel_iso_03_all\", \"Monte Carlo\" + sample + \"; Isolated Muon PfRelIso03_All; Isolated Muon PfRelIso03_All; Events\", 50, 0, .5), \"IsolatedMuon_pfRelIso03_all\", \"LumiXS\")\n",
    "               \n",
    "        hist[sample][\"jet1_pt\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jet1_pt\", \"Monte Carlo \" + sample + \"; Jet Transverse Momentum for Leading Jet; Pt (GeV); Events\", 100, 20, 200), \"SJet1_pt\", \"LumiXS\")\n",
    "        hist[sample][\"jet2_pt\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jet2_pt\", \"Monte Carlo \" + sample + \"; Jet Transverse Momentum for Subeading Jet; Pt (GeV); Events\", 100, 20, 200), \"SJet2_pt\", \"LumiXS\")\n",
    "        hist[sample][\"jet1_eta\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jet1_eta\", \"Monte Carlo \" + sample + \"; Jet Pseudorapidity for Leading Jet; Eta; Events\", 100, -3, 3), \"SJet1_eta\", \"LumiXS\")\n",
    "        hist[sample][\"jet2_eta\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jet2_eta\", \"Monte Carlo \" + sample +\"; Jet Pseudorapidity for Subeading Jet; Eta; Events\", 100, -3, 3), \"SJet2_eta\", \"LumiXS\")\n",
    "        hist[sample][\"jet1_phi\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jet1_phi\", \"Monte Carlo \" + sample + \"; Jet Angle for Leading Jet; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet1_phi\", \"LumiXS\")\n",
    "        hist[sample][\"jet2_phi\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jet2_phi\", \"Monte Carlo \" + sample +\"; Jet Angle for Subleading Jet; Phi (Radians); Events\", 100, -3.5, 3.5), \"SJet2_phi\", \"LumiXS\")\n",
    "        hist[sample][\"transverse_mass\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"transverse_mass\", \"Monte Carlo \" + sample +\"; Transverse Mass; Transverse Mass (GeV); Events\", 150, 0, 150), \"MTofMETandMu\", \"LumiXS\")\n",
    "        hist[sample][\"ht\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"ht\", \"Monte Carlo \" + sample + \"; Ht; Ht; Events\", 300, 0, 1500), \"Ht\", \"LumiXS\")\n",
    "                \n",
    "        hist[sample][\"jpsi_muons_pt\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muons_pt\", \"Monte Carlo \" + sample + \"; Transverse Momentum for JPsi Muons; Pt; Events\", 150, 0, 50), \"JPsiCandidate_pt\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_muons_eta\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muons_eta\", \"Monte Carlo \" + sample + \"; Pseudorapidity for JPsi Muons; Eta; Events\", 50, -3, 3), \"JPsiCandidate_eta\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_muons_phi\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muons_phi\", \"Monte Carlo \" + sample + \"; Angle for JPsi Muons; Phi; Events\", 50, -3.5, 3.5), \"JPsiCandidate_phi\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_muons_charge\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_charge\", \"Monte Carlo\" + sample + \"; Charge of JPsi Muons; Charge; Events\", 5, -2, 2), \"JPsiCandidate_charge\", \"LumiXS\")\n",
    "        hist[sample][\"invariant_mass_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"invariant_mass_jpsi_muons\", \"Monte Carlo \" + sample + \"; Invariant Masses for J/Psi Candidate Muons (Oppositely Charged); Invariant Masses; Events\", 100, .5, 12), \"InvariantMassJPsiMuons\", \"LumiXS\")\n",
    "        hist[sample][\"invariant_masses_zoomed\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"invariant_masses_zoomed\", \"Monte Carlo \" + sample + \"; Invariant Masses for J/Psi Candidate Muons (Oppositely Charged); Invariant Masses; Events\", 50, 2.8, 3.4), \"InvariantMassJPsiMuons\", \"LumiXS\")\n",
    "        hist[sample][\"invariant_mass_jpsi_muons_and_isolated_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"invariant_mass_jpsi_and_isolated_muons\", \"Monte Carlo \" + sample + \"; Invariant Masses for J/Psi Candidate And Isolated Muons (dR < 2); Invariant Masses; Events\", 100, 0, 200), \"InvariantMassJPsiMuonsAndIsolatedMuons\", \"LumiXS\")\n",
    "        hist[sample][\"delta_eta_between_isolated_and_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_eta_betweeen_isolated_and_jpsi_muons\", \"Monte Carlo \" + sample + \"; Delta Eta for Isolated Muon - JPsi Muons; Delta Eta; Events\", 50, 0, 6), \"DeltaEtaBetweenIsolatedAndJPsiMuon\", \"LumiXS\")\n",
    "        hist[sample][\"delta_phi_between_isolated_and_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_phi_betweeen_isolated_and_jpsi_muons\", \"Monte Carlo \" + sample + \"; Delta Phi for Isolated Muon - JPsi Muons; Delta Phi; Events\", 50, -3.5, 3.5), \"DeltaPhiBetweenIsolatedAndJPsiMuon\", \"LumiXS\")\n",
    "        hist[sample][\"delta_r_between_isolated_and_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_r_betweeen_isolated_and_jpsi_muons\", \"Monte Carlo \" + sample + \"; Delta R for Isolated and JPsi Muons; Delta R; Events\", 50, 0, 6), \"DeltaRBetweenIsolatedAndJPsiMuon\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_pt\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_pt\", \"Monte Carlo \" + sample + \"; Transverse Momentum for JPsi; Pt; Events\", 240, 0, 120), \"JPsi_pt\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_eta\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_eta\", \"Monte Carlo \" + sample + \"; Pseudorapidity for JPsi; Eta; Events\", 50, -3, 3), \"JPsi_eta\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_phi\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_phi\", \"Monte Carlo \" + sample + \"; Angle for JPsi; Phi; Events\", 50, -3.5, 3.5), \"JPsi_phi\", \"LumiXS\")\n",
    "        hist[sample][\"delta_eta_between_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_eta_between_jpsi_muons\", \"Monte Carlo \" + sample + \"; Delta Eta for JPsi Muons; Delta Eta; Events\", 50, 0, 6), \"DeltaEtaBetweenJPsiMuons\", \"LumiXS\")\n",
    "        hist[sample][\"delta_phi_between_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_phi_between_jpsi_muons\", \"Monte Carlo \" + sample + \"; Delta Phi for JPsi Muons; Delta Phi; Events\", 50, -3.5, 3.5), \"DeltaPhiBetweenJPsiMuons\", \"LumiXS\")\n",
    "        hist[sample][\"delta_r_between_jpsi_muons\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_r_between_jpsi_muons\", \"Monte Carlo \" + sample + \"; Delta R for JPsi Muons; Delta R; Events\", 50, 0, 6), \"DeltaRBetweenJPsiMuons\", \"LumiXS\")\n",
    "        hist[sample][\"delta_r_between_jpsi_muons_in_peak\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_r_between_jpsi_muons_in_peak\", \"Monte Carlo \" + sample + \"; Delta R for JPsi Muons In Peak; Delta R; Events\", 50, 0, 1), \"DeltaRBetweenJPsiMuonsInPeak\", \"LumiXS\")\n",
    "        hist[sample][\"delta_eta_between_isolated_muon_and_jpsi\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_eta_between_isolated_muon_and_jpsi\", \"Monte Carlo \" + sample + \"; Delta Eta for Isolated Muon And JPsi; Delta Eta; Events\", 50, 0, 6), \"DeltaEtaBetweenIsolatedMuonAndJPsi\", \"LumiXS\")\n",
    "        hist[sample][\"delta_phi_between_isolated_muon_and_jpsi\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_phi_between_isolated_muon_and_jpsi\", \"Monte Carlo \" + sample + \"; Delta Phi for Isolated Muon And JPsi; Delta Phi; Events\", 50, -3.5, 3.5), \"DeltaPhiBetweenIsolatedMuonAndJPsi\", \"LumiXS\")\n",
    "        hist[sample][\"delta_r_between_isolated_muon_and_jpsi\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_r_between_isolated_muon_and_jpsi\", \"Monte Carlo \" + sample + \"; Delta R for Isolated Muon And JPsi; Delta R; Events\", 50, 0, 6), \"DeltaRBetweenIsolatedMuonAndJPsi\", \"LumiXS\")\n",
    "        \n",
    "        \n",
    "        hist[sample][\"jpsi_muon_pt\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_pt\", \"Monte Carlo\" + sample + \"; JPsi Muon Pt - Muon Id Medium, Iso Id Tight; JPsi Muon Pt; Events\", 100, 0, 100), \"JPsiMuon_pt\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_muon_pf_rel_iso_03_all\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_pf_rel_iso_03_all\", \"Monte Carlo\" + sample + \"; JPsi Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Tight; JPsi Muon Pf Rel Iso 03 All; Events\", 50, 0, .5), \"JPsiMuon_pfRelIso03_all\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_muon_pf_iso_id\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_pf_iso_id\", \"Monte Carlo\" + sample + \"; JPsi Muon Pf Iso Id - Muon Id Medium, Iso Id Tight; JPsi Muon Pf Iso Id; Events\", 6, .5, 6.5), \"JPsiMuon_pfIsoid\", \"LumiXS\")\n",
    "        hist[sample][\"isolated_muons_in_range_pfRelIso03_all\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"isolated_muons_in_range_pfRelIso03_all\", \"Monte Carlo\" + sample + \"; PfRelIso03_All For Isolated Muons In 90-120 GeV Range; PfRelIso03_All; Events\", 50, 0, .5), \"IsolatedMuonsInRangeInvariantMassPlot_pfRelIso03_all\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_muons_in_range_pfRelIso03_all\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muons_in_range_pfRelIso03_all\", \"Monte Carlo\" + sample + \"; PfRelIso03_All For JPsi Muons In 90-120 GeV Range; PfRelIso03_All; Events\", 50, 0, .5), \"JPsiMuonsInRangeInvariantMassPlot_pfRelIso03_all\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_mass_muons_in_range\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_mass_muons_in_range\", \"Monte Carlo\" + sample + \"; JPsi Mass For JPsis In 90-120 GeV Range; JPsi Mass; Events\", 200, 0, 100), \"JPsiMassesInRangeInvariantMassPlot\")\n",
    "        hist[sample][\"pt_at_low_delta_r\"] = rdfJPsiMuons[sample].Histo2D((sample + \"_\" + \"pt_at_low_delta_r\", \"Monte Carlo\" + sample + \"; Isolated Muon and JPsi Muon Pt at Delta R < 0.3; Isolated Muon Pt; JPsi Muon Pt; Events\", 100, 20, 220, 100, 0, 100), \"IsolatedMuonPtAtLowDeltaR\", \"JPsiMuonPtAtLowDeltaR\", \"LumiXS\")\n",
    "        \n",
    "        \n",
    "        hist[sample][\"jpsi_mass_in_peak\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_mass_in_peak\", \"Monte Carlo\" + sample + \"; J/Psi Mass Made from Muons In Peak; J/Psi Mass; Events\", 80, 2.9, 3.3), \"JPsiMassInPeak\", \"LumiXS\")\n",
    "        hist[sample][\"delta_eta_for_jpsi_muons_in_peak\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_eta_for_jpsi_muons_in_peak\", \"Monte Carlo\" + sample + \"; Delta Eta For J/Psi Muons In Peak; Delta Eta; Events\", 50, 0, 6), \"DeltaEtaForJPsiMuonsInPeak\", \"LumiXS\")\n",
    "        hist[sample][\"delta_phi_for_jpsi_muons_in_peak\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_phi_for_jpsi_muons_in_peak\", \"Monte Carlo\" + sample + \"; Delta Phi For J/Psi Muons In Peak; Delta Phi; Events\", 50, -3.5, 3.5), \"DeltaPhiForJPsiMuonsInPeak\", \"LumiXS\")\n",
    "        hist[sample][\"delta_r_for_jpsi_muons_in_peak\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_r_for_jpsi_muons_in_peak\", \"Monte Carlo\" + sample + \"; Delta R For J/Psi Muons In Peak; Delta R; Events\", 50, 0, 6), \"DeltaRForJPsiMuonsInPeak\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_muons_charge_in_peak\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muons_charge_in_peak\", \"Monte Carlo\" + sample + \"; J/Psi Muons In Peak Charge; Charge; Events\", 5, -2, 2), \"JPsiMuonsChargeInPeak\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_pt_with_muon_in_peak\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_pt_with_muon_in_peak\", \"Monte Carlo\" + sample + \"; J/Psi Pt With Muons In Peak; Pt; Events\", 40, 0, 200), \"JPsiPtWithMuonInPeak\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_muon_pts_in_peak\"] = rdfJPsiMuons[sample].Histo2D((sample + \"_\" + \"jpsi_muon_pts_in_peak\", \"Monte Carlo\" + sample + \"; J/Psi Muon Pts In Peak; Positive Muon Pts; Negative Muon Pts; Events\", 200, 0, 200, 100, 0, 100), \"JPsiMuonPositivePt\", \"JPsiMuonNegativePt\", \"LumiXS\")\n",
    "        hist[sample][\"jpsi_muon_isolation_in_peak\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_isolation_in_peak\", \"Monte Carlo\" + sample + \"; J/Psi Pf Rel Iso 03 All Made From Muons In Peak; Pf Rel Iso 03 All; Events\", 50, 0, .5), \"JPsiMuonIsolationInPeak\", \"LumiXS\")\n",
    "        hist[sample][\"top_mass_in_peak\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"top_mass_in_peak\", \"Monte Carlo\" + sample + \"; Top Quark Mass Made From Muons In Peak; Mass; Events\", 60, 0, 300), \"TopMassInPeak\", \"LumiXS\")\n",
    "        hist[sample][\"delta_eta_between_isolated_muon_and_jpsi_in_peak\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_eta_between_isolated_muon_and_jpsi_in_peak\", \"Monte Carlo\" + sample + \"; Delta Eta Between Isolated Muon And J/Psi; Delta Eta; Events\", 50, 0, 6), \"DeltaEtaBetweenIsolatedMuonAndJPsiInPeak\", \"LumiXS\")\n",
    "        hist[sample][\"delta_phi_between_isolated_muon_and_jpsi_in_peak\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_phi_between_isolated_muon_and_jpsi_in_peak\", \"Monte Carlo\" + sample + \"; Delta Phi Between Isolated Muon And J/Psi; Delta Phi; Events\", 50, -3.5, 3.5), \"DeltaPhiBetweenIsolatedMuonAndJPsiInPeak\", \"LumiXS\")\n",
    "        hist[sample][\"delta_r_between_isolated_muon_and_jpsi_in_peak\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"delta_r_between_isolated_muon_and_jpsi_in_peak\", \"Motne Carlo\" + sample + \"Delta R Between Isolated Muon And J/Psi; Delta R; Events\", 50, 0, 6), \"DeltaRBetweenIsolatedMuonAndJPsiInPeak\", \"LumiXS\")\n",
    "#         hist[sample][\"isolated_muon_pf_rel_iso_03_all_zoomed\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"isolated_muon_pf_rel_iso_03_all_zoomed\", \"Monte Carlo\" + sample + \"; Isolated Muon PfRelIso03_All Zoomed; Isolated Muon PfRelIso03_All Zoomed; Events\", 30, 0, .15), \"IsolatedMuon_pfRelIso03_all\", \"LumiXS\")\n",
    "#         hist[sample][\"isolated_muon_pf_rel_iso_03_chg\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"isolated_muon_pf_rel_iso_03_chg\", \"Monte Carlo\" + sample + \"; Isolated Muon PfRelIso03_Chg; Isolated Muon PfRelIso03_Chg; Events\", 50, 0, .5), \"IsolatedMuon_pfRelIso03_chg\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_positive_pf_rel_iso_03_all\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_positive_pf_rel_iso_03_all\", \"Monte Carlo\" + sample + \"; JPsi Muon Positive PfRelIso03_All; JPsi Muon Positive PfRelIso03_All; Events\", 50, 0, .5), \"JPsiMuonPositive_pfRelIso03_all\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_positive_pf_rel_iso_03_all_zoomed\", \"Monte Carlo\" + sample + \"; JPsi Muon Positive PfRelIso03_All Zoomed; JPsi Muon Positive PfRelIso03_All Zoomed; Events\", 30, 0, .15), \"JPsiMuonPositive_pfRelIso03_all\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_positive_pf_rel_iso_03_chg\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_positive_pf_rel_iso_03_chg\", \"Monte Carlo\" + sample + \"; JPsi Muon Positive PfRelIso03_Chg; JPsi Muon Positive PfRelIso03_Chg; Events\", 50, 0, .5), \"JPsiMuonPositive_pfRelIso03_chg\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_negative_pf_rel_iso_03_all\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_negative_pf_rel_iso_03_all\", \"Monte Carlo\" + sample + \"; JPsi Muon Negative PfRelIso03_All; JPsi Muon Negative PfRelIso03_All; Events\", 50, 0, .5), \"JPsiMuonNegative_pfRelIso03_all\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_negative_pf_rel_iso_03_all_zoomed\", \"Monte Carlo\" + sample + \"; JPsi Muon Negative PfRelIso03_All Zoomed; JPsi Muon Negative PfRelIso03_All Zoomed; Events\", 30, 0, .15), \"JPsiMuonNegative_pfRelIso03_all\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_negative_pf_rel_iso_03_chg\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_negative_pf_rel_iso_03_chg\", \"Monte Carlo\" + sample + \"; JPsi Muon Negative PfRelIso03_Chg; JPsi Muon Negative PfRelIso03_Chg; Events\", 50, 0, .5), \"JPsiMuonNegative_pfRelIso03_chg\", \"LumiXS\")\n",
    "        \n",
    "        \n",
    "#         hist[sample][\"isolated_muon_pf_rel_iso_03_all_medium_id\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"isolated_muon_pf_rel_iso_03_all_medium_id\", \"Monte Carlo\" + sample + \"; Isolated Muon PfRelIso03_All Medium ID; Isolated Muon PfRelIso03_All Medium ID; Events\", 50, 0, .5), \"IsolatedMuon_pfRelIso03_all_mediumID\", \"LumiXS\")\n",
    "#         hist[sample][\"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"isolated_muon_pf_rel_iso_03_all_medium_id_zoomed\", \"Monte Carlo\" + sample +\"; Isolated Muon PfRelIso03_All Medium ID Zoomed; Isolated Muon PfRelIso03_All Medium ID; Events\", 30, 0, .15), \"IsolatedMuon_pfRelIso03_all_mediumID\", \"LumiXS\")\n",
    "#         hist[sample][\"isolated_muon_pf_rel_iso_03_chg_medium_id\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"isolated_muon_pf_rel_iso_03_chg_medium_id\", \"Monte Carlo\" + sample + \"; Isolated Muon PfRelIso03_Chg Medium ID; Isolated Muon PfRelIso03_Chg Medium ID; Events\", 50, 0, .5), \"IsolatedMuon_pfRelIso03_chg_mediumID\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_positive_pf_rel_iso_03_all_medium_id\", \"Monte Carlo\" + sample + \"; JPsi Muon Positive PfRelIso03_All Medium ID; JPsi Muon Positive PfRelIso03_All Medium ID; Events\", 50, 0, .5), \"JPsiMuonPositive_pfRelIso03_all_mediumID\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_positive_pf_rel_iso_03_all_medium_id_zoomed\", \"Monte Carlo\" + sample + \"; JPsi Muon Positive PfRelIso03_All Zoomed Medium ID; JPsi Muon Positive PfRelIso03_All Medium ID; Events\", 30, 0, .15), \"JPsiMuonPositive_pfRelIso03_all_mediumID\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_positive_pf_rel_iso_03_chg_medium_id\", \"Monte Carlo\" + sample + \"; JPsi Muon Positive PfRelIso03_Chg Medium ID; JPsi Muon Positive PfRelIso03_Chg Medium ID; Events\", 50, 0, .5), \"JPsiMuonPositive_pfRelIso03_chg_mediumID\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_negative_pf_rel_iso_03_all_medium_id\", \"Monte Carlo\" + sample + \"; JPsi Muon Negative PfRelIso03_All Medium ID; JPsi Muon Negative PfRelIso03_All Medium ID; Events\", 50, 0, .5), \"JPsiMuonNegative_pfRelIso03_all_mediumID\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_negative_pf_rel_iso_03_all_medium_id_zoomed\", \"JPsi Muon Negative PfRelIso03_All Zoomed Medium ID; JPsi Muon Negative PfRelIso03_All Medium ID; Events\", 30, 0, .15), \"JPsiMuonNegative_pfRelIso03_all_mediumID\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_negative_pf_rel_iso_03_chg_medium_id\", \"Monte Carlo\" + sample + \";JPsi Muon Negative PfRelIso03_Chg Medium ID; JPsi Muon Negative PfRelIso03_Chg Medium ID; Events\", 50, 0, .5), \"JPsiMuonNegative_pfRelIso03_chg_mediumID\", \"LumiXS\")\n",
    "    \n",
    "    \n",
    "#         hist[sample][\"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_positive_peak_only_pf_rel_iso_03_all\", \"Monte Carlo\" + sample + \"; JPsi Muon Positive Peak Only PfRelIso03_All; JPsi Muon Positive Peak Only PfRelIso03_All; Events\", 50, 0, .5), \"JPsiMuonPositive_peak_only_pfRelIso03_all\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_positive_peak_only_pf_rel_iso_03_chg\", \"Monte Carlo\" + sample + \"; JPsi Muon Positive Peak Only PfRelIso03_Chg; JPsi Muon Positive Peak Only PfRelIso03_Chg; Events\", 50, 0, .5), \"JPsiMuonPositive_peak_only_pfRelIso03_chg\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_negative_peak_only_pf_rel_iso_03_all\", \"Monte Carlo\" + sample + \"; JPsi Muon Negative Peak Only PfRelIso03_All; JPsi Muon Negative Peak Only PfRelIso03_All; Events\", 50, 0, .5), \"JPsiMuonNegative_peak_only_pfRelIso03_all\", \"LumiXS\")\n",
    "#         hist[sample][\"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\"] = rdfJPsiMuons[sample].Histo1D((sample + \"_\" + \"jpsi_muon_negative_peak_only_pf_rel_iso_03_chg\", \"Monte Carlo\" + sample + \"; JPsi Muon Negative Peak Only PfRelIso03_Chg; JPsi Muon Negative Peak Only PfRelIso03_Chg; Events\", 50, 0, .5), \"JPsiMuonNegative_peak_only_pfRelIso03_chg\", \"LumiXS\")\n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "#         hist[sample][\"further_muon_medium_tight_pt\"] = rdfRemainingIsolatedMuonMuonIdMediumIsoIdTight[sample].Histo1D((sample + \"_\" + \"further_muon_medium_tight_pt\", \"Monte Carlo\" + sample + \"; Further Muon Pt - Muon Id Medium, Iso Id Tight; Further Muon Pt - Muon Id Medium, Iso Id Tight; Events\", 100, 20, 220), \"FurtherMuonMediumTight_pt\", \"LumiXS\")\n",
    "#         hist[sample][\"further_muon_medium_tight_pf_rel_iso_03_all\"] = rdfRemainingIsolatedMuonMuonIdMediumIsoIdTight[sample].Histo1D((sample + \"_\" + \"further_muon_medium_tight_pf_rel_iso_03_all\", \"Monte Carlo\" + sample + \"; Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Tight; Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Tight; Events\", 50, 0, .5), \"FurtherMuonMediumTight_pfRelIso03_all\", \"LumiXS\")\n",
    "#         hist[sample][\"further_muon_medium_tight_pf_iso_id\"] = rdfRemainingIsolatedMuonMuonIdMediumIsoIdTight[sample].Histo1D((sample + \"_\" + \"further_muon_medium_tight_pf_iso_id\", \"Monte Carlo\" + sample + \"; Further Muon Pf Iso Id - Muon Id Medium, Iso Id Tight; Further Muon Pf Iso Id - Muon Id Medium, Iso Id Tight; Events\", 6, 1, 6), \"FurtherMuonMediumTight_pfIsoid\", \"LumiXS\")\n",
    "        \n",
    "#         hist[sample][\"further_muon_loose_tight_pt\"] = rdfRemainingIsolatedMuonMuonIdLooseIsoIdTight[sample].Histo1D((sample + \"_\" + \"further_muon_loose_tight_pt\", \"Monte Carlo\" + sample + \"; Further Muon Pt - Muon Id Loose Iso Id Tight; Further Muon Pt - Muon Id Loose, Iso Id Tight; Events\", 100, 20, 220), \"FurtherMuonLooseTight_pt\", \"LumiXS\")\n",
    "#         hist[sample][\"further_muon_loose_tight_pf_rel_iso_03_all\"] = rdfRemainingIsolatedMuonMuonIdLooseIsoIdTight[sample].Histo1D((sample + \"_\" + \"further_muon_loose_tight_pf_rel_iso_03_all\", \"Monte Carlo\" + sample + \"; Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Tight; Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Tight; Events\", 50, 0, .5), \"FurtherMuonLooseTight_pfRelIso03_all\", \"LumiXS\")\n",
    "#         hist[sample][\"further_muon_loose_tight_pf_iso_id\"] = rdfRemainingIsolatedMuonMuonIdLooseIsoIdTight[sample].Histo1D((sample + \"_\" + \"further_muon_loose_tight_pf_iso_id\", \"Monte Carlo\" + sample + \"; Further Muon Pf Iso Id - Muon Id Loose, Iso Id Tight; Further Muon Pf Iso Id - Muon Id Loose, Iso Id Tight; Events\", 6, 1, 6), \"FurtherMuonLooseTight_pfIsoid\", \"LumiXS\")\n",
    "        \n",
    "#         hist[sample][\"further_muon_medium_medium_pt\"] = rdfRemainingIsolatedMuonMuonIdMediumIsoIdMedium[sample].Histo1D((sample + \"_\" + \"further_muon_medium_medium_pt\", \"Monte Carlo\" + sample + \"; Further Muon Pt - Muon Id Medium, Iso Id Medium; Further Muon Pt - Muon Id Medium, Iso Id Medium; Events\", 100, 20, 220), \"FurtherMuonMediumMedium_pt\", \"LumiXS\")\n",
    "#         hist[sample][\"further_muon_medium_medium_pf_rel_iso_03_all\"] = rdfRemainingIsolatedMuonMuonIdMediumIsoIdMedium[sample].Histo1D((sample + \"_\" + \"further_muon_medium_medium_pf_rel_iso_03_all\", \"Monte Carlo\" + sample + \"; Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Medium; Further Muon Pf Rel Iso 03 All - Muon Id Medium, Iso Id Medium; Events\", 50, 0, .5), \"FurtherMuonMediumMedium_pfRelIso03_all\", \"LumiXS\")\n",
    "#         hist[sample][\"further_muon_medium_medium_pf_iso_id\"] = rdfRemainingIsolatedMuonMuonIdMediumIsoIdMedium[sample].Histo1D((sample + \"_\" + \"further_muon_medium_medium_pf_iso_id\", \"Monte Carlo\" + sample + \"; Further Muon Pf Iso Id - Muon Id Medium, Iso Id Medium; Further Muon Pf Iso Id - Muon Id Medium, Iso Id Medium; Events\", 6, 1, 6), \"FurtherMuonMediumMedium_pfIsoid\", \"LumiXS\")\n",
    "        \n",
    "#         hist[sample][\"further_muon_loose_medium_pt\"] = rdfRemainingIsolatedMuonMuonIdLooseIsoIdMedium[sample].Histo1D((sample + \"_\" + \"further_muon_loose_medium_pt\", \"Monte Carlo\" + sample + \"; Further Muon Pt - Muon Id Loose, Iso Id Medium; Further Muon Pt - Muon Id Loose, Iso Id Medium; Events\", 100, 20, 220), \"FurtherMuonLooseMedium_pt\", \"LumiXS\")\n",
    "#         hist[sample][\"further_muon_loose_medium_pf_rel_iso_03_all\"] = rdfRemainingIsolatedMuonMuonIdLooseIsoIdMedium[sample].Histo1D((sample + \"_\" + \"further_muon_loose_medium_pf_rel_iso_03_all\", \"Monte Carlo\" + sample + \"; Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Medium; Further Muon Pf Rel Iso 03 All - Muon Id Loose, Iso Id Medium; Events\", 50, 0, .5), \"FurtherMuonLooseMedium_pfRelIso03_all\", \"LumiXS\")\n",
    "#         hist[sample][\"further_muon_loose_medium_pf_iso_id\"] = rdfRemainingIsolatedMuonMuonIdLooseIsoIdMedium[sample].Histo1D((sample + \"_\" + \"further_muon_loose_medium_pf_iso_id\", \"Monte Carlo\" + sample + \"; Further Muon Pf Iso Id - Muon Id Loose, Iso Id Medium; Further Muon Pf Iso Id - Muon Id Loose, Iso Id Medium; Events\", 6, 1, 6), \"FurtherMuonLooseMedium_pfIsoid\", \"LumiXS\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "prospective-permission",
   "metadata": {},
   "outputs": [],
   "source": [
    "for sample in dictOfListOfFiles:\n",
    "\n",
    "    ROOT.RDF.SaveGraph(rdf[sample], str(sample) + \".dot\")\n",
    "    os.system(\"dot -Tpdf \" + str(sample) + \".dot > \" + str(sample) + \"_graph.pdf\" )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "small-volleyball",
   "metadata": {},
   "outputs": [],
   "source": [
    "for sample in dictOfListOfFiles:\n",
    "    #nparray[sample] = nparraynode[sample].AsNumpy([\"genWeight\", \"event\", \"run\"])\n",
    "    \n",
    "    cutflow = report[sample].GetValue()\n",
    "    cutflow.Print()\n",
    "    \n",
    "    era = \"2018\"\n",
    "    process = sample\n",
    "    channel = \"Mu\"\n",
    "    syst = \"nominal\"\n",
    "\n",
    "    outFile = ROOT.TFile.Open(\"{}_{}_{}.root\".format(era, channel, process), \"RECREATE\")\n",
    "    for name, hist_pointer in hist[sample].items():\n",
    "        print(hist_pointer)\n",
    "        hist_value = hist_pointer.GetValue()\n",
    "        \n",
    "        hist_value.SetName(\"{}___{}___{}___{}___{}\".format(era, channel, process, name, syst))\n",
    "        print(hist_value)\n",
    "        hist_value.Write()\n",
    "\n",
    "    outFile.Close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58cd86df",
   "metadata": {},
   "outputs": [],
   "source": [
    "for item in mureport:\n",
    "    print(item)\n",
    "    mureport[item].Print()\n",
    "#print(nparray['MonteCarloWJetsToLNu'].keys())\n",
    "\n",
    "#a = np.sort(nparray['MonteCarloWJetsToLNu']['genWeight'])\n",
    "\n",
    "#print(a[:10:-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16ec3f98",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "sparkconnect": {
   "bundled_options": [],
   "list_of_options": []
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
